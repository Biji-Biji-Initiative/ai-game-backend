#!/usr/bin/env node

/**
 * Setup script for integration tests
 * 
 * This script helps create the necessary environment configuration
 * for running integration tests with real or mock Supabase connections.
 */
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import readline from 'readline';
import { promisify } from 'util';

// Get the directory of this script
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Path to the test environment file
const ENV_FILE_PATH = path.join(__dirname, '..', '..', '..', '.env.test');

// Promisify readline interface
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = promisify(rl.question).bind(rl);

/**
 * Main function to run the setup
 */
async function setup() {
  console.log('Setting up test environment...');
  console.log('This script will help configure your integration tests.');
  
  // Check if the file exists
  const exists = fs.existsSync(ENV_FILE_PATH);
  let envVars = {};
  
  if (exists) {
    console.log(`Found existing test environment file at ${ENV_FILE_PATH}`);
    const content = fs.readFileSync(ENV_FILE_PATH, 'utf8');
    
    // Parse existing environment variables
    content.split('\n').forEach(line => {
      if (line && !line.startsWith('#')) {
        const match = line.match(/^([^=]+)=(.*)$/);
        if (match) {
          envVars[match[1]] = match[2];
        }
      }
    });
  } else {
    console.log('No existing test environment file found. Creating a new one.');
  }
  
  // Ask for test environment configuration
  const useRealSupabase = await askYesNo(
    'Do you want to enable true integration tests with real Supabase?',
    envVars.USE_REAL_SUPABASE === 'true'
  );
  
  envVars.USE_REAL_SUPABASE = useRealSupabase ? 'true' : 'false';
  
  if (useRealSupabase) {
    // Get Supabase configuration
    envVars.SUPABASE_URL = await askQuestion(
      'Enter your Supabase project URL:',
      envVars.SUPABASE_URL || ''
    );
    
    envVars.SUPABASE_ANON_KEY = await askQuestion(
      'Enter your Supabase anon key:',
      envVars.SUPABASE_ANON_KEY || ''
    );
    
    // Ask for optional service key
    const useServiceKey = await askYesNo(
      'Do you want to use a Supabase service key for additional permissions?',
      !!envVars.SUPABASE_SERVICE_KEY
    );
    
    if (useServiceKey) {
      envVars.SUPABASE_SERVICE_KEY = await askQuestion(
        'Enter your Supabase service key:',
        envVars.SUPABASE_SERVICE_KEY || ''
      );
    } else if (envVars.SUPABASE_SERVICE_KEY) {
      delete envVars.SUPABASE_SERVICE_KEY;
    }
    
    // Ask about test data isolation
    const testSuffix = await askQuestion(
      'Enter a suffix to append to test data (helps with isolation):',
      envVars.TEST_DATA_SUFFIX || `test_${Date.now()}`
    );
    
    envVars.TEST_DATA_SUFFIX = testSuffix;
  }
  
  // Ask about verbose logging
  const verboseLogging = await askYesNo(
    'Enable verbose logging during tests?',
    envVars.VERBOSE_TESTING === 'true'
  );
  
  envVars.VERBOSE_TESTING = verboseLogging ? 'true' : 'false';
  
  // Convert environment variables to string
  let envContent = '# Test Environment Configuration\n';
  envContent += '# Generated by setupTestEnv.js\n\n';
  
  for (const [key, value] of Object.entries(envVars)) {
    envContent += `${key}=${value}\n`;
  }
  
  // Write to file
  fs.writeFileSync(ENV_FILE_PATH, envContent);
  
  console.log(`\nConfiguration saved to ${ENV_FILE_PATH}`);
  console.log('\nTo run tests with this configuration:');
  console.log('npx mocha tests/integration/workflows/**/*.test.js');
  
  if (useRealSupabase) {
    console.log('\nTo run only true integration tests with real Supabase:');
    console.log('npx mocha tests/integration/workflows/**/*.integration.test.js');
  }
  
  rl.close();
}

/**
 * Ask a yes/no question
 * @param {string} questionText The question to ask
 * @param {boolean} defaultValue Default value if user just presses Enter
 * @returns {Promise<boolean>} User's response
 */
async function askYesNo(questionText, defaultValue = false) {
  const defaultStr = defaultValue ? 'Y/n' : 'y/N';
  const answer = await question(`${questionText} [${defaultStr}] `);
  
  if (answer === '') {
    return defaultValue;
  }
  
  return answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes';
}

/**
 * Ask a question with a default value
 * @param {string} questionText The question to ask
 * @param {string} defaultValue Default value if user just presses Enter
 * @returns {Promise<string>} User's response
 */
async function askQuestion(questionText, defaultValue = '') {
  const defaultStr = defaultValue ? ` [${defaultValue}]` : '';
  const answer = await question(`${questionText}${defaultStr} `);
  
  return answer || defaultValue;
}

// Run the setup
setup().catch(err => {
  console.error('Error setting up test environment:', err);
  process.exit(1);
}); 
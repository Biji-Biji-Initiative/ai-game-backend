Okay, focusing on getting your tests up-to-date, functional, and emphasizing real API/integration behavior where appropriate. Based on the provided files (which show a good structure is intended but might have issues), here's a plan with actionable tickets:

Overall Goal: Achieve a reliable test suite that reflects the current DDD architecture, validates core business logic and API functionality, and provides confidence before deployment. We'll prioritize fixing existing tests and structure, then refactoring, and finally adding coverage.

Phase 1: Stabilization & Cleanup (Getting Tests to Run)

These tickets address immediate issues preventing tests from running correctly based on the logs and structure.

Ticket #T1: Fix Test Import Paths ✅
Priority: High
Issue: Logs (MIGRATION_PROGRESS.md, specific test logs) indicate widespread Cannot find module errors due to incorrect relative paths after test file migration.
Affected Files: Primarily files within tests/domain/, tests/integration/, tests/external/, tests/e2e/.
Action:
✅ Created scripts/fix-test-imports.js and scripts/fix-source-imports.js to fix import paths
✅ Fixed import paths in all test files
✅ Created a shell script (scripts/fix-test-suite.sh) that runs both fix scripts and documents manual steps
Task: Verify all test files use correct relative paths for importing source code and helpers after the migration to ESM and file restructuring. Run the fix scripts again if necessary.

Ticket #T2: Resolve Supabase Connectivity/Schema Issues in Tests ✅
Priority: High
Issue: Logs show Supabase errors in integration/E2E tests: credentials not found, "relation does not exist", "column does not exist", foreign key violations.
Affected Files: tests/helpers/apiTestHelper.js, tests/loadEnv.js, tests in tests/e2e/, tests/external/supabase/, tests/integration/ that interact with Supabase.
Action:
✅ Verified SUPABASE_URL, SUPABASE_KEY, SUPABASE_ANON_KEY and SUPABASE_SERVICE_ROLE_KEY exist in .env.test
✅ Updated supabase-client.test.js to use a more reliable connection checking method
✅ Added verifySupabaseConnection() helper function in apiTestHelper.js
✅ Fixed axios import in personality.e2e.test.js
✅ Created scripts/test-supabase-schema.js to check and create required tables
✅ Implemented proper handling of foreign key constraints with ON DELETE CASCADE
✅ Added test user creation for consistent test scenarios
✅ Updated fix-test-suite.sh to include schema verification
Task: Run the test-supabase-schema.js script to verify schema and then run tests to ensure database connectivity issues are resolved.

Ticket #T3: Fix OpenAI API Parameter Errors ✅
Priority: High
Issue: Logs (MIGRATION_PROGRESS.md, tests/integration/logs/evaluation_test_*.json) show errors like "response_format parameter not supported" or issues with messages format, indicating outdated API calls.
Affected Files: Tests in tests/external/openai/, tests/integration/ involving OpenAI calls.
Action:
✅ Updated OpenAI client to use the new Responses API format
✅ Fixed 'response_format' parameter to use 'text.format' instead
✅ Updated ResponseFormat enum to use 'json_object' instead of 'json'
✅ Fixed JSON response parsing in the client.js file
✅ Successfully ran OpenAI API tests with the updated parameters
Task: Confirm all direct and indirect calls to the OpenAI client (especially via services like ChallengeGenerationService, EvaluationService) use the updated Responses API format (text.format, json_object, etc.) and parameter names.

Ticket #T4: Fix eventBus Mocking ✅
Priority: High
Issue: Tests are failing due to eventBus not being properly mocked, events can't be verified.
Affected Files: userService.test.js, challengeService.test.js and other domain tests that use eventBus.
Action:
✅ Created dedicated domainEventsMock.js module with proper mocking utilities
✅ Implemented strategy for properly testing event publications in services
✅ Successfully fixed and ran the user.service.test.js as a sample test
✅ Fixed imports in domain event mocks to use ES module syntax
✅ Updated event handlers to ensure proper subscription and registration
Task: Run the domain layer tests to verify that event handling is working correctly. Services that use domainEvents should be able to publish events and have them verified in tests.

Ticket #T5: Update Tests for ESM ✅
Priority: High
Issue: Project has migrated to ES modules but tests still use CommonJS require.
Affected Files: All test files using require() instead of import.
Action:
✅ Updated run-tests.js to use ES modules
✅ Updated mockSetup.js to use ES modules
✅ Updated loadEnv.js to use ES modules
✅ Updated tests/domain/user/user.service.test.js to use ES modules
✅ Updated src/core/user/services/UserService.js to use ES modules
✅ Updated src/core/user/errors/UserErrors.js to use ES modules
✅ Updated src/core/infra/errors/AppError.js to use ES modules
✅ Ran migrate:esm:batch script to update all test files to ES modules syntax
✅ Fixed import paths in UserService.js and other files
✅ Updated sample-openai-test.test.js to use latest OpenAI API format
✅ Created fix-commonjs-to-esm.js script to automatically convert remaining CommonJS files
✅ Created fix-esm-test-issues.js script to fix common ESM compatibility issues
✅ Updated package.json to include "type": "module"
✅ Fixed missing .js extensions in local import paths
✅ Implemented proper handling of __dirname and __filename in ESM context
✅ Created docs/ESM_MIGRATION_GUIDE.md with comprehensive guidelines
✅ Updated fix-test-suite.sh to handle all ESM conversion tasks
Task: Run the scripts/fix-test-suite.sh script to automatically fix any remaining ESM compatibility issues. Refer to docs/ESM_MIGRATION_GUIDE.md for common issues and solutions.

Ticket #T6: Cleanup Test File Structure & Duplicates ✅
Priority: Medium
Issue: Potential duplicate tests (user-personality-interaction.test.js), misplaced tests, and remaining legacy files.
Affected Files: Entire tests/ directory, especially tests/integration/ and tests/api/.
Action:
✅ Deleted duplicates of user-personality-interaction.test.js (3 copies were found in different directories)
✅ Fixed axios imports in remaining test file to use proper ES module pattern
✅ Deleted duplicate challengeWorkflow.test.js and fixed import paths in the remaining file
✅ Moved all e2e tests to the tests/e2e directory and organized by domain
✅ Created proper subdirectories for e2e tests (user, challenge, focusArea)
✅ Fixed import paths in moved files
✅ Moved environment-test.test.js to tests/setup/environment directory
✅ Removed empty directories
✅ Verified no legacy, domains, or old api directories exist for archival

Phase 2: Refactoring & Alignment

These tickets focus on updating test logic to match the current codebase architecture and patterns.

Ticket #T7: Update Tests for Standardized Error Handling ✅
Priority: High
Issue: Tests might be expecting generic Error or old custom errors, not the new domain-specific errors (UserNotFoundError, ChallengeValidationError, etc.) thrown by wrapped methods.
Affected Files: All test files covering components that now use with*ErrorHandling.
Action:
✅ Updated Challenge model to throw ChallengeValidationError instead of generic Error
✅ Updated Challenge model test to expect ChallengeValidationError
✅ Updated ChallengeEvaluationService to use MissingParameterError for dependency validation
✅ Updated ChallengeEvaluationService test to expect MissingParameterError
✅ Created scripts/find-error-assertions.js to identify tests using generic Error
✅ Created scripts/fix-error-handling.js to automate error handling updates
✅ Fixed all challenge domain tests (23 files) to use domain-specific errors
✅ Updated catch blocks to catch specific domain error types
✅ Fixed generic throw new Error() to use domain-specific errors
✅ Applied the same fixes to user domain tests
✅ Applied the same fixes to personality domain tests
✅ Applied the same fixes to evaluation domain tests
✅ Applied the same fixes to focusArea domain tests
✅ Updated fix-test-suite.sh to include error handling fixes for all domains
Task: Audit tests that assert on thrown errors. Update expect(...).to.throw(...) assertions to expect specific, domain-appropriate error classes (e.g., ChallengeNotFoundError, UserValidationError) defined in src/core/[domain]/errors/ instead of generic Error. Verify error codes and messages where necessary.

Ticket #T8: Update Tests for DI Implementation ✅
Priority: High
Issue: Tests might still be mocking dependencies using proxyquire or jest.mock instead of passing mocks via the constructor (DI).
Affected Files: Primarily tests/unit/ and tests/domain/ tests for services, controllers, coordinators, repositories.
Action:
✅ Refactored ChallengeCoordinator.test.js to use proper DI instead of proxyquire
✅ Refactored PersonalityCoordinator.test.js to use proper DI instead of proxyquire
✅ Refactored evaluation-service-system-messages.test.js to use proper DI instead of proxyquire
✅ Created scripts/find-di-issues.js to identify tests using proxyquire or other problematic patterns
✅ Created docs/DEPENDENCY_INJECTION_PATTERNS.md with comprehensive DI guidelines
✅ Refactored system-message.test.js to use proper dependency injection instead of proxyquire
✅ Created scripts/fix-di-patterns.js to help automate refactoring from proxyquire to DI
✅ Refactored remaining tests to follow the pattern in DEPENDENCY_INJECTION_PATTERNS.md
✅ Created mock objects/stubs for all constructor dependencies
✅ Instantiated the class under test by passing dependency mocks
✅ Removed all remaining proxyquire or jest.mock usage
Task: Systematically remove proxyquire and jest.mock (if used) from unit/domain tests. Instantiate classes under test by passing mocks of their constructor dependencies. Follow the pattern established in DEPENDENCY_INJECTION_PATTERNS.md.

Ticket #T9: Update Tests for VOs, DTOs, Mappers ✅
Priority: Medium
Issue: Tests might pass incorrect data types (primitives vs VOs) to services/coordinators, or assert on internal model properties instead of DTO properties in API/E2E tests.
Affected Files: tests/domain/, tests/application/, tests/integration/, tests/e2e/.
Action:
✅ Updated userLifecycle.e2e.test.js to ensure requests use UserDTOMapper.fromRequest structure
✅ Updated userLifecycle.e2e.test.js to verify response matches UserDTO structure
✅ Updated personality.e2e.test.js to ensure requests use proper DTO formats
✅ Updated personality.e2e.test.js to verify response matches PersonalityDTO structure
✅ Updated personality.service.test.js to consistently use UserId Value Objects
✅ Updated challengeRepository.test.js to use UserId and ChallengeId Value Objects
✅ Updated UserService.test.js to use UserId Value Objects for all operations
✅ Created scripts/find-vo-dto-issues.js to identify primitive ID usage in tests
✅ Created scripts/fix-vo-usage.js to automatically fix Value Object usage in tests
✅ Created scripts/fix-dto-mappers.js to automatically fix DTO mapper usage in E2E/API tests
✅ Created scripts/fix-all-vo-dto-issues.sh to run the fixes for all domains
✅ Fixed user domain tests to use UserId Value Objects (5 files)
✅ Fixed challenge domain tests to use ChallengeId Value Objects (2 files)
✅ Fixed focusArea domain tests to use FocusAreaId Value Objects (2 files)
✅ Added proper DTO mappers to challenge domain E2E/API tests (7 files)
✅ Added proper DTO mappers to focusArea domain E2E/API tests (3 files)
✅ Added proper DTO mappers to evaluation domain E2E/API tests (1 file)
✅ Added proper DTO mappers to personality domain E2E/API tests (4 files)
Task: Complete! All domain, application, and E2E tests now properly use Value Objects for IDs and DTO mappers at API boundaries.

Ticket #T10: Ensure Correct Test Category Semantics ✅
Priority: Medium
Issue: Migrated tests might not perfectly align with the intended scope (e.g., a "domain" test might still try to make external calls).
Affected Files: All files in tests/domain/, tests/integration/, tests/external/, tests/e2e/.
Action:
✅ Verify domain tests use only in-memory repositories and mock all external dependencies
✅ Verify integration tests focus on cross-component/cross-domain interaction
✅ Verify external tests directly target an external service
✅ Verify E2E tests use the apiTestHelper or axios to make HTTP requests
✅ Created TEST_SEMANTICS.md with detailed guidelines for each test category
✅ Created TEST_MIGRATION_CHECKLIST.md with steps for migrating tests between categories
✅ Created verification tool (tools/verify-test-categories.js) to identify tests with incorrect semantics
✅ Created migration plan generator (tools/generate-migration-plan.js) to analyze and prioritize fixes
✅ Created batch migration script (tools/batch-test-migration.js) to fix multiple tests at once
✅ Updated E2E test fixer with better pattern matching for API calls (tools/fix-e2e-test-semantics.js)
✅ Added npm scripts for test verification and migration (test:verify, test:migration-plan, etc.)
✅ Updated PR template to include test category semantics verification
Task: Run the verification tool (tools/verify-test-categories.js) and review its output. Manually inspect tests flagged as potentially having incorrect semantics (e.g., a domain test making external calls). Use the migration plan generator/script if needed.

Phase 3: Enhancement & Coverage

These tickets focus on improving the quality and scope of the tests.

Ticket #T11: E2E Test: Core User Authentication Lifecycle ✅
Priority: Medium
Issue: The current E2E tests might not cover all critical API endpoints or user workflows, particularly authentication flows.
Affected Files: tests/e2e/user/
Action:
✅ Created auth.e2e.test.js that covers: User Signup -> Login -> Get Profile (/users/me) -> Refresh Token -> Logout
✅ Verified each step returns expected data and status codes
✅ Tested error scenarios for authentication endpoints
✅ Implemented robust tests that work in both development and production environments

Ticket #T12: E2E Test: Challenge Generation & Retrieval
Priority: Medium
Issue: Need comprehensive E2E tests for the core challenge creation flow including AI interaction and persistence.
Affected Files: tests/e2e/challenge/
Action:
⬜ Create an E2E test (challengeGeneration.e2e.test.js) that: Authenticates -> Calls POST /challenges/generate -> Verifies 201 response -> Calls GET /challenges/{id} -> Verifies retrieved challenge structure
⬜ Test various challenge generation parameters and verify correct responses
⬜ Include error cases (missing parameters, invalid parameters)

Ticket #T13: E2E Test: Challenge Response & Evaluation
Priority: Medium
Issue: Need comprehensive E2E tests for challenge completion and evaluation workflow.
Affected Files: tests/e2e/challenge/
Action:
⬜ Create an E2E test (challengeEvaluation.e2e.test.js) that: Authenticates -> Generates/Retrieves a challenge -> Submits a response -> Verifies evaluation
⬜ Test various response types and verify evaluation structure
⬜ Verify feedback, scores, and evaluation properties

Ticket #T14: E2E Test: Focus Area Recommendation & Selection
Priority: Medium
Issue: Need E2E tests for focus area personalization and user update workflows.
Affected Files: tests/e2e/focusArea/
Action:
⬜ Create an E2E test (focusArea.e2e.test.js) that tests: Authentication -> Generate/retrieve focus areas -> Select a focus area -> Verify user profile update
⬜ Test different recommendation scenarios
⬜ Verify user profile correctly reflects selected focus area

Ticket #T15: E2E Test: Personality Profile Update & Preference Sync
Priority: Medium
Issue: Need E2E tests for cross-domain interactions between Personality and User domains.
Affected Files: tests/e2e/personality/
Action:
⬜ Create an E2E test (personalitySync.e2e.test.js) that: Authenticates -> Updates personality attitudes -> Verifies user preferences reflect changes
⬜ Test different attitude updates and verify appropriate preference changes
⬜ Verify event handling between domains

Ticket #T16: External Test: OpenAI Challenge Generation Variations
Priority: Medium
Issue: Current external tests for OpenAI may not test different parameter variations.
Affected Files: tests/external/openai/
Action:
⬜ Enhance challengeGeneration.direct.test.js to test parameter variations (difficulty, focusArea, challengeType)
⬜ Assert that returned JSON structure is consistently valid across parameter variations
⬜ Verify that content varies appropriately with different parameters

Ticket #T17: External Test: OpenAI Evaluation Variations
Priority: Medium
Issue: Need more comprehensive testing of evaluation prompts with different response types.
Affected Files: tests/external/openai/
Action:
⬜ Enhance evaluation.external.test.js to test different response types (short, long, high/low quality)
⬜ Assert that evaluation structure is valid for all responses
⬜ Verify that scores/feedback reasonably reflect response quality

Ticket #T18: External Test: Supabase Schema/Relation Verification
Priority: Medium
Issue: Need direct verification of database constraints in the Supabase instance.
Affected Files: tests/external/supabase/
Action:
⬜ Enhance supabase-client.test.js to test foreign key constraints
⬜ Test non-nullable column constraints
⬜ Verify expected error messages for constraint violations

Ticket #T19: Integration Test: Coordinator Error Handling
Priority: Medium
Issue: Need tests to verify that coordinators correctly handle and translate errors from lower layers.
Affected Files: tests/integration/
Action:
⬜ Add tests for coordinators with mocked services throwing domain errors
⬜ Assert that coordinators catch and map errors according to BaseCoordinator logic
⬜ Test different error types and scenarios

Ticket #T20: Integration Test: Cross-Domain Event Workflow (Challenge -> Progress)
Priority: Medium
Issue: Need tests for event-driven workflows between Challenge completion and Progress updates.
Affected Files: tests/integration/
Action:
⬜ Create challengeProgress.workflow.test.js similar to challengeFocusArea.workflow.test.js
⬜ Mock ChallengeService and ProgressService with in-memory repositories
⬜ Test event handling between domains for challenge completion and progress updates

Next Steps:

1. Continue with Phase 1: Focus on tickets T4 and T5 to get the test suite into a fully runnable state
2. Move to Phase 2: Refactor tests to align with the current architecture (T7-T9)
3. Finally address Phase 3: Enhance test coverage and quality with new E2E and integration tests (T11-T20)

Progress Update (March 30):
- Created test-supabase-schema.js script to set up required tables and constraints
- Updated the fix-test-suite.sh script to verify Supabase schema before running tests
- Added foreign key constraint verification and test user creation
- Verified that database schema issues are now handled correctly
- Completed migration from CommonJS to ES modules (Ticket #T5)
- Created scripts to automatically fix common ESM issues (fix-commonjs-to-esm.js and fix-esm-test-issues.js)
- Created a comprehensive ES Module migration guide in docs/ESM_MIGRATION_GUIDE.md
- All Phase 1 tickets are now complete (T1-T6), ready to move to Phase 2

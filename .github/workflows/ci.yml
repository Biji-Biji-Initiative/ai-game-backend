name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Define default permissions for all jobs
permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    
    # Define if we're in a secure context (not a PR from a fork)
    # This is crucial because fork PRs don't have access to secrets for security reasons
    env:
      SECURE_CONTEXT: ${{ github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository }}
    
    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    # Only create a .env file with secrets in secure contexts
    - name: Create .env file for secure context
      if: env.SECURE_CONTEXT == 'true'
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
        echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env
        echo "NODE_ENV=test" >> .env
        echo "LOG_LEVEL=error" >> .env
    
    # Create a placeholder .env file for non-secure contexts
    - name: Create .env file for non-secure context
      if: env.SECURE_CONTEXT != 'true'
      run: |
        echo "OPENAI_API_KEY=dummy-key" >> .env
        echo "SUPABASE_URL=https://example.com" >> .env
        echo "SUPABASE_KEY=dummy-key" >> .env
        echo "NODE_ENV=test" >> .env
        echo "LOG_LEVEL=error" >> .env
    
    # Set environment variables for tests
    # Check both if we have secrets AND if we're in a secure context
    - name: Set environment variables
      id: set_env
      run: |
        if [[ "${{ env.SECURE_CONTEXT }}" == "true" && -n "${{ secrets.OPENAI_API_KEY }}" && -n "${{ secrets.SUPABASE_URL }}" && -n "${{ secrets.SUPABASE_KEY }}" ]]; then
          echo "HAVE_API_SECRETS=true" >> $GITHUB_OUTPUT
        else
          echo "HAVE_API_SECRETS=false" >> $GITHUB_OUTPUT
          echo "Note: API tests will be skipped because we're either in a PR from a fork or secrets are not available"
        fi
    
    # Run schema validation and domain model tests that don't require API calls
    - name: Run unit tests
      run: npm run test:unit
    
    # Run integration tests for our domain-driven design
    - name: Run integration tests
      run: npm run test:integration
      
    # Run real API tests if secrets are available
    - name: Run real API tests
      if: steps.set_env.outputs.HAVE_API_SECRETS == 'true'
      run: npm run test:real-api
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
    
    # Skip API tests in non-secure contexts with an informative message
    - name: Skip real API tests
      if: steps.set_env.outputs.HAVE_API_SECRETS != 'true'
      run: echo "Skipping real API tests in pull requests from forks for security reasons"
    
    # Run end-to-end tests
    - name: Run E2E tests
      if: steps.set_env.outputs.HAVE_API_SECRETS == 'true'
      run: npm run test:e2e
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
    
    # Skip E2E tests in non-secure contexts with an informative message
    - name: Skip E2E tests
      if: steps.set_env.outputs.HAVE_API_SECRETS != 'true'
      run: echo "Skipping E2E tests in pull requests from forks for security reasons"

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npx eslint src/ tests/
      
    - name: Check Prettier formatting
      run: npx prettier --check "src/**/*.js" "tests/**/*.js" 
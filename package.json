{
  "name": "responses-api-fight-club",
  "version": "1.0.0",
  "description": "A stateful web app that challenges users with dynamic, AI-generated cognitive challenges to highlight their unique Human Edge",
  "main": "index.js",
  "type": "module",
  "engines": {
    "node": ">=22.11.0"
  },
  "bin": {
    "responses-cli": "./cli.js"
  },
  "scripts": {
    "start": "node -r tsconfig-paths/register ./start.sh",
    "dev": "node -r tsconfig-paths/register ./start.sh development",
    "prod": "node -r tsconfig-paths/register ./start.sh production",
    "test": "jest --config=jest.config.js",
    "pm2:status": "pm2 list",
    "pm2:logs": "pm2 logs ai-fight-club-api",
    "pm2:monitor": "pm2 monit",
    "stop": "./stop.sh",
    "restart": "./restart.sh",
    "verify": "node scripts/verify-server.js",
    "verify:start": "node scripts/verify-server.js --start-server",
    "verify:prod": "node scripts/verify-server.js --production",
    "setup:env": "node scripts/setup/setup-env.js",
    "setup:verify": "node scripts/verify-setup.js",
    "db:migrate": "node scripts/setup/run-migrations.js",
    "db:push": "npx supabase db push",
    "db:reset": "npx supabase db reset",
    "db:seed": "node scripts/setup/seed-data.js",
    "db:seed:challenges": "node scripts/setup/seed-data.js --challenges",
    "db:seed:users": "node scripts/setup/seed-data.js --users",
    "db:seed:reset": "node scripts/setup/seed-data.js --all --reset",
    "imports:backup": "node scripts/backup-src.js",
    "imports:convert": "node scripts/convert-imports.js",
    "imports:test": "node scripts/test-import-conversion.js",
    "imports:revert-test": "node scripts/revert-test-import.js",
    "imports:convert-tests": "node scripts/convert-test-imports.js",
    "imports:verify": "node scripts/verify-imports.js",
    "imports:fix-all": "npm run imports:backup && npm run imports:convert && npm run imports:convert-tests && npm run imports:verify",
    "test:domain": "node -r tsconfig-paths/register scripts/run-tests.js domain",
    "test:unit": "jest --config=jest.unit.config.json",
    "test:integration": "jest --config=jest.integration.config.json",
    "test:external": "node -r tsconfig-paths/register scripts/run-tests.js external",
    "test:e2e": "node -r tsconfig-paths/register scripts/run-tests.js e2e",
    "test:application": "node -r tsconfig-paths/register scripts/run-tests.js application",
    "test:watch": "node -r tsconfig-paths/register scripts/run-tests.js --watch",
    "test:skip-openai": "node -r tsconfig-paths/register scripts/run-tests.js --skip-openai",
    "test:skip-supabase": "node -r tsconfig-paths/register scripts/run-tests.js --skip-supabase",
    "test:focus": "node -r tsconfig-paths/register scripts/run-tests.js --focus",
    "test:verify": "node tools/verify-test-categories.js",
    "test:with-at": "node test-with-resolver.js",
    "test:jest-with-at": "node test-with-resolver.js --framework jest",
    "test:mocha-with-at": "node test-with-resolver.js --framework mocha",
    "lint": "eslint src/app.js src/server.js --quiet",
    "lint:fix": "eslint src/app.js src/server.js --quiet --fix",
    "lint:tests": "eslint tests/ --quiet",
    "lint:tests:fix": "eslint tests/ --quiet --fix",
    "format": "prettier --write \"src/**/*.js\" \"scripts/**/*.js\" \"tests/**/*.js\" \"*.md\"",
    "format:check": "prettier --check \"src/**/*.js\" \"scripts/**/*.js\" \"tests/**/*.js\" \"*.md\"",
    "quality": "node scripts/utils/verify-code-quality.js",
    "quality:jsdoc": "node scripts/utils/verify-code-quality.js --jsdoc-only",
    "quality:fixable": "node scripts/utils/verify-code-quality.js --fixable",
    "cleanup:scripts": "node scripts/utils/cleanup-temp-scripts.js",
    "dev:user": "node scripts/dev/create-test-user.js",
    "dev:token": "node scripts/dev/get-token.js",
    "dev:evaluations": "node scripts/dev/view-evaluations.js",
    "prepare": "husky && husky install",
    "swagger:validate": "node src/scripts/validateSwagger.js",
    "swagger:gen": "node -e \"import swaggerJSDoc from 'swagger-jsdoc'; import options from './src/config/swagger.js'; import fs from 'fs'; const spec = swaggerJSDoc(options); fs.writeFileSync('./openapi.json', JSON.stringify(spec, null, 2));\"",
    "swagger:bundle": "swagger-cli bundle openapi/index.yaml -o openapi-spec.json -t json",
    "swagger:bundle:yaml": "swagger-cli bundle openapi/index.yaml -o openapi-spec.yaml -t yaml",
    "swagger:setup-validator": "node -r tsconfig-paths/register ./src/scripts/setup-openapi-validator.js",
    "swagger:setup": "npm run swagger:bundle && npm run swagger:setup-validator",
    "swagger:remove-jsdoc": "node -r tsconfig-paths/register ./src/scripts/remove-swagger-jsdoc.js",
    "swagger:migrate": "node -r tsconfig-paths/register ./scripts/openapi-migration.js",
    "events:update-services": "node scripts/update-services.js",
    "events:update-services:dry": "node scripts/update-services.js --dry-run --verbose",
    "events:update-coordinators": "node scripts/update-coordinators.js",
    "events:update-coordinators:dry": "node scripts/update-coordinators.js --dry-run --verbose",
    "events:update-event-files": "node scripts/update-event-files.js",
    "events:update-event-files:dry": "node scripts/update-event-files.js --dry-run --verbose",
    "events:verify": "node scripts/verify-event-migration.js",
    "events:verify:verbose": "node scripts/verify-event-migration.js --verbose",
    "events:migrate": "npm run events:update-services && npm run events:update-coordinators && npm run events:update-event-files && npm run events:verify",
    "events:migrate:dry": "npm run events:update-services:dry && npm run events:update-coordinators:dry && npm run events:update-event-files:dry && npm run events:verify:verbose",
    "events:full-migration": "node scripts/run-full-domain-event-migration.js",
    "events:full-migration:dry": "node scripts/run-full-domain-event-migration.js --dry-run"
  },
  "jest": {
    "setupFilesAfterEnv": [
      "./jest.setup.js"
    ],
    "testEnvironment": "node",
    "testTimeout": 15000,
    "testPathIgnorePatterns": [
      "/node_modules/",
      "/archive/"
    ]
  },
  "keywords": [
    "ai",
    "openai",
    "responses-api",
    "cognitive-challenges",
    "human-edge"
  ],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@supabase/supabase-js": "^2.49.4",
    "axios": "^1.8.4",
    "body-parser": "^2.2.0",
    "chalk": "^5.4.1",
    "commander": "^13.1.0",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-openapi-validator": "^5.4.7",
    "express-rate-limit": "^7.5.0",
    "node-cache": "^5.1.2",
    "openai": "^4.90.0",
    "readline": "^1.3.0",
    "redis": "^4.7.0",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1",
    "uuid": "^11.1.0",
    "winston": "^3.17.0",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@apidevtools/swagger-parser": "^10.1.0",
    "@babel/cli": "^7.27.0",
    "@babel/core": "^7.26.10",
    "@babel/eslint-parser": "^7.27.0",
    "@babel/generator": "^7.27.0",
    "@babel/parser": "^7.27.0",
    "@babel/plugin-syntax-import-assertions": "^7.26.0",
    "@babel/traverse": "^7.27.0",
    "@cucumber/cucumber": "^11.2.0",
    "@eslint/eslintrc": "^3.3.1",
    "@eslint/js": "^9.23.0",
    "ajv": "^8.17.1",
    "chai": "^5.2.0",
    "chai-as-promised": "^8.0.1",
    "cjstoesm": "^3.0.0",
    "eslint": "^9.23.0",
    "eslint-config-prettier": "^10.1.1",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-jsdoc": "^50.6.9",
    "eslint-plugin-n": "^17.17.0",
    "eslint-plugin-prettier": "^5.0.1",
    "glob": "^11.0.1",
    "globals": "^16.0.0",
    "husky": "^9.1.7",
    "jest": "^29.7.0",
    "jscodeshift": "^17.3.0",
    "lint-staged": "^15.2.0",
    "madge": "^8.0.0",
    "mkdirp": "^3.0.1",
    "mocha": "^11.1.0",
    "mock-fs": "^5.5.0",
    "node-fetch": "^2.7.0",
    "nodemon": "^3.0.1",
    "pg": "^8.14.1",
    "prettier": "^3.1.0",
    "proxyquire": "^2.1.3",
    "sinon": "^20.0.0",
    "supabase": "^2.20.5",
    "supertest": "^7.1.0",
    "swagger-cli": "^4.0.4",
    "tsconfig-paths": "^4.2.0"
  },
  "lint-staged": {
    "*.{js,jsx}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{json,md}": [
      "prettier --write"
    ]
  }
}

JIRA-1 (Bug): Investigate duplicate static asset configurations in app.js

Ticket Type: Bug
Severity: Medium
Component: src/app.js
Description: app.js appears to configure static asset serving for API/UI testers in two potentially overlapping ways:
app.use(config.api.testerPath, express.static(testerUiPath)); using api-tester-ui directory.
app.use('/tester', express.static(path.join(__dirname, '../public/tester'))); using public/tester directory.
This duplication could lead to confusion, incorrect asset serving, or unexpected behavior depending on middleware order and configuration values.
Tasks:
Verify the intended paths and directories for the API tester UI and any other static "tester" assets.
Consolidate the static asset serving logic into a single, clear configuration.
Remove any redundant express.static middleware calls for tester assets.
Ensure configuration values (config.api.testerPath) align with the final implementation.
Acceptance Criteria:
Static assets for the API tester UI are served correctly from a single, well-defined path.
Redundant static middleware configurations are removed from app.js.
The purpose and source directory for all tester-related static assets are clear.

JIRA-13 (Robustness): Remove Mock Fallbacks in Production Service Constructors

Ticket Type: Bug / Improvement
Severity: High
Component: src/core/challenge/services/ChallengeService.js (and potentially others)
Description: The ChallengeService constructor includes fallback logic to use mock repositories if real ones aren't provided via dependencies. While useful for development or testing, this pattern is dangerous in production as it can mask critical dependency injection failures, leading to unexpected behavior instead of a clean startup failure. Services should fail fast if required dependencies are missing in production environments.
Tasks:
Modify the constructor of ChallengeService (and any other services using similar patterns) to check for the presence of required dependencies (like challengeRepository).
If a required dependency is missing and process.env.NODE_ENV === 'production', throw a specific ConfigurationError or similar critical error immediately to prevent the application from starting in a broken state.
Retain the mock fallbacks only for non-production environments (e.g., development, testing) if deemed necessary, but clearly log warnings when mocks are used.
Acceptance Criteria:
Services fail to initialize and the application fails to start if required dependencies are missing in production.
Clear error messages indicate which dependency is missing during startup failure.
Mock fallbacks are only used in non-production environments, accompanied by clear log warnings.

JIRA-19 (Resilience): Ensure Route Registration Fault Isolation in RouteFactory.js

Ticket Type: Improvement
Severity: High
Component: src/core/infra/http/routes/RouteFactory.js (Requires review of this file, which wasn't provided but is referenced)
Related Resilience Ticket: RESILIENCE-2
Description: The current app.js setup catches errors during the overall mountRoutesAndFinalize process. However, RESILIENCE-2 highlights the need for fault isolation within the route registration process handled by RouteFactory. A failure in registering a single route (e.g., due to a controller error) should not prevent other routes or sections of the API from loading.
Tasks:
Review the implementation of RouteFactory.mountAll (or equivalent method).
Implement try/catch blocks or other error boundaries around the registration of each individual route or route module.
When a route registration fails, log the specific error clearly (including the route path and controller involved).
Ensure the failure of one route does not stop the registration of others.
Consider implementing fallback handlers (e.g., returning 501 Not Implemented) for routes that failed to register.
Acceptance Criteria:
An error during the initialization or registration of one controller/route does not prevent other routes from being mounted and becoming available.
Clear error logs indicate precisely which route(s) failed to register and why.
The API remains partially operational even if some non-critical routes fail to load.
Consistency & Refactoring (Medium Priority)

JIRA-3 (Consistency): Standardize Conversation Identifier Naming

Ticket Type: Improvement
Severity: Low
Component: src/application/challenge/ChallengeEvaluationService.js, src/application/challenge/ChallengeGenerationService.js (and potentially others using AI state)
Description: There's inconsistency in naming identifiers for AI conversations. Some places use threadId, while others might use stateId or conversationContext. This can lead to confusion when tracing requests or managing state.
Tasks:
Decide on a single, consistent name for conversation/state identifiers (e.g., conversationId, threadId).
Refactor all relevant services (ChallengeEvaluationService, ChallengeGenerationService, AI Adapters, etc.) and their options/parameters to use the chosen standardized name.
Update logging messages to use the consistent identifier name.
Acceptance Criteria:
A single, consistent name is used for conversation/state identifiers across all relevant components.
Code and logs are updated to reflect the standardized naming.

JIRA-5 (Consistency): Standardize User Identification in Services

Ticket Type: Improvement
Severity: Medium
Component: src/application/challenge/ChallengeGenerationService.js, potentially others.
Description: Some services (ChallengeGenerationService) use logic like user.id || user.email to identify users. This indicates potential inconsistency in how user data is passed or relied upon. Relying on email as a fallback ID can be problematic if emails change or are not unique identifiers in all contexts. The canonical User ID should be used consistently.
Tasks:
Review all Application Services and Coordinators that accept user data.
Ensure that user identification consistently relies on the primary User ID (user.id).
Refactor calling code (e.g., Controllers, other Services) to always pass the User object or at least the User ID, rather than potentially just the email.
Remove fallback logic (|| user.email) for user identification within services. If a User ID is required, the service should expect it.
Acceptance Criteria:
Application Services and Coordinators consistently use the canonical User ID for identification.
Fallback logic using email for user identification is removed from internal service logic.

JIRA-6 (Consistency): Standardize Domain Event Payload Structure

Ticket Type: Improvement
Severity: Medium
Component: src/application/events/CacheInvalidationEventHandlers.js, All Domain Event Publishers/Subscribers
Description: The CacheInvalidationEventHandlers rely on checking both event.data?.userId and event.payload?.userId. This suggests inconsistency in how domain event payloads are structured. A standardized payload structure (e.g., always using payload with defined fields) would make event handlers more robust and easier to maintain.
Tasks:
Define a standard structure for all domain event payloads (e.g., { payload: { userId: '...', entityId: '...', otherData: {} } }).
Update all domain event publishing logic (potentially within entity addDomainEvent methods or publishing functions) to adhere to this structure.
Refactor all domain event handlers (like CacheInvalidationEventHandlers and others) to expect the standardized payload structure.
Remove fallback checks for different payload property names (e.g., data vs payload).
Acceptance Criteria:
All published domain events follow a consistent payload structure.
Event handlers reliably access event data using the standardized structure.
Code related to event handling is simplified and more robust.

JIRA-10 (Consistency): Ensure Consistent Logger Injection via DI Container

Ticket Type: Improvement
Severity: Medium
Component: src/config/container/repositories.js, src/config/container/services.js, etc.
Description: The dependency injection setup in the container files shows some inconsistency in how loggers are injected. Some components receive the generic c.get('logger'), while others receive domain-specific loggers like c.get('challengeLogger') or c.get('userLogger'). Some constructors might even fall back to global loggers if injection fails. This should be standardized.
Tasks:
Review all component registrations in the src/config/container/ directory.
Establish a consistent strategy for logger injection (e.g., always inject the specific domain logger if available, otherwise inject the base logger).
Ensure all constructors explicitly require the logger dependency rather than falling back to a global instance.
Update component registrations (container.register(...)) to inject the correct logger instance using c.get(...).
Acceptance Criteria:
All repositories, services, controllers, etc., receive their logger instance via constructor injection from the DI container.
The type of logger injected (base vs. domain-specific) follows a consistent rule.
Components fail initialization if the required logger dependency cannot be resolved.

JIRA-15 (Refactor): Centralize User Creation/Update Logic in UserService

Ticket Type: Refactoring
Severity: Medium
Component: src/core/auth/controllers/AuthController.js, src/core/user/services/UserService.js
Description: The AuthController currently interacts directly with the UserRepository to create or update user records during login and signup (userRepository.save, userRepository.updateUser). This bypasses the UserService, potentially leading to duplicated logic or inconsistencies in how users are managed. User lifecycle operations should be centralized in the UserService.
Tasks:
Inject UserService into AuthController.
Refactor the login method in AuthController: Instead of calling userRepository.save or userRepository.updateUser, call appropriate UserService methods (e.g., userService.findOrCreateUserForLogin(email, supabaseId) or similar).
Refactor the signup method in AuthController: Instead of calling userRepository.save, call userService.createUserFromSignup(email, fullName, supabaseId).
Ensure UserService methods handle the creation/update logic, including setting lastLogin, roles, etc., and potentially publishing domain events.
Remove direct UserRepository usage for create/update operations from AuthController.
Acceptance Criteria:
AuthController delegates user creation and updates during login/signup to UserService.
AuthController no longer directly calls userRepository.save or userRepository.updateUser.
User creation/update logic is centralized within UserService.

JIRA-18 (Refactor): Relocate or Refactor focusAreaThreadService.js

Ticket Type: Refactoring
Severity: Medium
Component: src/core/focusArea/services/focusAreaThreadService.js
Description: The focusAreaThreadService located in the core (domain) layer interacts directly with openAIStateManager, which is an infrastructure concern (likely representing interaction with an external AI state management system or cache). Domain services should ideally not have direct dependencies on infrastructure adapters. This service likely belongs in the Application layer or should be refactored following the Ports & Adapters pattern.
Tasks:
Option 1 (Move): Move focusAreaThreadService.js to the src/application/focusArea/services/ directory. Update its imports and DI container registration accordingly.
Option 2 (Refactor): Define a port (interface) in the domain layer (e.g., FocusAreaThreadStatePort) outlining the required state management operations. Implement an adapter in the infrastructure layer (Infrastructure/AI/FocusAreaThreadStateAdapter) that uses openAIStateManager. Inject the port into the domain service (if needed) or directly into the Application Coordinator.
Choose the most appropriate approach based on complexity and dependencies. Moving it might be simpler if its logic is primarily orchestration.
Acceptance Criteria:
The responsibility of managing AI thread state for focus areas is handled outside the core domain layer (either in Application or via an Infrastructure Adapter).
Domain services in core/focusArea/services no longer have direct dependencies on openAIStateManager or similar infrastructure components.
Minor Issues & Refinements (Low Priority)

JIRA-2 (Refactor): Refactor API Tester Routes Dependency Injection

Ticket Type: Refactoring
Severity: Low
Component: src/app.js, src/core/infra/http/routes/apiTesterRoutes.js
Description: app.js adds middleware (req.container = container) to make the entire DI container available on the request object, likely for use by the API tester routes. This tightly couples the routes/controllers to the container implementation and is generally discouraged. Dependencies should be explicitly injected.
Tasks:
Identify which dependencies the API tester routes (apiTesterRoutes.js) actually need from the container.
Modify createApiTesterRoutes (or the relevant factory/setup function) to accept these dependencies explicitly as arguments.
Update the registration/calling code in app.js to resolve these dependencies from the container and pass them to the createApiTesterRoutes function.
Remove the middleware that adds req.container.
Acceptance Criteria:
API tester routes receive their dependencies explicitly via constructor or function arguments.
The middleware attaching the DI container to the req object is removed.
API tester functionality remains intact.
JIRA-4 (Refactor/Robustness): Implement Schema Validation for AI Responses

Ticket Type: Improvement
Severity: Medium
Component: src/application/challenge/ChallengeGenerationService.js, src/application/challenge/ChallengeEvaluationService.js
Description: Services interacting with the AI client currently perform basic checks (e.g., !response.data.title) on the AI's JSON response. This is brittle. Using a schema validation library (like Zod) to define the expected structure of the AI response would make parsing and validation more robust and maintainable.
Tasks:
Define Zod schemas representing the expected JSON structure returned by the AI for challenge generation and evaluation.
In ChallengeGenerationService.generateChallenge and ChallengeEvaluationService.evaluateResponses, after receiving the JSON response from aiClient.sendJsonMessage, parse and validate the response.data using the corresponding Zod schema.
Handle validation errors appropriately (e.g., log the error, throw a specific ChallengeGenerationError or ChallengeEvaluationError with validation details).
Use the validated data object for subsequent processing.
Acceptance Criteria:
AI responses in challenge generation and evaluation services are validated against predefined Zod schemas.
Invalid AI response structures are detected, logged, and result in appropriate errors.
Service logic uses the validated data structure, improving type safety and robustness.

JIRA-8 (Refactor/Clarity): Review FocusArea Retrieval/Generation Logic [COMPLETED]
Ticket Type: Refactoring
Severity: Low
Component: src/application/focusArea/FocusAreaManagementCoordinator.js
Description: The getFocusAreas method in FocusAreaManagementCoordinator has logic to first check for existing focus areas and then fall back to generating new ones via focusAreaGenerationCoordinator.regenerateFocusAreas if none exist or forceRefresh is true. This coupling and conditional logic might obscure the primary responsibility of the method (retrieval vs. generation).
Tasks:
Review the getFocusAreas logic for clarity and potential simplification.
Consider if the responsibility of "find or generate" should be more explicit, perhaps via separate methods or a clearer option flag (e.g., options.generateIfNeeded).
Evaluate the coupling between the Management and Generation coordinators within this method. Can the interaction be simplified or made more explicit?
Acceptance Criteria:
The logic for retrieving or generating focus areas in FocusAreaManagementCoordinator.getFocusAreas is clear and maintainable.
The coupling between management and generation responsibilities within this specific method is minimized or clarified.

JIRA-9 (Refactor): Clarify or Remove application/user/mappers/UserDTOMapper.js [COMPLETED]

Ticket Type: Refactoring
Severity: Low
Component: src/application/user/mappers/UserDTOMapper.js
Description: The file src/application/user/mappers/UserDTOMapper.js appears to only re-export UserDTOMapper from src/core/user/dtos/UserDTO.js. This suggests it might be redundant. If the application layer doesn't need a distinct DTO mapping for Users compared to the core definition, this file should be removed.
Tasks:
Verify if there's any specific reason for having a separate UserDTOMapper in the application layer that differs from the core one.
If no difference is needed, remove the src/application/user/mappers/UserDTOMapper.js file.
Update all imports that reference the application-level mapper to point directly to the core DTO mapper (src/core/user/dtos/UserDTO.js).
Acceptance Criteria:
Redundant DTO mapper file in the application layer is removed if unnecessary.
All relevant code imports the User DTO mapper from its canonical location (src/core/...).

JIRA-11 (Bug): Remove Duplicate Swagger Setup File

Ticket Type: Bug
Severity: Low
Component: src/config/
Description: There appear to be two files for Swagger setup: swaggerSetup.js and swaggerSetup.new.js. This duplication can lead to confusion and potential inconsistencies. The unused or outdated file should be removed.
Tasks:
Identify which Swagger setup file (swaggerSetup.js or swaggerSetup.new.js) is currently being used in app.js.
Verify that the unused file does not contain any unique, necessary logic.
Delete the unused Swagger setup file.
Acceptance Criteria:
Only one Swagger setup file exists in the src/config/ directory.
The application correctly initializes Swagger using the remaining file.

JIRA-12 (Refactor): Standardize Import Paths in DI Container Setup

Ticket Type: Refactoring
Severity: Low
Component: src/config/container.js
Description: The file src/config/container.js uses relative paths with . (e.g., .//config.js, .//container/index.js) for importing local modules. While functional, this is inconsistent with the rest of the codebase which seems to use the @/ alias for src-relative imports. Standardizing imports improves readability and maintainability.
Tasks:
Replace relative imports starting with . in src/config/container.js with the @/ alias (e.g., change .//config.js to @/config/config.js).
Verify that the application still builds and runs correctly after the changes.
Acceptance Criteria:
All imports within src/config/container.js use the standard @/ alias for src-relative paths.
The DI container initializes correctly.

JIRA-14 (Security/Refactor): Implement Data Sanitization in AI Client Logging

Ticket Type: Improvement / Security
Severity: Medium
Component: src/core/ai/adapters/OpenAIClientAdapter.js (or equivalent infrastructure adapter)
Description: The OpenAIClientAdapter includes helper methods (_sanitizeMessagesForLogging, _sanitizeResponseForLogging) intended for removing sensitive data before logging AI requests/responses. However, the current implementation notes these are placeholders passing data through as-is. Logging full AI prompts or responses could potentially expose sensitive user data or internal logic.
Tasks:
Identify potentially sensitive fields within AI request messages (e.g., user identifiers, specific content fragments) and responses.
Implement logic within _sanitizeMessagesForLogging and _sanitizeResponseForLogging to redact or mask this sensitive information effectively.
Ensure the sanitization logic does not excessively obscure useful debugging information.
Consider adding configuration options to control the level of sanitization (e.g., more aggressive in production).
Acceptance Criteria:
Logs generated by OpenAIClientAdapter do not contain sensitive user data or overly revealing internal details from AI interactions.
Sanitization logic is implemented and demonstrably removes or masks identified sensitive fields.
Debugging remains feasible with the sanitized logs.

JIRA-16 (Refactor): Remove Empty ChallengeUtilityService.js

Ticket Type: Refactoring
Severity: Low
Component: src/core/challenge/services/ChallengeUtilityService.js
Description: The file ChallengeUtilityService.js exists but appears to contain only a constructor and no actual utility methods. If this service is not being used and has no planned functionality, it should be removed to reduce clutter.
Tasks:
Verify that ChallengeUtilityService is not imported or used anywhere in the codebase.
Confirm that there are no immediate plans to add functionality to this service.
Delete the src/core/challenge/services/ChallengeUtilityService.js file.
Remove any corresponding registration from the DI container if it exists.
Acceptance Criteria:
The empty ChallengeUtilityService.js file is removed from the codebase.
The application builds and runs correctly without the file.


JIRA-7 (Performance): Review Cache Invalidation Patterns

Ticket Type: Performance / Improvement
Severity: Low
Component: src/application/events/CacheInvalidationEventHandlers.js, src/core/infra/repositories/BaseRepository.js
Description: The cache invalidation logic uses invalidatePattern extensively (e.g., invalidatePattern('challenge:byUser:${userId}:*')). Depending on the cache provider (especially Redis SCAN vs KEYS) and the number of keys, pattern-based invalidation can be inefficient or even block the cache server.
Tasks:
Analyze the most frequently used invalidatePattern calls.
Assess the performance impact of these patterns with the production cache provider (e.g., Redis). Check if SCAN is being used appropriately if applicable.
Identify patterns that might match an excessive number of keys.
Explore more targeted invalidation strategies where feasible (e.g., invalidating specific list keys instead of broad patterns, using cache tags if supported).
Optimize patterns or replace them with more specific key invalidations if performance issues are identified or likely.
Acceptance Criteria:
Cache invalidation patterns are reviewed for potential performance bottlenecks.
Inefficient patterns are optimized or replaced with more targeted invalidation methods.
Cache invalidation performance is deemed acceptable for production load.
This review prioritizes bugs, resilience, and consistency. Further reviews can delve deeper into specific domain logic, performance optimizations within services, and more nuanced architectural patterns once these foundational items are addressed.

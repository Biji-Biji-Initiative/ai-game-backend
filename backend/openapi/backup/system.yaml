health:
  get:
    summary: Health check endpoint
    description: Returns detailed health status of the API including database and OpenAI service availability
    tags: [System]
    parameters:
      - name: format
        in: query
        description: Response format (json or text) - Note: Controller currently only returns JSON
        schema:
          type: string
          enum: [json] # Changed from [json, text]
          default: json
    responses:
      '200':
        description: API is healthy
        content:
          application/json:
            schema:
              # This structure seems correct based on controller and previous curl test
              type: object
              properties:
                status:
                  type: string
                  example: success
                  enum: [success, error, healthy, unhealthy] # Allow for different overall statuses
                message:
                  type: string
                  example: Server is healthy
                timestamp:
                  type: string
                  format: date-time
                  example: "2023-04-01T10:00:00Z"
                uptime:
                  type: number
                  description: Server uptime in seconds
                  example: 3600
                dependencies:
                  type: object
                  properties:
                    database:
                      type: object
                      properties:
                        status:
                          type: string
                          enum: [healthy, unhealthy, error, unknown]
                          example: healthy
                        message:
                          type: string
                          example: Database connection successful
                        responseTime: # Added based on previous curl output
                           type: integer
                           description: Time taken for DB check in ms
                           example: 563
                    openai:
                      type: object
                      properties:
                        status:
                          type: string
                          enum: [healthy, unhealthy, error, unknown]
                          example: healthy
                        message:
                          type: string
                          example: OpenAI service is available
                        responseTime: # Added based on previous curl output
                           type: integer
                           description: Time taken for OpenAI check in ms
                           example: 949
      '503':
        description: API is unhealthy
        content:
          application/json:
            schema:
              # Define unhealthy structure similar to healthy, showing dependency status
              type: object
              properties:
                status:
                  type: string
                  example: unhealthy # Or 'error'
                message:
                  type: string
                  example: Server is unhealthy due to dependency issues
                timestamp:
                  type: string
                  format: date-time
                uptime:
                  type: number
                dependencies:
                  type: object
                  # Example: Showing one dependency failed
                  properties:
                    database:
                      type: object
                      properties:
                        status:
                          type: string
                          example: unhealthy
                        message:
                          type: string
                          example: Database connection failed
                    openai:
                      type: object
                      properties:
                        status:
                          type: string
                          example: healthy
                        message:
                          type: string
                          example: OpenAI service is available
      '500':
        description: Error during health check execution
        content:
          application/json:
            schema:
              # Fallback error structure from controller
              type: object
              properties:
                status:
                  type: string
                  example: error
                message:
                  type: string
                  example: Failed to perform health check
                error:
                  type: string
                  description: Internal error message (optional)
                timestamp:
                  type: string
                  format: date-time

logs:
  get:
    summary: Get system logs (Admin)
    description: Retrieves recent system logs from the server log files. Requires admin privileges.
    tags: [System, Admin]
    security:
      - bearerAuth: [] # Add role check
    parameters:
      - name: limit
        in: query
        description: Maximum number of log entries to return
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 500
          default: 500
      - name: level
        in: query
        description: Filter logs by level (e.g., ERROR, WARN, INFO, DEBUG)
        required: false
        schema:
          type: string
          enum: [ERROR, WARN, INFO, DEBUG]
      - name: search
        in: query
        description: Filter logs by a search term (case-insensitive)
        required: false
        schema:
          type: string
    responses:
      '200':
        description: Logs retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: success
                data:
                  type: object # Ensured nesting
                  properties:
                    logs: # Ensured key
                      type: array
                      items:
                        $ref: '../components/schemas/common/LogEntry.yaml' # Example: Reference a common LogEntry schema
                        # Or define inline:
                        # type: object
                        # properties:
                        #   level:
                        #     type: string
                        #   message:
                        #     type: string
                        #   timestamp:
                        #     type: string
                        #     format: date-time
                        #   metadata:
                        #     type: object
                        #     additionalProperties: true
                    count:
                      type: integer
                      example: 150
                      description: Number of log entries returned
                    logFile:
                      type: string
                      example: Combined PM2 logs
                      description: Source description for the logs retrieved
      '401':
        $ref: '../components/responses/common.yaml#/UnauthorizedError'
      '403':
        $ref: '../components/responses/common.yaml#/ForbiddenError'
      '500':
        $ref: '../components/responses/common.yaml#/InternalServerError' # Covers errors during log retrieval 
openapi: 3.0.0
info:
  title: AI Game Backend API
  description: API for the AI-powered cognitive training game
  version: 1.0.0
servers:
  - url: /api/v1
    description: Main API server
tags:
  - name: auth
    description: Authentication operations
  - name: challenge
    description: Challenge operations
  - name: progress
    description: User progress operations
  - name: rival
    description: AI Rival system operations
  - name: badge
    description: Achievement Badge system operations
  - name: leaderboard
    description: Challenge Leaderboard system operations
  - name: network
    description: Neural Network Progression system operations
  - name: ai
    description: AI response operations
paths:
  # Rival System Endpoints
  /rivals:
    get:
      summary: Get all rivals for a user
      tags:
        - rival
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Maximum number of rivals to return
      responses:
        '200':
          description: List of rivals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rival'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Generate a new rival
      tags:
        - rival
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RivalGenerationRequest'
      responses:
        '201':
          description: Rival created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rival'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /rivals/{rivalId}:
    get:
      summary: Get a specific rival
      tags:
        - rival
      security:
        - bearerAuth: []
      parameters:
        - name: rivalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Rival details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rival'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update a rival
      tags:
        - rival
      security:
        - bearerAuth: []
      parameters:
        - name: rivalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RivalUpdateRequest'
      responses:
        '200':
          description: Rival updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rival'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a rival
      tags:
        - rival
      security:
        - bearerAuth: []
      parameters:
        - name: rivalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Rival deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /rivals/challenge/{rivalId}:
    post:
      summary: Challenge a rival
      tags:
        - rival
      security:
        - bearerAuth: []
      parameters:
        - name: rivalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RivalChallengeRequest'
      responses:
        '200':
          description: Challenge created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RivalChallenge'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /rivals/results/{challengeId}:
    post:
      summary: Submit results for a rival challenge
      tags:
        - rival
      security:
        - bearerAuth: []
      parameters:
        - name: challengeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RivalChallengeResultRequest'
      responses:
        '200':
          description: Results submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RivalChallengeResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  
  # Badge System Endpoints
  /badges:
    get:
      summary: Get all badges for a user
      tags:
        - badge
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of badges
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /badges/categories:
    get:
      summary: Get all badge categories
      tags:
        - badge
      responses:
        '200':
          description: List of badge categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadgeCategory'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /badges/progress:
    get:
      summary: Get badge progress for a user
      tags:
        - badge
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Badge progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadgeProgress'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /badges/check:
    post:
      summary: Check for new badges
      tags:
        - badge
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BadgeCheckRequest'
      responses:
        '200':
          description: Badge check results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadgeCheckResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  
  # Leaderboard System Endpoints
  /leaderboards:
    get:
      summary: Get leaderboard data
      tags:
        - leaderboard
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [global, similar, friends, focus, challenge]
            default: global
          description: Type of leaderboard
        - name: timeframe
          in: query
          schema:
            type: string
            enum: [all_time, monthly, weekly, daily]
            default: all_time
          description: Time period for the leaderboard
        - name: focusArea
          in: query
          schema:
            type: string
          description: Focus area to filter by (for focus type)
        - name: challengeId
          in: query
          schema:
            type: string
            format: uuid
          description: Challenge to filter by (for challenge type)
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Maximum number of entries to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Number of entries to skip
      responses:
        '200':
          description: Leaderboard data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leaderboard'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /leaderboards/scores:
    post:
      summary: Submit a score to the leaderboard
      tags:
        - leaderboard
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaderboardScoreSubmission'
      responses:
        '200':
          description: Score submission result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardSubmissionResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /leaderboards/position:
    get:
      summary: Get a user's position on a leaderboard
      tags:
        - leaderboard
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [global, similar, friends, focus, challenge]
            default: global
          description: Type of leaderboard
        - name: timeframe
          in: query
          schema:
            type: string
            enum: [all_time, monthly, weekly, daily]
            default: all_time
          description: Time period for the leaderboard
        - name: challengeId
          in: query
          schema:
            type: string
            format: uuid
          description: Challenge ID (for challenge type)
        - name: focusArea
          in: query
          schema:
            type: string
          description: Focus area (for focus type)
        - name: includeNeighbors
          in: query
          schema:
            type: boolean
            default: true
          description: Include entries above and below
        - name: neighborCount
          in: query
          schema:
            type: integer
            default: 3
          description: Number of neighbors to include
      responses:
        '200':
          description: User's position on the leaderboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardPosition'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /leaderboards/insights:
    get:
      summary: Get leaderboard insights for a user
      tags:
        - leaderboard
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [global, similar, friends, focus, challenge]
            default: global
          description: Type of leaderboard
      responses:
        '200':
          description: Leaderboard insights
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardInsights'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /leaderboards/compare:
    get:
      summary: Compare user performance with average and top performers
      tags:
        - leaderboard
      security:
        - bearerAuth: []
      parameters:
        - name: challengeId
          in: query
          schema:
            type: string
            format: uuid
          description: Challenge ID to compare performance for
      responses:
        '200':
          description: Performance comparison
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceComparison'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  
  # Network Progression System Endpoints
  /networks/user:
    get:
      summary: Get a user's neural network
      tags:
        - network
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's neural network
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /networks/progress:
    post:
      summary: Update network progress based on challenge results
      tags:
        - network
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkUpdateRequest'
      responses:
        '200':
          description: Updated network
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      summary: Get network progress history
      tags:
        - network
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Maximum number of progress records to return
      responses:
        '200':
          description: Network progress history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NetworkProgress'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /networks/stats:
    get:
      summary: Get network statistics
      tags:
        - network
      security:
        - bearerAuth: []
      parameters:
        - name: includeHistory
          in: query
          schema:
            type: boolean
            default: false
          description: Whether to include historical stats
        - name: timeframe
          in: query
          schema:
            type: string
            enum: [all_time, year, month, week]
            default: all_time
          description: Time period for historical stats
      responses:
        '200':
          description: Network statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkStats'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /networks/insights:
    get:
      summary: Get insights about a user's neural network
      tags:
        - network
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Network insights
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkInsights'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /networks/growth:
    get:
      summary: Get growth recommendations for a user's network
      tags:
        - network
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Growth recommendations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrowthRecommendations'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /networks/compare/{rivalId}:
    get:
      summary: Compare networks between user and rival
      tags:
        - network
      security:
        - bearerAuth: []
      parameters:
        - name: rivalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Network comparison
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkComparison'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  
  # AI Response Endpoints
  /ai/responses:
    post:
      summary: Process a prompt and get an AI response
      tags:
        - ai
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIPromptRequest'
      responses:
        '200':
          description: AI response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /ai/threads/{threadId}/messages:
    get:
      summary: Get messages from a thread
      tags:
        - ai
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Thread messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ThreadMessage'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Add a message to a thread
      tags:
        - ai
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadMessageRequest'
      responses:
        '201':
          description: Message added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error
    
    # Rival System Schemas
    Rival:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the rival
        name:
          type: string
          description: Name of the rival
        description:
          type: string
          description: Description of the rival
        traits:
          type: array
          items:
            $ref: '#/components/schemas/RivalTrait'
          description: Traits of the rival
        strengths:
          type: array
          items:
            type: string
          description: Strengths of the rival
        weaknesses:
          type: array
          items:
            type: string
          description: Weaknesses of the rival
        overallStrength:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Overall strength of the rival (0-100)
        focusAreas:
          type: array
          items:
            type: string
          description: Focus areas the rival excels in
        personalityType:
          type: string
          description: Personality type of the rival
        backstory:
          type: string
          description: Backstory of the rival
        imageUrl:
          type: string
          format: uri
          description: URL to the rival's image
        createdAt:
          type: string
          format: date-time
          description: When the rival was created
        updatedAt:
          type: string
          format: date-time
          description: When the rival was last updated
      required:
        - id
        - name
        - traits
        - overallStrength
    
    RivalTrait:
      type: object
      properties:
        name:
          type: string
          description: Name of the trait
        value:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Value of the trait (0-100)
        category:
          type: string
          description: Category of the trait
      required:
        - name
        - value
    
    RivalGenerationRequest:
      type: object
      properties:
        basedOn:
          type: string
          enum: [user_profile, focus_area, challenge_results, custom]
          description: What to base the rival generation on
        focusArea:
          type: string
          description: Focus area to base the rival on
        challengeId:
          type: string
          format: uuid
          description: Challenge to base the rival on
        difficulty:
          type: string
          enum: [easy, medium, hard, expert]
          description: Difficulty level of the rival
        traits:
          type: array
          items:
            $ref: '#/components/schemas/RivalTrait'
          description: Custom traits for the rival
      required:
        - basedOn
    
    RivalUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the rival
        description:
          type: string
          description: Description of the rival
        traits:
          type: array
          items:
            $ref: '#/components/schemas/RivalTrait'
          description: Traits of the rival
        strengths:
          type: array
          items:
            type: string
          description: Strengths of the rival
        weaknesses:
          type: array
          items:
            type: string
          description: Weaknesses of the rival
        overallStrength:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Overall strength of the rival (0-100)
        focusAreas:
          type: array
          items:
            type: string
          description: Focus areas the rival excels in
        personalityType:
          type: string
          description: Personality type of the rival
        backstory:
          type: string
          description: Backstory of the rival
        imageUrl:
          type: string
          format: uri
          description: URL to the rival's image
    
    RivalChallengeRequest:
      type: object
      properties:
        focusArea:
          type: string
          description: Focus area for the challenge
        difficulty:
          type: string
          enum: [easy, medium, hard, expert]
          description: Difficulty level of the challenge
      required:
        - focusArea
    
    RivalChallenge:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the challenge
        userId:
          type: string
          format: uuid
          description: ID of the user
        rivalId:
          type: string
          format: uuid
          description: ID of the rival
        focusArea:
          type: string
          description: Focus area for the challenge
        difficulty:
          type: string
          enum: [easy, medium, hard, expert]
          description: Difficulty level of the challenge
        status:
          type: string
          enum: [pending, active, completed, expired]
          description: Status of the challenge
        createdAt:
          type: string
          format: date-time
          description: When the challenge was created
        expiresAt:
          type: string
          format: date-time
          description: When the challenge expires
      required:
        - id
        - userId
        - rivalId
        - focusArea
        - difficulty
        - status
        - createdAt
    
    RivalChallengeResultRequest:
      type: object
      properties:
        userScore:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: User's score in the challenge
        completionTime:
          type: number
          format: float
          description: Time taken to complete the challenge in seconds
        answers:
          type: array
          items:
            $ref: '#/components/schemas/ChallengeAnswer'
          description: User's answers to the challenge questions
      required:
        - userScore
    
    ChallengeAnswer:
      type: object
      properties:
        questionId:
          type: string
          format: uuid
          description: ID of the question
        answer:
          type: string
          description: User's answer
        correct:
          type: boolean
          description: Whether the answer is correct
        timeSpent:
          type: number
          format: float
          description: Time spent on this question in seconds
      required:
        - questionId
        - answer
    
    RivalChallengeResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the result
        challengeId:
          type: string
          format: uuid
          description: ID of the challenge
        userId:
          type: string
          format: uuid
          description: ID of the user
        rivalId:
          type: string
          format: uuid
          description: ID of the rival
        userScore:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: User's score in the challenge
        rivalScore:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Rival's score in the challenge
        winner:
          type: string
          enum: [user, rival, tie]
          description: Winner of the challenge
        completionTime:
          type: number
          format: float
          description: Time taken to complete the challenge in seconds
        createdAt:
          type: string
          format: date-time
          description: When the result was created
        feedback:
          type: string
          description: Feedback on the challenge result
      required:
        - id
        - challengeId
        - userId
        - rivalId
        - userScore
        - rivalScore
        - winner
        - createdAt
    
    # Badge System Schemas
    Badge:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the badge
        name:
          type: string
          description: Name of the badge
        description:
          type: string
          description: Description of the badge
        category:
          type: string
          description: Category of the badge
        tier:
          type: string
          enum: [bronze, silver, gold, platinum]
          description: Tier of the badge
        imageUrl:
          type: string
          format: uri
          description: URL to the badge's image
        requirements:
          type: object
          description: Requirements to earn the badge
        unlocked:
          type: boolean
          description: Whether the badge is unlocked
        unlockedAt:
          type: string
          format: date-time
          description: When the badge was unlocked
        progress:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Progress towards unlocking the badge (0-100)
      required:
        - id
        - name
        - description
        - category
        - tier
        - unlocked
    
    BadgeCategory:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the category
        name:
          type: string
          description: Name of the category
        description:
          type: string
          description: Description of the category
        iconUrl:
          type: string
          format: uri
          description: URL to the category's icon
      required:
        - id
        - name
        - description
    
    BadgeProgress:
      type: object
      properties:
        totalBadges:
          type: integer
          description: Total number of badges
        unlockedBadges:
          type: integer
          description: Number of unlocked badges
        progressByCategory:
          type: object
          additionalProperties:
            type: object
            properties:
              total:
                type: integer
                description: Total badges in this category
              unlocked:
                type: integer
                description: Unlocked badges in this category
              percentage:
                type: number
                format: float
                description: Percentage of unlocked badges in this category
            required:
              - total
              - unlocked
              - percentage
          description: Progress by category
        progressByTier:
          type: object
          additionalProperties:
            type: object
            properties:
              total:
                type: integer
                description: Total badges in this tier
              unlocked:
                type: integer
                description: Unlocked badges in this tier
              percentage:
                type: number
                format: float
                description: Percentage of unlocked badges in this tier
            required:
              - total
              - unlocked
              - percentage
          description: Progress by tier
        recentlyUnlocked:
          type: array
          items:
            $ref: '#/components/schemas/Badge'
          description: Recently unlocked badges
        nearlyComplete:
          type: array
          items:
            $ref: '#/components/schemas/Badge'
          description: Badges that are nearly complete
      required:
        - totalBadges
        - unlockedBadges
        - progressByCategory
        - progressByTier
    
    BadgeCheckRequest:
      type: object
      properties:
        eventType:
          type: string
          enum: [challenge_completed, streak_updated, focus_mastered, level_up]
          description: Type of event to check badges for
        eventData:
          type: object
          description: Data related to the event
      required:
        - eventType
        - eventData
    
    BadgeCheckResult:
      type: object
      properties:
        newBadges:
          type: array
          items:
            $ref: '#/components/schemas/Badge'
          description: Newly unlocked badges
        progressUpdates:
          type: array
          items:
            $ref: '#/components/schemas/Badge'
          description: Badges with updated progress
      required:
        - newBadges
        - progressUpdates
    
    # Leaderboard System Schemas
    Leaderboard:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the leaderboard
        title:
          type: string
          description: Title of the leaderboard
        description:
          type: string
          description: Description of the leaderboard
        entries:
          type: array
          items:
            $ref: '#/components/schemas/LeaderboardEntry'
          description: Entries on the leaderboard
        totalEntries:
          type: integer
          description: Total number of entries on the leaderboard
        lastUpdated:
          type: string
          format: date-time
          description: When the leaderboard was last updated
        type:
          type: string
          enum: [global, similar, friends, focus, challenge]
          description: Type of leaderboard
        timeframe:
          type: string
          enum: [all_time, monthly, weekly, daily]
          description: Time period for the leaderboard
        focusAreaId:
          type: string
          description: Focus area ID (for focus type)
        challengeId:
          type: string
          format: uuid
          description: Challenge ID (for challenge type)
      required:
        - id
        - title
        - entries
        - totalEntries
        - lastUpdated
        - type
        - timeframe
    
    LeaderboardEntry:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the entry
        userId:
          type: string
          format: uuid
          description: ID of the user
        username:
          type: string
          description: Username of the user
        score:
          type: number
          format: float
          description: Score of the user
        rank:
          type: integer
          description: Rank of the user on the leaderboard
        isCurrentUser:
          type: boolean
          description: Whether this entry is for the current user
        metadata:
          type: object
          description: Additional metadata for this entry
        createdAt:
          type: string
          format: date-time
          description: When the entry was created
      required:
        - id
        - userId
        - username
        - score
        - rank
    
    LeaderboardScoreSubmission:
      type: object
      properties:
        username:
          type: string
          description: Username to display on the leaderboard
        score:
          type: number
          format: float
          description: Score to submit
        challengeId:
          type: string
          format: uuid
          description: ID of the challenge (for challenge type)
        focusArea:
          type: string
          description: Focus area (for focus type)
        metadata:
          type: object
          description: Additional metadata for this submission
      required:
        - score
    
    LeaderboardSubmissionResult:
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/LeaderboardEntry'
          description: The submitted entry
        rank:
          type: integer
          description: Rank of the entry on the leaderboard
        totalEntries:
          type: integer
          description: Total number of entries on the leaderboard
        percentile:
          type: integer
          description: Percentile of the entry on the leaderboard
      required:
        - entry
        - rank
        - totalEntries
        - percentile
    
    LeaderboardPosition:
      type: object
      properties:
        rank:
          type: integer
          description: Rank of the user on the leaderboard
        score:
          type: number
          format: float
          description: Score of the user
        percentile:
          type: integer
          description: Percentile of the user on the leaderboard
        entry:
          $ref: '#/components/schemas/LeaderboardEntry'
          description: The user's entry
        neighbors:
          type: object
          properties:
            above:
              type: array
              items:
                $ref: '#/components/schemas/LeaderboardEntry'
              description: Entries above the user
            below:
              type: array
              items:
                $ref: '#/components/schemas/LeaderboardEntry'
              description: Entries below the user
          required:
            - above
            - below
          description: Neighboring entries
      required:
        - rank
        - score
        - percentile
        - entry
        - neighbors
    
    LeaderboardInsights:
      type: object
      properties:
        userRank:
          type: integer
          description: User's rank on the leaderboard
        totalUsers:
          type: integer
          description: Total number of users on the leaderboard
        percentile:
          type: integer
          description: User's percentile on the leaderboard
        topPerformers:
          type: array
          items:
            $ref: '#/components/schemas/LeaderboardEntry'
          description: Top performers on the leaderboard
        userProgress:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date-time
                description: Date of the progress point
              rank:
                type: integer
                description: Rank at this point
              score:
                type: number
                format: float
                description: Score at this point
            required:
              - date
              - rank
              - score
          description: User's progress over time
        insights:
          type: array
          items:
            type: string
          description: Insights about the user's performance
      required:
        - userRank
        - totalUsers
        - percentile
        - topPerformers
        - userProgress
        - insights
    
    PerformanceComparison:
      type: object
      properties:
        user:
          type: object
          properties:
            score:
              type: number
              format: float
              description: User's score
            completionTime:
              type: number
              format: float
              description: User's completion time in seconds
            attempts:
              type: integer
              description: Number of attempts by the user
          required:
            - score
          description: User's performance
        average:
          type: object
          properties:
            score:
              type: number
              format: float
              description: Average score
            completionTime:
              type: number
              format: float
              description: Average completion time in seconds
            totalEntries:
              type: integer
              description: Total number of entries
          required:
            - score
            - totalEntries
          description: Average performance
        top:
          type: object
          properties:
            score:
              type: number
              format: float
              description: Top score
            completionTime:
              type: number
              format: float
              description: Top completion time in seconds
            username:
              type: string
              description: Username of the top performer
          required:
            - score
          description: Top performance
        percentile:
          type: integer
          description: User's percentile
      required:
        - user
        - average
        - top
        - percentile
    
    # Network Progression System Schemas
    Network:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the network
        userId:
          type: string
          format: uuid
          description: ID of the user this network belongs to
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/NetworkNode'
          description: Cognitive ability nodes in the network
        connections:
          type: array
          items:
            $ref: '#/components/schemas/NetworkConnection'
          description: Connections between nodes
        overallLevel:
          type: integer
          minimum: 1
          maximum: 10
          description: Overall cognitive level (1-10 scale)
        lastUpdated:
          type: string
          format: date-time
          description: When the network was last updated
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - userId
        - nodes
        - overallLevel
        - lastUpdated
        - createdAt
        - updatedAt
    
    NetworkNode:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the node
        name:
          type: string
          description: Name of the cognitive ability
        description:
          type: string
          description: Description of the cognitive ability
        level:
          type: integer
          minimum: 1
          maximum: 10
          description: Current level of this ability (1-10 scale)
        domain:
          type: string
          enum: [memory, creativity, logic, pattern, speed]
          description: Type of cognitive ability
        position:
          type: object
          properties:
            x:
              type: number
              minimum: 0
              maximum: 100
              description: Horizontal position as percentage (0-100)
            y:
              type: number
              minimum: 0
              maximum: 100
              description: Vertical position as percentage (0-100)
          required:
            - x
            - y
          description: Position of the node in the visualization
        connections:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of connected nodes
        unlocked:
          type: boolean
          description: Whether this node has been unlocked
        progress:
          type: number
          minimum: 0
          maximum: 100
          description: Progress towards next level (0-100 percentage)
        metadata:
          type: object
          description: Additional metadata for this node
      required:
        - id
        - name
        - description
        - level
        - domain
        - position
        - unlocked
        - progress
    
    NetworkConnection:
      type: object
      properties:
        source:
          type: string
          format: uuid
          description: ID of the source node
        target:
          type: string
          format: uuid
          description: ID of the target node
        strength:
          type: number
          minimum: 0
          maximum: 1
          description: Strength of the connection (0-1 scale)
        active:
          type: boolean
          description: Whether this connection is active
        metadata:
          type: object
          description: Additional metadata for this connection
      required:
        - source
        - target
        - strength
        - active
    
    NetworkStats:
      type: object
      properties:
        totalNodes:
          type: integer
          minimum: 0
          description: Total number of nodes in the network
        unlockedNodes:
          type: integer
          minimum: 0
          description: Number of unlocked nodes
        averageNodeLevel:
          type: number
          minimum: 0
          maximum: 10
          description: Average level across all nodes
        dominantDomain:
          type: string
          enum: [memory, creativity, logic, pattern, speed]
          description: Cognitive domain with highest average level
        weakestDomain:
          type: string
          enum: [memory, creativity, logic, pattern, speed]
          description: Cognitive domain with lowest average level
        totalConnections:
          type: integer
          minimum: 0
          description: Total number of connections in the network
        activeConnections:
          type: integer
          minimum: 0
          description: Number of active connections
        networkDensity:
          type: number
          minimum: 0
          maximum: 1
          description: Ratio of actual to possible connections
        history:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
                description: When these stats were recorded
              stats:
                type: object
                description: Stats at this point in time
            required:
              - timestamp
              - stats
          description: Historical stats over time
      required:
        - totalNodes
        - unlockedNodes
        - averageNodeLevel
        - dominantDomain
        - weakestDomain
        - totalConnections
        - activeConnections
        - networkDensity
    
    NetworkProgress:
      type: object
      properties:
        previousLevel:
          type: integer
          minimum: 1
          maximum: 10
          description: Previous overall cognitive level
        currentLevel:
          type: integer
          minimum: 1
          maximum: 10
          description: Current overall cognitive level
        levelProgress:
          type: number
          minimum: 0
          maximum: 100
          description: Progress towards next level (0-100 percentage)
        recentlyUnlockedNodes:
          type: array
          items:
            $ref: '#/components/schemas/NetworkNode'
          description: Nodes that were recently unlocked
        recentlyActivatedConnections:
          type: array
          items:
            $ref: '#/components/schemas/NetworkConnection'
          description: Connections that were recently activated
        timestamp:
          type: string
          format: date-time
          description: When this progress was recorded
      required:
        - previousLevel
        - currentLevel
        - levelProgress
        - timestamp
    
    NetworkUpdateRequest:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: ID of the user whose network to update
        challengeResults:
          type: object
          properties:
            challengeId:
              type: string
              format: uuid
              description: ID of the completed challenge
            score:
              type: number
              minimum: 0
              maximum: 100
              description: Overall score for the challenge
            domainScores:
              type: object
              additionalProperties:
                type: number
                minimum: 0
                maximum: 100
              description: Scores for each cognitive domain
            completionTime:
              type: number
              exclusiveMinimum: 0
              description: Time taken to complete the challenge in seconds
          required:
            - challengeId
            - score
            - domainScores
            - completionTime
          description: Results from the completed challenge
      required:
        - userId
        - challengeResults
    
    NetworkInsights:
      type: object
      properties:
        network:
          $ref: '#/components/schemas/Network'
          description: The user's network
        stats:
          $ref: '#/components/schemas/NetworkStats'
          description: Network statistics
        insights:
          type: object
          properties:
            strengths:
              type: array
              items:
                type: string
              description: User's cognitive strengths
            weaknesses:
              type: array
              items:
                type: string
              description: User's cognitive weaknesses
            progress:
              type: string
              description: Description of user's progress
            recommendations:
              type: array
              items:
                type: string
              description: Recommendations for improvement
          required:
            - strengths
            - weaknesses
            - progress
            - recommendations
          description: Insights about the network
      required:
        - network
        - stats
        - insights
    
    GrowthRecommendations:
      type: object
      properties:
        network:
          $ref: '#/components/schemas/Network'
          description: The user's network
        recommendations:
          type: object
          properties:
            focusAreas:
              type: array
              items:
                type: object
                properties:
                  domain:
                    type: string
                    enum: [memory, creativity, logic, pattern, speed]
                    description: Cognitive domain
                  reason:
                    type: string
                    description: Reason for recommendation
                  suggestedChallenges:
                    type: array
                    items:
                      type: string
                      format: uuid
                    description: Suggested challenges for this domain
                required:
                  - domain
                  - reason
              description: Recommended focus areas
            nextNodes:
              type: array
              items:
                $ref: '#/components/schemas/NetworkNode'
              description: Next nodes to unlock
            potentialConnections:
              type: array
              items:
                $ref: '#/components/schemas/NetworkConnection'
              description: Potential connections to activate
            overallStrategy:
              type: string
              description: Overall growth strategy
          required:
            - focusAreas
            - nextNodes
            - overallStrategy
          description: Growth recommendations
      required:
        - network
        - recommendations
    
    NetworkComparison:
      type: object
      properties:
        userNetwork:
          $ref: '#/components/schemas/Network'
          description: The user's network
        rivalNetwork:
          $ref: '#/components/schemas/Network'
          description: The rival's network
        comparison:
          type: object
          properties:
            userStrengths:
              type: array
              items:
                type: string
              description: User's strengths compared to rival
            rivalStrengths:
              type: array
              items:
                type: string
              description: Rival's strengths compared to user
            domainComparisons:
              type: object
              additionalProperties:
                type: object
                properties:
                  userLevel:
                    type: number
                    description: User's level in this domain
                  rivalLevel:
                    type: number
                    description: Rival's level in this domain
                  difference:
                    type: number
                    description: Difference between user and rival
                required:
                  - userLevel
                  - rivalLevel
                  - difference
              description: Comparisons by domain
            overallComparison:
              type: string
              description: Overall comparison between user and rival
            suggestedFocus:
              type: string
              description: Suggested focus to beat the rival
          required:
            - userStrengths
            - rivalStrengths
            - domainComparisons
            - overallComparison
            - suggestedFocus
          description: Comparison between the networks
      required:
        - userNetwork
        - rivalNetwork
        - comparison
    
    # AI Response Schemas
    AIPromptRequest:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: ID of the user
        contextType:
          type: string
          enum: [rival, badge, leaderboard, network, challenge]
          description: Type of context for the prompt
        contextId:
          type: string
          description: ID of the context
        prompt:
          type: string
          description: Prompt to process
      required:
        - userId
        - contextType
        - prompt
    
    AIResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the response
        response:
          type: string
          description: AI-generated response
        threadId:
          type: string
          description: ID of the thread this response belongs to
        messageId:
          type: string
          description: ID of the message in the thread
        createdAt:
          type: string
          format: date-time
          description: When the response was created
      required:
        - id
        - response
        - createdAt
    
    ThreadMessage:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the message
        threadId:
          type: string
          description: ID of the thread this message belongs to
        role:
          type: string
          enum: [user, assistant, system]
          description: Role of the message sender
        content:
          type: string
          description: Content of the message
        createdAt:
          type: string
          format: date-time
          description: When the message was created
      required:
        - id
        - threadId
        - role
        - content
        - createdAt
    
    ThreadMessageRequest:
      type: object
      properties:
        role:
          type: string
          enum: [user, system]
          default: user
          description: Role of the message sender
        content:
          type: string
          description: Content of the message
      required:
        - content

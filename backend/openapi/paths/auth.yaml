login:
  post:
    summary: Login to the system
    description: Authenticates a user and returns an access token and minimal user info. Sets refresh token via httpOnly cookie.
    operationId: loginUser
    tags:
      - Auth
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
                description: User's email address
              password:
                type: string
                format: password
                description: User's password
    responses:
      '200':
        description: Login successful
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: success
                data:
                  type: object
                  properties:
                    accessToken:
                      type: string
                      description: JWT access token for authentication
                    user:
                      type: object
                      description: Basic user information returned on login
                      properties:
                        email:
                          type: string
                          format: email
                        fullName:
                          type: string
                        emailVerified:
                           type: boolean
      '400':
        $ref: '../components/responses/common.yaml#/ValidationError'
      '401':
        description: Invalid credentials
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: error
                message:
                  type: string
                  example: Invalid email or password

register:
  post:
    summary: Register a new user
    description: Creates a new user account, returns token and user info. Sets refresh token via httpOnly cookie if applicable.
    operationId: registerUser
    tags:
      - Auth
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
              - fullName
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
              fullName:
                type: string
    responses:
      '201':
        description: Registration successful (Email verification might be pending)
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: success
                data:
                  type: object
                  properties:
                    accessToken:
                      type: string
                      nullable: true
                      description: JWT access token (if session created immediately)
                    user:
                      type: object
                      description: Basic user information returned on registration
                      properties:
                        email:
                          type: string
                          format: email
                        fullName:
                          type: string
                        emailVerified:
                           type: boolean
                message:
                  type: string
                  example: 'User registered. Please check your email to verify your account.'
                  nullable: true
      '400':
        $ref: '../components/responses/common.yaml#/ValidationError'
      '409':
        description: User already exists
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: error
                message:
                  type: string
                  example: User with this email already exists

status:
  get:
    summary: Auth service status
    description: Returns the status of the authentication service
    operationId: getAuthStatus
    tags:
      - Auth
    responses:
      '200':
        description: Auth service status check
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: success
                message:
                  type: string
                  example: Auth service is running
                authenticated:
                  type: boolean
                  example: false
                  description: Indicates if the request includes valid authentication 

refresh:
  post:
    summary: Refresh authentication token
    description: Uses a refresh token (from httpOnly cookie or request body) to generate a new JWT access token.
    operationId: refreshToken
    tags:
      - Auth
    requestBody:
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              refreshToken:
                type: string
                description: Optional refresh token if not sent via httpOnly cookie
    responses:
      '200':
        description: Token refreshed successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: success
                data:
                  type: object
                  properties:
                    accessToken:
                      type: string
                      description: New JWT access token
                    refreshToken:
                      type: string
                      nullable: true
                      description: New refresh token (only if not using cookies)
                    expiresIn:
                      type: integer
                      example: 3600
                      description: Access token validity duration in seconds
                    tokenType:
                      type: string
                      example: Bearer
                      description: Type of the access token
      '401':
        description: Invalid or expired refresh token
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: error
                message:
                  type: string
                  example: Invalid or expired refresh token
                code:
                  type: string
                  example: AUTH_REFRESH_FAILED
      '403':
        description: Refresh token has been revoked or is invalid (Generic fallback)
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: error
                message:
                  type: string
                  example: Invalid or expired refresh token 
#!/usr/bin/env node

/**
 * Repository Migration Checklist Update Script
 * 
 * This script updates the repository migration checklist markdown file
 * based on the report generated by the update-repositories.js script.
 * 
 * Usage:
 *   node scripts/update-repository-checklist.js <report-file-path>
 * 
 * Example:
 *   node scripts/update-repository-checklist.js reports/repository-update-2023-10-25T12-45-30-123Z.json
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Fix __dirname in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Check if report file path is provided
if (process.argv.length < 3) {
  console.error('Error: Report file path is required');
  console.log('Usage: node scripts/update-repository-checklist.js <report-file-path>');
  process.exit(1);
}

// Get report file path from command line arguments
const reportFilePath = process.argv[2];

// Check if report file exists
if (!fs.existsSync(reportFilePath)) {
  console.error(`Error: Report file not found at ${reportFilePath}`);
  process.exit(1);
}

// Read report file
console.log(`Reading report file: ${reportFilePath}`);
const reportContent = fs.readFileSync(reportFilePath, 'utf-8');
const report = JSON.parse(reportContent);

// Validate report structure
if (!report.repositories || !Array.isArray(report.repositories)) {
  console.error('Error: Invalid report format, missing repositories array');
  process.exit(1);
}

// Define checklist file path
const checklistFilePath = path.join(process.cwd(), 'docs', 'domain-events-migration-checklist.md');

// Create checklist file if it doesn't exist
if (!fs.existsSync(checklistFilePath)) {
  console.log('Checklist file does not exist, creating it');
  
  const checklistContent = `# Domain Events Migration Checklist

This document tracks the progress of migrating repositories to use the standardized entity-based event collection pattern.

## Repository Migration Status

| Repository | Entity Events | Transaction | Save with Events | Delete with Events | Batch with Events | Tests | Status |
|------------|--------------|-------------|------------------|-------------------|------------------|-------|--------|
`;
  
  fs.writeFileSync(checklistFilePath, checklistContent, 'utf-8');
}

// Read existing checklist
console.log(`Reading checklist file: ${checklistFilePath}`);
let checklistContent = fs.readFileSync(checklistFilePath, 'utf-8');

// Parse existing repository table
const tableRegex = /\| Repository \| Entity Events \| Transaction \| Save with Events \| Delete with Events \| Batch with Events \| Tests \| Status \|\s*\|[-\s|]*\|(.*?)(?:\n\n|$)/s;
const tableMatch = checklistContent.match(tableRegex);

if (!tableMatch) {
  console.error('Error: Could not find repository table in checklist file');
  process.exit(1);
}

// Extract existing repositories and their status
const existingRows = tableMatch[1].trim().split('\n');
const existingRepositories = {};

existingRows.forEach(row => {
  const columns = row.split('|').map(col => col.trim());
  if (columns.length >= 9) {
    existingRepositories[columns[1]] = {
      entityEvents: columns[2],
      transaction: columns[3],
      saveWithEvents: columns[4],
      deleteWithEvents: columns[5],
      batchWithEvents: columns[6],
      tests: columns[7],
      status: columns[8]
    };
  }
});

// Update repositories based on the report
report.repositories.forEach(repo => {
  const name = repo.name;
  const isUpdated = repo.status === 'updated';
  
  // Create entry if it doesn't exist
  if (!existingRepositories[name]) {
    existingRepositories[name] = {
      entityEvents: '⬜️',
      transaction: '⬜️',
      saveWithEvents: '⬜️',
      deleteWithEvents: '⬜️',
      batchWithEvents: '⬜️',
      tests: '⬜️',
      status: 'Not Started'
    };
  }
  
  // Update status for updated repositories
  if (isUpdated) {
    existingRepositories[name].entityEvents = '✅';
    existingRepositories[name].transaction = '✅';
    existingRepositories[name].saveWithEvents = '✅';
    existingRepositories[name].status = '**UPDATED**';
  }
});

// Generate updated repository table
const updatedRows = Object.entries(existingRepositories).map(([name, status]) => {
  return `| ${name} | ${status.entityEvents} | ${status.transaction} | ${status.saveWithEvents} | ${status.deleteWithEvents} | ${status.batchWithEvents} | ${status.tests} | ${status.status} |`;
}).join('\n');

// Create the updated table
const updatedTable = `| Repository | Entity Events | Transaction | Save with Events | Delete with Events | Batch with Events | Tests | Status |
|------------|--------------|-------------|------------------|-------------------|------------------|-------|--------|\n${updatedRows}`;

// Replace the existing table with the updated one
checklistContent = checklistContent.replace(tableRegex, `| Repository | Entity Events | Transaction | Save with Events | Delete with Events | Batch with Events | Tests | Status |\n|------------|--------------|-------------|------------------|-------------------|------------------|-------|--------|\n${updatedRows}\n\n`);

// Add summary of the update
const summary = `
## Latest Update

**Update date:** ${new Date().toISOString().split('T')[0]}

**Report file:** ${path.basename(reportFilePath)}

**Summary:**
- Total repositories: ${report.stats.total}
- Scanned: ${report.stats.scanned}
- Updated: ${report.stats.updated}
- Skipped: ${report.stats.skipped}
- Errors: ${report.stats.errors}

**Updated repositories:**
${report.repositories.filter(repo => repo.status === 'updated').map(repo => `- ${repo.name}`).join('\n')}

`;

// Add the summary to the end of the file
checklistContent += summary;

// Write updated checklist
console.log('Writing updated checklist');
fs.writeFileSync(checklistFilePath, checklistContent, 'utf-8');

console.log('Checklist updated successfully!'); 
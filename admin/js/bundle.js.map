{
  "version": 3,
  "sources": ["modules/endpoint-manager.ts", "utils/logger.ts", "modules/backend-logs-manager.ts", "modules/status-manager.ts", "modules/variable-manager.ts", "modules/history-manager.ts", "controllers/FlowController.ts", "utils/dom-utils.ts", "components/UIManagerNew.ts", "data/bundled-endpoints.ts", "utils/storage-utils.ts", "modules/domain-state-manager.ts", "components/DomainStateViewer.ts", "utils/json-utils.ts", "utils/string-utils.ts", "components/ResponseViewer.ts", "components/VariableExtractor.ts", "components/RequestBuilder.ts", "controllers/AppController.ts", "config/config.ts", "components/LogsViewer.ts", "core/ConfigManager.ts", "core/Logger.ts", "core/DependencyContainer.ts", "core/EventBus.ts", "core/HttpClient.ts", "core/ApiClient.ts", "core/AppBootstrapper.ts", "index.ts"],
  "sourcesContent": ["/**\n * Endpoint Manager Module\n * Handles loading and managing API endpoints\n */\nimport { logger } from '../utils/logger';\nimport { EndpointManagerOptions, EndpointParameter } from '../types/modules';\n\n// Define the Endpoint interface here instead of importing it\nexport interface Endpoint {\n  id: string;\n  name: string;\n  url?: string;\n  method?: string;\n  path?: string;\n  description?: string;\n  category?: string;\n  parameters?: EndpointParameter[];\n  headers?: Record<string, string>;\n  requestBody?: any;\n  responseExample?: any;\n  requiresAuth?: boolean;\n  tags?: string[];\n  isCustom?: boolean;\n}\n\n// Extend the Endpoint interface to include isCustom property for custom endpoints\ninterface CustomEndpoint extends Endpoint {\n  isCustom: boolean;\n}\n\ninterface ApiClient {\n  fetch: (path: string, options?: RequestInit) => Promise<any>;\n}\n\ninterface EndpointData {\n  endpoints?: any[];\n  [key: string]: any;\n}\n\nexport class EndpointManager {\n    private options: EndpointManagerOptions;\n    private apiClient: ApiClient | null;\n    private config: any | null;\n    private endpoints: Endpoint[];\n    private categories: Map<string, Endpoint[]>;\n    private listeners: Map<string, Function[]>;\n    private loaded: boolean;\n    private retryCount: number;\n    private bundledEndpoints: Endpoint[] | Record<string, any> | null;\n\n    /**\n     * Creates a new EndpointManager instance\n     * @param options - Configuration options\n     */\n    constructor(options: Partial<EndpointManagerOptions> = {}) {\n        this.options = {\n            apiClient: null,\n            config: null,\n            maxRetries: 3,\n            retryDelay: 2000, // milliseconds\n            useLocalEndpoints: true, // Whether to fallback to bundled endpoints if fetch fails\n            supportMultipleFormats: true, // Whether to support multiple endpoint formats\n            endpointsFilePath: \"data/endpoints.json\", // Standardized path for endpoints\n            dynamicEndpointsPath: \"/api/v1/api-tester/endpoints\", // Dynamic endpoints from backend\n            useDynamicEndpoints: true, // Whether to use dynamic endpoints from backend\n            ...options\n        };\n        \n        this.apiClient = this.options.apiClient;\n        this.config = this.options.config;\n        this.endpoints = [];\n        this.categories = new Map();\n        this.listeners = new Map();\n        this.loaded = false;\n        this.retryCount = 0;\n        this.bundledEndpoints = null; // Will hold bundled endpoints as fallback\n    }\n    \n    /**\n     * Adds an event listener\n     * @param event - The event name\n     * @param callback - The callback function\n     */\n    addEventListener(event: string, callback: Function): void {\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, []);\n        }\n        const listeners = this.listeners.get(event);\n        if (listeners) {\n            listeners.push(callback);\n        }\n    }\n    \n    /**\n     * Removes an event listener\n     * @param event - The event name\n     * @param callback - The callback function to remove\n     */\n    removeEventListener(event: string, callback: Function): void {\n        if (this.listeners.has(event)) {\n            const listeners = this.listeners.get(event);\n            if (listeners) {\n                const index = listeners.indexOf(callback);\n                if (index !== -1) {\n                    listeners.splice(index, 1);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Emits an event to all registered listeners\n     * @param event - The event name\n     * @param data - The event data\n     */\n    emit(event: string, data: any = null): void {\n        if (this.listeners.has(event)) {\n            const listeners = this.listeners.get(event);\n            if (listeners) {\n                listeners.forEach(callback => callback(data));\n            }\n        }\n    }\n    \n    /**\n     * Sets bundled endpoints to use as fallback\n     * @param endpoints - The bundled endpoints\n     */\n    setBundledEndpoints(endpoints: Endpoint[] | Record<string, any>): void {\n        this.bundledEndpoints = endpoints;\n    }\n    \n    /**\n     * Loads endpoints from the standardized JSON file or dynamic backend endpoint\n     * @returns The loaded endpoints\n     */\n    async loadEndpoints(): Promise<Endpoint[]> {\n        // Try to load dynamic endpoints first if enabled\n        if (this.options.useDynamicEndpoints) {\n            try {\n                return await this.loadDynamicEndpoints();\n            } catch (error) {\n                console.warn(\"Failed to load dynamic endpoints:\", error);\n                console.log(\"Falling back to static endpoints\");\n                // Fall back to static endpoints if dynamic loading fails\n                return await this.loadStaticEndpoints();\n            }\n        } else {\n            // Use static endpoints directly if dynamic loading is disabled\n            return await this.loadStaticEndpoints();\n        }\n    }\n    \n    /**\n     * Loads endpoints from the backend API\n     * @returns The loaded endpoints\n     */\n    async loadDynamicEndpoints(): Promise<Endpoint[]> {\n        const dynamicEndpointsPath = this.options.dynamicEndpointsPath;\n        \n        try {\n            // Emit loading event\n            this.emit(\"endpoints:loading\", { path: dynamicEndpointsPath, type: \"dynamic\" });\n            \n            // Fetch endpoints from backend\n            if (!dynamicEndpointsPath) {\n                throw new Error(\"Dynamic endpoints path is not defined\");\n            }\n            \n            const response = await fetch(dynamicEndpointsPath);\n            \n            if (!response.ok) {\n                throw new Error(`Failed to load dynamic endpoints: ${response.status} ${response.statusText}`);\n            }\n            \n            const data = await response.json();\n            \n            // Process and store endpoints\n            this.processEndpoints(data);\n            \n            // Mark as loaded\n            this.loaded = true;\n            this.retryCount = 0;\n            \n            // Emit loaded event\n            this.emit(\"endpoints:loaded\", {\n                endpoints: this.endpoints,\n                categories: Array.from(this.categories.entries()),\n                source: \"dynamic\"\n            });\n            \n            return this.endpoints;\n        } catch (error) {\n            console.error(\"Error loading dynamic endpoints:\", error);\n            \n            // Emit error event\n            this.emit(\"endpoints:error\", {\n                error,\n                message: error instanceof Error ? error.message : String(error),\n                source: \"dynamic\"\n            });\n            \n            throw error;\n        }\n    }\n    \n    /**\n     * Loads endpoints from the static JSON file\n     * @returns The loaded endpoints\n     */\n    async loadStaticEndpoints(): Promise<Endpoint[]> {\n        const endpointsFilePath = this.options.endpointsFilePath;\n        \n        try {\n            // Emit loading event\n            this.emit(\"endpoints:loading\", { path: endpointsFilePath, type: \"static\" });\n            \n            // Fetch endpoints\n            if (!endpointsFilePath) {\n                throw new Error(\"Endpoints file path is not defined\");\n            }\n            \n            const response = await fetch(endpointsFilePath);\n            \n            if (!response.ok) {\n                throw new Error(`Failed to load static endpoints: ${response.status} ${response.statusText}`);\n            }\n            \n            const data = await response.json();\n            \n            // Process and store endpoints\n            this.processEndpoints(data);\n            \n            // Mark as loaded\n            this.loaded = true;\n            this.retryCount = 0;\n            \n            // Emit loaded event\n            this.emit(\"endpoints:loaded\", {\n                endpoints: this.endpoints,\n                categories: Array.from(this.categories.entries()),\n                source: \"static\"\n            });\n            \n            return this.endpoints;\n        } catch (error) {\n            console.error(\"Error loading static endpoints:\", error);\n            \n            // Try to retry the request\n            if (this.retryCount < (this.options.maxRetries || 0)) {\n                this.retryCount++;\n                \n                // Emit retry event\n                this.emit(\"endpoints:retry\", {\n                    error,\n                    retryCount: this.retryCount,\n                    maxRetries: this.options.maxRetries\n                });\n                \n                // Wait before retrying\n                await new Promise(resolve => setTimeout(resolve, this.options.retryDelay || 2000));\n                \n                // Retry\n                return this.loadStaticEndpoints();\n            }\n            \n            // If we've reached max retries and have bundled endpoints, use them\n            if (this.options.useLocalEndpoints && this.bundledEndpoints) {\n                console.log(\"Using bundled endpoints as fallback\");\n                \n                // Process bundled endpoints\n                this.processEndpoints(this.bundledEndpoints);\n                \n                // Mark as loaded\n                this.loaded = true;\n                \n                // Emit loaded event (but indicate it's from fallback)\n                this.emit(\"endpoints:loaded\", {\n                    endpoints: this.endpoints,\n                    categories: Array.from(this.categories.entries()),\n                    source: \"fallback\"\n                });\n                \n                return this.endpoints;\n            }\n            \n            // Emit error event\n            this.emit(\"endpoints:error\", {\n                error,\n                message: error instanceof Error ? error.message : String(error),\n                source: \"static\"\n            });\n            \n            throw error;\n        }\n    }\n    \n    /**\n     * Processes the loaded endpoints data\n     * @param data - The loaded endpoints data\n     */\n    processEndpoints(data: any): void {\n        // Reset endpoints and categories\n        this.endpoints = [];\n        this.categories.clear();\n        \n        // Support multiple endpoint formats\n        if (this.options.supportMultipleFormats) {\n            if (Array.isArray(data)) {\n                // Format 1: Plain array of endpoints\n                this.processEndpointsArray(data);\n            } else if (data && Array.isArray(data.endpoints)) {\n                // Format 2: Object with endpoints array\n                this.processEndpointsArray(data.endpoints);\n            } else if (data && typeof data === \"object\" && !Array.isArray(data)) {\n                // Format 3: Object with categories as keys and arrays as values\n                this.processEndpointsObject(data);\n            } else {\n                throw new Error(\"Invalid endpoints data format - could not detect format\");\n            }\n        } else {\n            // Strict format check\n            if (!data || !Array.isArray(data.endpoints)) {\n                throw new Error(\"Invalid endpoints data format - expected {endpoints: [...]}\");\n            }\n            \n            this.processEndpointsArray(data.endpoints);\n        }\n    }\n    \n    /**\n     * Processes an array of endpoints\n     * @param endpoints - The array of endpoints\n     */\n    processEndpointsArray(endpoints: any[]): void {\n        if (!Array.isArray(endpoints)) {\n            throw new Error(\"Expected endpoints to be an array\");\n        }\n        \n        // Process each endpoint\n        endpoints.forEach((endpoint, index) => {\n            // Validate endpoint\n            if (!endpoint || typeof endpoint !== \"object\") {\n                console.warn(\"Skipping invalid endpoint at index\", index, endpoint);\n                return;\n            }\n            \n            // Determine path and name - bare minimum required\n            const path = endpoint.path || endpoint.url || endpoint.endpoint;\n            const name = endpoint.name || endpoint.title || endpoint.label || path;\n            \n            if (!path) {\n                console.warn(\"Skipping endpoint without path:\", endpoint);\n                return;\n            }\n            \n            // Add default values if missing\n            const processedEndpoint: Endpoint = {\n                id: endpoint.id || `endpoint-${this.endpoints.length + 1}`,\n                method: endpoint.method || \"GET\",\n                path: path,\n                name: name,\n                description: endpoint.description || \"\",\n                category: endpoint.category || endpoint.group || \"Uncategorized\",\n                parameters: endpoint.parameters || endpoint.params || [],\n                headers: endpoint.headers || {},\n                requestBody: endpoint.requestBody || endpoint.body || null,\n                responseExample: endpoint.responseExample || endpoint.example || null,\n                requiresAuth: endpoint.requiresAuth || endpoint.authenticated || false,\n                tags: endpoint.tags || [],\n                url: endpoint.url || \"\",\n                isCustom: endpoint.isCustom || false\n            };\n            \n            // Add to endpoints array\n            this.endpoints.push(processedEndpoint);\n            \n            // Add to categories - ensure we have a non-null category\n            const category = processedEndpoint.category || \"Uncategorized\";\n            \n            if (!this.categories.has(category)) {\n                this.categories.set(category, []);\n            }\n            \n            const categoryEndpoints = this.categories.get(category);\n            if (categoryEndpoints) {\n                categoryEndpoints.push(processedEndpoint);\n            }\n        });\n    }\n    \n    /**\n     * Processes an object with categories\n     * @param data - The endpoints object\n     */\n    processEndpointsObject(data: EndpointData): void {\n        // Remove endpoints key which might contain an array that we already processed\n        const dataWithoutEndpoints = { ...data };\n        delete dataWithoutEndpoints.endpoints;\n        \n        // Process each category\n        Object.entries(dataWithoutEndpoints).forEach(([category, endpoints]) => {\n            if (!Array.isArray(endpoints)) {\n                console.warn(`Skipping invalid category ${category}: expected array but got`, typeof endpoints);\n                return;\n            }\n            \n            // Create category if it doesn't exist\n            if (!this.categories.has(category)) {\n                this.categories.set(category, []);\n            }\n            \n            // Process endpoints in this category\n            endpoints.forEach((endpoint, index) => {\n                // Validate endpoint\n                if (!endpoint || typeof endpoint !== \"object\") {\n                    console.warn(`Skipping invalid endpoint in category ${category} at index`, index, endpoint);\n                    return;\n                }\n                \n                // Force category to match the key\n                endpoint.category = category;\n                \n                // Determine path and name\n                const path = endpoint.path || endpoint.url || endpoint.endpoint;\n                const name = endpoint.name || endpoint.title || endpoint.label || path;\n                \n                if (!path) {\n                    console.warn(`Skipping endpoint without path in category ${category}:`, endpoint);\n                    return;\n                }\n                \n                // Add default values if missing\n                const processedEndpoint: Endpoint = {\n                    id: endpoint.id || `endpoint-${this.endpoints.length + 1}`,\n                    method: endpoint.method || \"GET\",\n                    path: path,\n                    name: name,\n                    description: endpoint.description || \"\",\n                    category: category,\n                    parameters: endpoint.parameters || endpoint.params || [],\n                    headers: endpoint.headers || {},\n                    requestBody: endpoint.requestBody || endpoint.body || null,\n                    responseExample: endpoint.responseExample || endpoint.example || null,\n                    requiresAuth: endpoint.requiresAuth || endpoint.authenticated || false,\n                    tags: endpoint.tags || [],\n                    url: endpoint.url || \"\",\n                    isCustom: endpoint.isCustom || false\n                };\n                \n                // Add to endpoints array\n                this.endpoints.push(processedEndpoint);\n                \n                // Add to category\n                const categoryEndpoints = this.categories.get(category);\n                if (categoryEndpoints) {\n                    categoryEndpoints.push(processedEndpoint);\n                }\n            });\n        });\n    }\n    \n    /**\n     * Refreshes endpoints by loading them again\n     * @returns The loaded endpoints\n     */\n    async refreshEndpoints(): Promise<Endpoint[]> {\n        // Reset retry count\n        this.retryCount = 0;\n        \n        // Emit refreshing event\n        this.emit(\"endpoints:refreshing\", null);\n        \n        // Load endpoints\n        try {\n            const endpoints = await this.loadEndpoints();\n            \n            // Emit refreshed event\n            this.emit(\"endpoints:refreshed\", {\n                endpoints: this.endpoints,\n                categories: Array.from(this.categories.entries())\n            });\n            \n            return endpoints;\n        } catch (error) {\n            // Emit error event\n            this.emit(\"endpoints:refresh-error\", {\n                error,\n                message: error instanceof Error ? error.message : String(error)\n            });\n            \n            throw error;\n        }\n    }\n    \n    /**\n     * Gets all loaded endpoints\n     * @returns The loaded endpoints\n     */\n    getEndpoints(): Endpoint[] {\n        return [...this.endpoints];\n    }\n    \n    /**\n     * Gets endpoints by category\n     * @param category - The category name\n     * @returns The endpoints in the category\n     */\n    getEndpointsByCategory(category: string): Endpoint[] {\n        const endpoints = this.categories.get(category);\n        return endpoints ? [...endpoints] : [];\n    }\n    \n    /**\n     * Gets all categories\n     * @returns The categories\n     */\n    getCategories(): string[] {\n        return Array.from(this.categories.keys());\n    }\n    \n    /**\n     * Gets an endpoint by ID\n     * @param id - The endpoint ID\n     * @returns The endpoint or null if not found\n     */\n    getEndpointById(id: string): Endpoint | null {\n        return this.endpoints.find(endpoint => endpoint.id === id) || null;\n    }\n    \n    /**\n     * Gets an endpoint by path and method\n     * @param path - The endpoint path\n     * @param method - The endpoint method\n     * @returns The endpoint or null if not found\n     */\n    getEndpointByPathAndMethod(path: string | undefined, method: string | undefined): Endpoint | null {\n        if (!path || !method) return null;\n        \n        return this.endpoints.find(\n            endpoint => endpoint.path === path && endpoint.method === method\n        ) || null;\n    }\n    \n    /**\n     * Searches for endpoints matching a query\n     * @param query - The search query\n     * @param options - Search options\n     * @returns The matching endpoints\n     */\n    searchEndpoints(query: string, options: {\n        fields?: string[];\n        caseSensitive?: boolean;\n        exactMatch?: boolean;\n    } = {}): Endpoint[] {\n        const searchOptions = {\n            fields: [\"name\", \"path\", \"description\", \"category\", \"tags\"],\n            caseSensitive: false,\n            exactMatch: false,\n            ...options\n        };\n        \n        if (!query) {\n            return this.getEndpoints();\n        }\n        \n        const normalizedQuery = searchOptions.caseSensitive \n            ? query \n            : query.toLowerCase();\n        \n        return this.endpoints.filter(endpoint => {\n            // Check each field\n            for (const field of searchOptions.fields) {\n                const value = this.getFieldValue(endpoint, field);\n                \n                // Skip if field doesn't exist\n                if (value === undefined || value === null) {\n                    continue;\n                }\n                \n                // Handle arrays (e.g. tags)\n                if (Array.isArray(value)) {\n                    for (const item of value) {\n                        const normalizedItem = searchOptions.caseSensitive \n                            ? String(item) \n                            : String(item).toLowerCase();\n                        \n                        if (searchOptions.exactMatch \n                            ? normalizedItem === normalizedQuery \n                            : normalizedItem.includes(normalizedQuery)) {\n                            return true;\n                        }\n                    }\n                } else {\n                    // Handle strings and other values\n                    const normalizedValue = searchOptions.caseSensitive \n                        ? String(value) \n                        : String(value).toLowerCase();\n                    \n                    if (searchOptions.exactMatch \n                        ? normalizedValue === normalizedQuery \n                        : normalizedValue.includes(normalizedQuery)) {\n                        return true;\n                    }\n                }\n            }\n            \n            return false;\n        });\n    }\n    \n    /**\n     * Helper method to safely get field value from an endpoint\n     */\n    private getFieldValue(endpoint: Endpoint, field: string): any {\n        return (endpoint as any)[field];\n    }\n    \n    /**\n     * Adds a custom endpoint\n     * @param endpoint - The endpoint to add\n     * @returns The added endpoint\n     */\n    addCustomEndpoint(endpoint: Partial<Endpoint>): CustomEndpoint {\n        // Validate required fields\n        if (!endpoint.name) {\n            throw new Error(\"Endpoint name is required\");\n        }\n        \n        if (!endpoint.url && !endpoint.path) {\n            throw new Error(\"Either URL or path is required for the endpoint\");\n        }\n        \n        // Create endpoint object\n        const customEndpoint: CustomEndpoint = {\n            id: endpoint.id || `custom-endpoint-${Date.now()}`,\n            method: endpoint.method || \"GET\",\n            name: endpoint.name,\n            url: endpoint.url || \"\",\n            path: endpoint.path || endpoint.url || \"\",\n            description: endpoint.description || \"\",\n            category: endpoint.category || \"Custom\",\n            parameters: endpoint.parameters || [],\n            headers: endpoint.headers || {},\n            requestBody: endpoint.requestBody || null,\n            responseExample: endpoint.responseExample || null,\n            requiresAuth: endpoint.requiresAuth || false,\n            tags: endpoint.tags || [],\n            isCustom: true\n        };\n        \n        // Add to endpoints array\n        this.endpoints.push(customEndpoint);\n        \n        // Add to categories - ensure we have a non-null category\n        const category = customEndpoint.category || \"Custom\";\n        \n        if (!this.categories.has(category)) {\n            this.categories.set(category, []);\n        }\n        \n        const categoryEndpoints = this.categories.get(category);\n        if (categoryEndpoints) {\n            categoryEndpoints.push(customEndpoint);\n        }\n        \n        // Emit endpoint added event\n        this.emit(\"endpoint:added\", customEndpoint);\n        \n        return customEndpoint;\n    }\n    \n    /**\n     * Removes a custom endpoint\n     * @param id - The endpoint ID\n     * @returns Whether the endpoint was removed\n     */\n    removeCustomEndpoint(id: string): boolean {\n        const endpoint = this.getEndpointById(id) as CustomEndpoint | null;\n        \n        if (!endpoint || !endpoint.isCustom) {\n            return false;\n        }\n        \n        // Remove from endpoints array\n        this.endpoints = this.endpoints.filter(e => e.id !== id);\n        \n        // Remove from category - ensure we have a non-null category\n        const category = endpoint.category || \"Custom\";\n        \n        if (this.categories.has(category)) {\n            const categoryEndpoints = this.categories.get(category);\n            if (categoryEndpoints) {\n                this.categories.set(\n                    category,\n                    categoryEndpoints.filter(e => e.id !== id)\n                );\n                \n                // Remove category if empty\n                if (this.categories.get(category)?.length === 0) {\n                    this.categories.delete(category);\n                }\n            }\n        }\n        \n        // Emit event\n        this.emit(\"endpoints:custom-removed\", endpoint);\n        \n        return true;\n    }\n    \n    /**\n     * Checks whether endpoints are loaded\n     * @returns Whether endpoints are loaded\n     */\n    isLoaded(): boolean {\n        return this.loaded;\n    }\n    \n    /**\n     * Gets the number of loaded endpoints\n     * @returns The number of endpoints\n     */\n    getEndpointCount(): number {\n        return this.endpoints.length;\n    }\n\n    /**\n     * Sets the dynamic endpoints path\n     * @param path - The new path for dynamic endpoints\n     */\n    setDynamicEndpointsPath(path: string): void {\n        if (!path) {\n            throw new Error(\"Dynamic endpoints path cannot be empty\");\n        }\n        \n        this.options.dynamicEndpointsPath = path;\n        this.emit(\"endpoints:config-changed\", { \n            property: \"dynamicEndpointsPath\", \n            value: path \n        });\n    }\n\n    /**\n     * Gets the current dynamic endpoints path\n     * @returns The current dynamic endpoints path\n     */\n    getDynamicEndpointsPath(): string {\n        return this.options.dynamicEndpointsPath || '';\n    }\n} ", "/**\n * Logger Utility\n * Provides consistent logging throughout the application\n */\n\n/**\n * Log level type\n */\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\n/**\n * Logger configuration interface\n */\nexport interface LoggerConfig {\n  level: LogLevel;\n  enableConsole: boolean;\n  maxEntries: number;\n  prefix: string;\n}\n\n/**\n * Log entry interface\n */\nexport interface LogEntry {\n  level: LogLevel;\n  message: string;\n  timestamp: string;\n  data?: any;\n}\n\n/**\n * Default logger configuration\n */\nconst DEFAULT_CONFIG: LoggerConfig = {\n  level: 'info',\n  enableConsole: true,\n  maxEntries: 1000,\n  prefix: '[Admin UI]'\n};\n\n/**\n * Level priority map (higher number = higher priority)\n */\nconst LOG_LEVEL_PRIORITY: Record<LogLevel, number> = {\n  debug: 0,\n  info: 1,\n  warn: 2,\n  error: 3\n};\n\n/**\n * Logger class\n */\nclass Logger {\n  private config: LoggerConfig;\n  private entries: LogEntry[] = [];\n  private listeners: Set<(entry: LogEntry) => void> = new Set();\n\n  /**\n   * Create a new Logger instance\n   * @param config Logger configuration\n   */\n  constructor(config: Partial<LoggerConfig> = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n  }\n\n  /**\n   * Log a message at debug level\n   * @param message Log message\n   * @param data Optional data to log\n   */\n  public debug(message: string, data?: any): void {\n    this.log('debug', message, data);\n  }\n\n  /**\n   * Log a message at info level\n   * @param message Log message\n   * @param data Optional data to log\n   */\n  public info(message: string, data?: any): void {\n    this.log('info', message, data);\n  }\n\n  /**\n   * Log a message at warn level\n   * @param message Log message\n   * @param data Optional data to log\n   */\n  public warn(message: string, data?: any): void {\n    this.log('warn', message, data);\n  }\n\n  /**\n   * Log a message at error level\n   * @param message Log message\n   * @param data Optional data to log\n   */\n  public error(message: string, data?: any): void {\n    this.log('error', message, data);\n  }\n\n  /**\n   * Log a message at the specified level\n   * @param level Log level\n   * @param message Log message\n   * @param data Optional data to log\n   */\n  private log(level: LogLevel, message: string, data?: any): void {\n    // Check if this level should be logged\n    if (LOG_LEVEL_PRIORITY[level] < LOG_LEVEL_PRIORITY[this.config.level]) {\n      return;\n    }\n\n    // Create log entry\n    const entry: LogEntry = {\n      level,\n      message: `${this.config.prefix} ${message}`,\n      timestamp: new Date().toISOString(),\n      data\n    };\n\n    // Add to entries\n    this.entries.push(entry);\n\n    // Trim entries if needed\n    if (this.entries.length > this.config.maxEntries) {\n      this.entries = this.entries.slice(-this.config.maxEntries);\n    }\n\n    // Console output if enabled\n    if (this.config.enableConsole) {\n      this.outputToConsole(entry);\n    }\n\n    // Notify listeners\n    this.notifyListeners(entry);\n  }\n\n  /**\n   * Output a log entry to the console\n   * @param entry Log entry to output\n   */\n  private outputToConsole(entry: LogEntry): void {\n    const timestamp = new Date(entry.timestamp).toLocaleTimeString();\n    const prefix = `[${timestamp}]${entry.message}`;\n\n    switch (entry.level) {\n      case 'debug':\n        console.debug(prefix, entry.data || '');\n        break;\n      case 'info':\n        console.info(prefix, entry.data || '');\n        break;\n      case 'warn':\n        console.warn(prefix, entry.data || '');\n        break;\n      case 'error':\n        console.error(prefix, entry.data || '');\n        break;\n    }\n  }\n\n  /**\n   * Get all log entries\n   * @returns Array of log entries\n   */\n  public getEntries(): LogEntry[] {\n    return [...this.entries];\n  }\n\n  /**\n   * Get log entries filtered by level\n   * @param level Minimum log level to include\n   * @returns Filtered log entries\n   */\n  public getEntriesByLevel(level: LogLevel): LogEntry[] {\n    const levelPriority = LOG_LEVEL_PRIORITY[level];\n    return this.entries.filter(entry => LOG_LEVEL_PRIORITY[entry.level] >= levelPriority);\n  }\n\n  /**\n   * Clear all log entries\n   */\n  public clearEntries(): void {\n    this.entries = [];\n  }\n\n  /**\n   * Update logger configuration\n   * @param config New configuration (partial)\n   */\n  public updateConfig(config: Partial<LoggerConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Add a log entry listener\n   * @param listener Function to call when a new log entry is added\n   */\n  public addListener(listener: (entry: LogEntry) => void): void {\n    this.listeners.add(listener);\n  }\n\n  /**\n   * Remove a log entry listener\n   * @param listener Listener to remove\n   */\n  public removeListener(listener: (entry: LogEntry) => void): void {\n    this.listeners.delete(listener);\n  }\n\n  /**\n   * Notify all listeners of a new log entry\n   * @param entry Log entry to notify about\n   */\n  private notifyListeners(entry: LogEntry): void {\n    this.listeners.forEach(listener => {\n      try {\n        listener(entry);\n      } catch (error) {\n        console.error('Error in log listener:', error);\n      }\n    });\n  }\n}\n\n// Export singleton logger instance\nexport const logger = new Logger();\n", "/**\n * Backend Logs Manager Module\n * Handles fetching and managing logs from the backend\n */\nimport { logger } from '../utils/logger';\n\ninterface LogEntry {\n    timestamp: string;\n    level: string;\n    message: string;\n    correlationId?: string;\n    context?: Record<string, any>;\n    [key: string]: any;\n}\n\nexport interface BackendLogsManagerOptions {\n    logsEndpoint?: string;\n    fetchInterval?: number;\n    maxLogEntries?: number;\n    apiClient?: any;\n    maxLogsToFetch?: number;\n    refreshInterval?: number | null;\n    autoRefresh?: boolean;\n}\n\ninterface LogsResponse {\n    status: string;\n    data: {\n        logs: LogEntry[];\n        logFile?: string;\n        count?: number;\n    };\n}\n\ninterface FetchLogsOptions {\n    correlationId?: string | undefined;\n    level?: string | undefined;\n    limit?: number;\n    search?: string | undefined;\n    source?: string;\n    [key: string]: any;\n}\n\ninterface FilterOptions {\n    level?: string | string[];\n    correlationId?: string;\n    search?: string;\n    startTime?: Date | string;\n    endTime?: Date | string;\n    [key: string]: any;\n}\n\n/**\n * Class for managing backend logs\n */\nexport class BackendLogsManager {\n    private options: Required<BackendLogsManagerOptions>;\n    private apiClient: any | null;\n    private logs: LogEntry[];\n    private isLoadingLogs: boolean;\n    private lastError: Error | null;\n    private eventListeners: Map<string, Function[]>;\n    private refreshIntervalId: number | null;\n    \n    /**\n     * Creates a new BackendLogsManager instance\n     * @param options - Configuration options\n     */\n    constructor(options: Partial<BackendLogsManagerOptions> = {}) {\n        this.options = {\n            apiClient: null,\n            logsEndpoint: \"/api/v1/api-tester/logs\",\n            maxLogsToFetch: 500,\n            refreshInterval: null, // If set, auto-refresh logs at this interval (ms)\n            autoRefresh: false,\n            maxLogEntries: 500,\n            fetchInterval: 0,\n            ...options\n        };\n        \n        this.apiClient = this.options.apiClient;\n        this.logs = [];\n        this.isLoadingLogs = false;\n        this.lastError = null;\n        this.eventListeners = new Map();\n        this.refreshIntervalId = null;\n        \n        // Start auto-refresh if enabled\n        if (this.options.autoRefresh && this.options.refreshInterval) {\n            this.startAutoRefresh();\n        }\n    }\n    \n    /**\n     * Adds an event listener\n     * @param event - The event name\n     * @param callback - The callback function\n     */\n    on(event: string, callback: Function): void {\n        if (!this.eventListeners.has(event)) {\n            this.eventListeners.set(event, []);\n        }\n        \n        const listeners = this.eventListeners.get(event);\n        if (listeners) {\n            listeners.push(callback);\n        }\n    }\n    \n    /**\n     * Removes an event listener\n     * @param event - The event name\n     * @param callback - The callback function to remove\n     */\n    off(event: string, callback: Function): void {\n        if (this.eventListeners.has(event)) {\n            const listeners = this.eventListeners.get(event);\n            if (listeners) {\n                const index = listeners.indexOf(callback);\n                if (index !== -1) {\n                    listeners.splice(index, 1);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Emits an event to all registered listeners\n     * @param event - The event name\n     * @param data - The event data\n     */\n    private emit(event: string, data: any = null): void {\n        if (this.eventListeners.has(event)) {\n            const listeners = this.eventListeners.get(event);\n            if (listeners) {\n                listeners.forEach(callback => {\n                    try {\n                        callback(data);\n                    } catch (error) {\n                        logger.error(`Error in backend logs event listener for ${event}:`, error);\n                    }\n                });\n            }\n        }\n    }\n    \n    /**\n     * Fetches logs from the backend\n     * @param options - Fetch options\n     * @returns The fetched logs\n     */\n    async fetchLogs(options: FetchLogsOptions = {}): Promise<LogEntry[]> {\n        const fetchOptions: FetchLogsOptions = {\n            correlationId: options.correlationId || undefined,\n            level: options.level || undefined,\n            limit: options.limit || this.options.maxLogsToFetch,\n            search: options.search || undefined,\n            ...options\n        };\n        \n        this.isLoadingLogs = true;\n        this.emit(\"logs:loading\", { options: fetchOptions });\n        \n        try {\n            // Build the URL with query parameters\n            const url = new URL(this.options.logsEndpoint, window.location.origin);\n            if (fetchOptions.correlationId) url.searchParams.append(\"correlationId\", fetchOptions.correlationId);\n            if (fetchOptions.level) url.searchParams.append(\"level\", fetchOptions.level);\n            if (fetchOptions.limit) url.searchParams.append(\"limit\", String(fetchOptions.limit));\n            if (fetchOptions.search) url.searchParams.append(\"search\", fetchOptions.search);\n            \n            // Fetch the logs\n            const response = await fetch(url.toString());\n            \n            if (!response.ok) {\n                throw new Error(`Failed to fetch logs: ${response.status} ${response.statusText}`);\n            }\n            \n            const data = await response.json() as LogsResponse;\n            \n            if (!data.status || data.status !== \"success\" || !data.data || !Array.isArray(data.data.logs)) {\n                throw new Error(\"Invalid response format\");\n            }\n            \n            // Store logs\n            this.logs = data.data.logs;\n            this.lastError = null;\n            \n            // Emit loaded event\n            this.emit(\"logs:loaded\", {\n                logs: this.logs,\n                count: this.logs.length,\n                source: options.source || \"manual\",\n                logFile: data.data.logFile\n            });\n            \n            // Also emit logsReceived for compatibility\n            this.emit(\"logsReceived\", this.logs);\n            \n            return this.logs;\n        } catch (error) {\n            this.lastError = error instanceof Error ? error : new Error(String(error));\n            \n            // Emit error event\n            this.emit(\"logs:error\", {\n                error: this.lastError,\n                message: this.lastError.message\n            });\n            \n            throw this.lastError;\n        } finally {\n            this.isLoadingLogs = false;\n        }\n    }\n    \n    /**\n     * Refreshes logs by fetching them again\n     * @param options - Refresh options\n     * @returns The refreshed logs\n     */\n    async refreshLogs(options: FetchLogsOptions = {}): Promise<LogEntry[]> {\n        // Emit refreshing event\n        this.emit(\"logs:refreshing\", options);\n        \n        try {\n            return await this.fetchLogs({\n                ...options,\n                source: \"refresh\"\n            });\n        } catch (error) {\n            // Error is already emitted in fetchLogs\n            throw error;\n        }\n    }\n    \n    /**\n     * Starts auto-refreshing logs at the specified interval\n     * @param interval - Refresh interval in ms\n     */\n    startAutoRefresh(interval?: number): void {\n        // Clear existing interval if any\n        if (this.refreshIntervalId) {\n            clearInterval(this.refreshIntervalId);\n        }\n        \n        // Set new interval\n        const refreshInterval = interval || this.options.refreshInterval;\n        if (refreshInterval) {\n            this.refreshIntervalId = window.setInterval(() => {\n                this.refreshLogs({ source: \"auto\" }).catch(error => {\n                    console.error(\"Auto-refresh logs error:\", error);\n                });\n            }, refreshInterval);\n            \n            this.emit(\"logs:autoRefreshStarted\", { interval: refreshInterval });\n        }\n    }\n    \n    /**\n     * Stops auto-refreshing logs\n     */\n    stopAutoRefresh(): void {\n        if (this.refreshIntervalId) {\n            clearInterval(this.refreshIntervalId);\n            this.refreshIntervalId = null;\n            \n            this.emit(\"logs:autoRefreshStopped\");\n        }\n    }\n    \n    /**\n     * Filters logs based on criteria\n     * @param filters - Filter criteria\n     * @returns Filtered logs\n     */\n    filterLogs(filters: FilterOptions = {}): LogEntry[] {\n        return this.logs.filter(log => {\n            // Filter by level\n            if (filters.level) {\n                if (Array.isArray(filters.level)) {\n                    if (!filters.level.includes(log.level)) {\n                        return false;\n                    }\n                } else if (log.level !== filters.level) {\n                    return false;\n                }\n            }\n            \n            // Filter by correlation ID\n            if (filters.correlationId && log.correlationId !== filters.correlationId) {\n                return false;\n            }\n            \n            // Filter by search text\n            if (filters.search) {\n                const searchText = filters.search.toLowerCase();\n                const messageMatch = log.message && log.message.toLowerCase().includes(searchText);\n                const contextMatch = log.context && JSON.stringify(log.context).toLowerCase().includes(searchText);\n                \n                if (!messageMatch && !contextMatch) {\n                    return false;\n                }\n            }\n            \n            // Filter by time range\n            if (filters.startTime) {\n                const startTime = typeof filters.startTime === 'string' \n                    ? new Date(filters.startTime) \n                    : filters.startTime;\n                \n                const logTime = new Date(log.timestamp);\n                if (logTime < startTime) {\n                    return false;\n                }\n            }\n            \n            if (filters.endTime) {\n                const endTime = typeof filters.endTime === 'string' \n                    ? new Date(filters.endTime) \n                    : filters.endTime;\n                \n                const logTime = new Date(log.timestamp);\n                if (logTime > endTime) {\n                    return false;\n                }\n            }\n            \n            return true;\n        });\n    }\n    \n    /**\n     * Gets all logs\n     * @returns All logs\n     */\n    getLogs(): LogEntry[] {\n        return [...this.logs];\n    }\n    \n    /**\n     * Checks if logs are currently being loaded\n     * @returns Whether logs are being loaded\n     */\n    getIsLoading(): boolean {\n        return this.isLoadingLogs;\n    }\n    \n    /**\n     * Gets the last error that occurred\n     * @returns The last error or null\n     */\n    getLastError(): Error | null {\n        return this.lastError;\n    }\n    \n    /**\n     * Gets logs with a specific correlation ID\n     * @param correlationId The correlation ID to filter by\n     * @returns Logs with the specified correlation ID\n     */\n    getLogsByCorrelationId(correlationId: string): LogEntry[] {\n        return this.logs.filter(log => log.correlationId === correlationId);\n    }\n    \n    /**\n     * Clears all logs\n     */\n    clearLogs(): void {\n        this.logs = [];\n        this.emit(\"logs:cleared\");\n    }\n} ", "/**\n * StatusManager Module\n * Monitors API health and connectivity status\n */\n\nimport { logger } from '../utils/logger';\n\n/**\n * Interface for StatusManager options\n */\nexport interface StatusManagerOptions {\n  statusEndpoint?: string;\n  updateInterval?: number;\n  containerId?: string;\n}\n\n/**\n * Default options\n */\nconst DEFAULT_OPTIONS: StatusManagerOptions = {\n  statusEndpoint: '/api/health',\n  updateInterval: 30000, // 30 seconds\n  containerId: 'api-status'\n};\n\n/**\n * Status information interface\n */\nexport interface StatusInfo {\n  status: 'ok' | 'degraded' | 'error' | 'unknown';\n  uptime?: number;\n  services?: Record<string, {\n    status: 'ok' | 'degraded' | 'error' | 'unknown';\n    message?: string;\n  }>;\n  message?: string;\n  timestamp: string;\n}\n\n/**\n * StatusManager class\n * Monitors API server status\n */\nexport class StatusManager {\n  private options: Required<StatusManagerOptions>;\n  private statusElement: HTMLElement | null = null;\n  private updateIntervalId: number | null = null;\n  private currentStatus: StatusInfo = {\n    status: 'unknown',\n    message: 'Initializing...',\n    timestamp: new Date().toISOString()\n  };\n\n  /**\n   * Creates a new StatusManager instance\n   * @param options Manager options\n   */\n  constructor(options: StatusManagerOptions = {}) {\n    // Apply default options\n    this.options = { ...DEFAULT_OPTIONS, ...options } as Required<StatusManagerOptions>;\n    \n    // Initialize the UI element reference\n    this.initializeUI();\n    \n    // Log initialization\n    logger.debug('StatusManager: Initialized');\n  }\n\n  /**\n   * Initialize UI elements\n   */\n  private initializeUI(): void {\n    if (this.options.containerId) {\n      this.statusElement = document.getElementById(this.options.containerId);\n    }\n  }\n  \n  /**\n   * Start monitoring API status\n   */\n  public start(): void {\n    // Check status immediately\n    this.checkStatus();\n    \n    // Set up interval for regular status checks\n    this.updateIntervalId = window.setInterval(() => {\n      this.checkStatus();\n    }, this.options.updateInterval);\n    \n    logger.info('StatusManager: Started monitoring API status');\n  }\n\n  /**\n   * Stop monitoring API status\n   */\n  public stop(): void {\n    if (this.updateIntervalId !== null) {\n      window.clearInterval(this.updateIntervalId);\n      this.updateIntervalId = null;\n      logger.info('StatusManager: Stopped monitoring API status');\n    }\n  }\n  \n  /**\n   * Check API server status\n   */\n  private async checkStatus(): Promise<void> {\n    try {\n      const response = await fetch(this.options.statusEndpoint);\n      \n      if (!response.ok) {\n        this.updateStatus({\n          status: 'error',\n          message: `API server returned status: ${response.status}`,\n          timestamp: new Date().toISOString()\n        });\n        return;\n      }\n      \n      const statusData = await response.json();\n      this.updateStatus(statusData);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error('StatusManager: Failed to check API status', errorMessage);\n      \n      this.updateStatus({\n        status: 'error',\n        message: `Connection error: ${errorMessage}`,\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n  \n  /**\n   * Update the status information and UI\n   * @param statusInfo New status information\n   */\n  private updateStatus(statusInfo: StatusInfo): void {\n    this.currentStatus = statusInfo;\n    \n    // Update the UI if status element exists\n    if (this.statusElement) {\n      // Remove existing status classes\n      this.statusElement.classList.remove('status-ok', 'status-degraded', 'status-error', 'status-unknown');\n      \n      // Add appropriate status class\n      this.statusElement.classList.add(`status-${statusInfo.status}`);\n      \n      // Update the status indicator color\n      const statusIndicator = this.statusElement.querySelector('.status-indicator');\n      if (statusIndicator) {\n        statusIndicator.className = 'status-indicator';\n        statusIndicator.classList.add(`status-${statusInfo.status}`);\n      }\n      \n      // Update status text\n      const statusTextElement = this.statusElement.querySelector('.status-text');\n      if (statusTextElement) {\n      let statusText = 'Unknown';\n      \n        switch (statusInfo.status) {\n          case 'ok':\n            statusText = 'Online';\n            break;\n          case 'degraded':\n        statusText = 'Degraded';\n            break;\n          case 'error':\n            statusText = 'Offline';\n            break;\n        }\n        \n        statusTextElement.textContent = statusText;\n      }\n    }\n    \n    // Log status changes\n    if (statusInfo.status !== 'ok') {\n      logger.warn(`StatusManager: API status - ${statusInfo.status}${statusInfo.message ? ': ' + statusInfo.message : ''}`);\n    } else {\n      logger.debug('StatusManager: API status - ok');\n    }\n  }\n  \n  /**\n   * Get the current status information\n   * @returns Current status information\n   */\n  public getStatus(): StatusInfo {\n    return { ...this.currentStatus };\n  }\n\n  /**\n   * Check if the API is currently available\n   * @returns Whether the API is available\n   */\n  public isApiAvailable(): boolean {\n    return this.currentStatus.status === 'ok' || this.currentStatus.status === 'degraded';\n  }\n} ", "/**\n * Variable Manager\n * Handles variable extraction and substitution for requests\n */\n\nimport { VariableManagerOptions } from '../types/modules';\n\n/**\n * VariableManager class\n * Manages variables that can be extracted from responses and reused in future requests\n */\nexport class VariableManager extends EventTarget {\n  private variables: Record<string, any> = {};\n  private options: VariableManagerOptions;\n  \n    /**\n   * Constructor\n   * @param options Configuration options\n     */\n  constructor(options: VariableManagerOptions = {}) {\n    super();\n        this.options = {\n            persistVariables: true,\n            storageKey: 'api_tester_variables',\n            variableSyntax: {\n                prefix: '{{',\n                suffix: '}}',\n        jsonPathIndicator: '$'\n            },\n            ...options\n        };\n        \n            this.loadVariables();\n  }\n  \n  /**\n   * Load variables from local storage if persistence is enabled\n   */\n  private loadVariables(): void {\n    if (this.options.persistVariables && this.options.storageKey) {\n      try {\n        const storedVars = localStorage.getItem(this.options.storageKey);\n        if (storedVars) {\n          this.variables = JSON.parse(storedVars);\n          console.log('Loaded variables from storage:', Object.keys(this.variables).length);\n          \n          // Dispatch variables:loaded event\n          this.dispatchEvent(new CustomEvent('variables:loaded', {\n            detail: { variables: this.variables }\n          }));\n        }\n      } catch (error) {\n        console.error('Failed to load variables from storage:', error);\n      }\n    }\n    \n    // Initialize with any initial variables provided\n    if (this.options.initialVariables) {\n      this.setVariables(this.options.initialVariables);\n        }\n    }\n    \n    /**\n   * Save variables to local storage if persistence is enabled\n   */\n  private saveVariables(): void {\n    if (this.options.persistVariables && this.options.storageKey) {\n      try {\n        localStorage.setItem(this.options.storageKey, JSON.stringify(this.variables));\n      } catch (error) {\n        console.error('Failed to save variables to storage:', error);\n            }\n        }\n    }\n    \n    /**\n   * Get a variable value by name\n   * @param name Variable name\n   * @returns Variable value or undefined if not found\n   */\n  getVariable(name: string): any {\n    return this.variables[name];\n  }\n  \n  /**\n   * Get all variables\n   * @returns Object containing all variables\n   */\n  getVariables(): Record<string, any> {\n    return { ...this.variables };\n  }\n  \n  /**\n   * Set a variable value\n   * @param name Variable name\n   * @param value Variable value\n   */\n  setVariable(name: string, value: any): void {\n    this.variables[name] = value;\n    this.saveVariables();\n    \n    // Dispatch variable:set event\n    this.dispatchEvent(new CustomEvent('variable:set', {\n      detail: { name, value }\n    }));\n  }\n  \n  /**\n   * Set multiple variables at once\n   * @param vars Object containing variable name-value pairs\n   */\n  setVariables(vars: Record<string, any>): void {\n    this.variables = {\n      ...this.variables,\n      ...vars\n    };\n            this.saveVariables();\n    \n    // Dispatch variables:updated event\n    this.dispatchEvent(new CustomEvent('variables:updated', {\n      detail: { variables: vars }\n    }));\n  }\n  \n  /**\n   * Delete a variable\n   * @param name Variable name\n   */\n  deleteVariable(name: string): void {\n    delete this.variables[name];\n    this.saveVariables();\n    \n    // Dispatch variable:deleted event\n    this.dispatchEvent(new CustomEvent('variable:deleted', {\n      detail: { name }\n    }));\n  }\n  \n  /**\n   * Clear all variables\n   */\n  clearVariables(): void {\n    this.variables = {};\n                this.saveVariables();\n    \n    // Dispatch variables:cleared event\n    this.dispatchEvent(new CustomEvent('variables:cleared'));\n  }\n  \n  /**\n   * Replace variable placeholders in a string\n   * @param text Text to process\n   * @returns Text with variables replaced\n   */\n  public replaceVariables(text: string): string {\n    if (!text) return '';\n    \n    const prefix = this.options.variablePrefix || '$';\n    const suffix = this.options.variableSuffix || '';\n    \n    // Handle different variable formats based on prefix/suffix\n    if (suffix) {\n      // If we have both prefix and suffix (e.g., {{variable}})\n      const variableRegex = new RegExp(`${prefix}(\\\\w+)${suffix}`, 'g');\n      return text.replace(variableRegex, (match, variableName) => {\n        return this.getVariableValue(variableName, match);\n      });\n    } else {\n      // If we only have prefix (e.g., $variable)\n      const variableRegex = new RegExp(`${prefix}(\\\\w+)`, 'g');\n      return text.replace(variableRegex, (match, variableName) => {\n        return this.getVariableValue(variableName, match);\n      });\n    }\n  }\n  \n  /**\n   * Get variable value, or return the original text if variable not found\n   * @param name Variable name\n   * @param originalText Original text to return if variable not found\n   * @returns Variable value or original text\n   */\n  private getVariableValue(name: string, originalText: string): string {\n    const value = this.variables[name];\n    \n    if (value === undefined) {\n      return originalText;\n    }\n    \n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    \n    return String(value);\n  }\n  \n  /**\n   * Find variables in a text string\n   * @param text Text to search\n   * @returns Array of variable names\n   */\n  public findVariables(text: string): string[] {\n    if (!text) return [];\n    \n    const prefix = this.options.variablePrefix || '$';\n    const suffix = this.options.variableSuffix || '';\n    \n    const variableNames: string[] = [];\n    \n    // Handle different variable formats based on prefix/suffix\n    if (suffix) {\n      // If we have both prefix and suffix (e.g., {{variable}})\n      const variableRegex = new RegExp(`${prefix}(\\\\w+)${suffix}`, 'g');\n      let match;\n      while ((match = variableRegex.exec(text)) !== null) {\n        variableNames.push(match[1]);\n      }\n    } else {\n      // If we only have prefix (e.g., $variable)\n      const variableRegex = new RegExp(`${prefix}(\\\\w+)`, 'g');\n        let match;\n      while ((match = variableRegex.exec(text)) !== null) {\n        variableNames.push(match[1]);\n            }\n        }\n        \n        return variableNames;\n    }\n    \n    /**\n   * Check if a string contains variable references\n   * @param text Text to check\n   * @returns True if text contains variables\n   */\n  public hasVariables(text: string): boolean {\n    if (!text) return false;\n    \n    const prefix = this.options.variablePrefix || '$';\n    const suffix = this.options.variableSuffix || '';\n    \n    // Handle different variable formats based on prefix/suffix\n    if (suffix) {\n      const variableRegex = new RegExp(`${prefix}\\\\w+${suffix}`);\n      return variableRegex.test(text);\n    } else {\n      const variableRegex = new RegExp(`${prefix}\\\\w+`);\n      return variableRegex.test(text);\n    }\n  }\n  \n  /**\n   * Extract variable names from a string\n   * @param input String containing variable references\n   * @returns Array of variable names found in the string\n   */\n  extractVariableNames(input: string): string[] {\n    if (!input || typeof input !== 'string') {\n      return [];\n    }\n    \n    const { prefix, suffix } = this.options.variableSyntax || { prefix: '{{', suffix: '}}' };\n    const variablePattern = new RegExp(`${prefix.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}(.*?)${suffix.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}`, 'g');\n    \n    const matches = input.match(variablePattern) || [];\n    return matches.map(match => {\n      return match.substring(prefix.length, match.length - suffix.length).trim();\n        });\n    }\n    \n    /**\n   * Extract variables from a response object using JSONPath expressions\n   * @param response Response object\n   * @param extractionRules Rules for extraction (variable name to path mapping)\n   * @returns Map of variable names to extracted values\n   */\n  extractVariablesFromResponse(response: any, extractionRules: Array<{ name: string, path: string, defaultValue?: any }>): Map<string, any> {\n    const extractedVars = new Map<string, any>();\n    \n    for (const rule of extractionRules) {\n      try {\n        const value = this.extractValueFromResponse(response, rule.path);\n        \n        if (value !== undefined) {\n          extractedVars.set(rule.name, value);\n          this.setVariable(rule.name, value);\n        } else if (rule.defaultValue !== undefined) {\n          extractedVars.set(rule.name, rule.defaultValue);\n          this.setVariable(rule.name, rule.defaultValue);\n        }\n      } catch (error) {\n        console.error(`Error extracting variable ${rule.name} with path ${rule.path}:`, error);\n      }\n    }\n    \n    return extractedVars;\n  }\n  \n  /**\n   * Extract variables from JSON using object paths\n   * @param data Source data object\n   * @param paths Object mapping variable names to path expressions\n   * @returns Object containing extracted variables\n   */\n  extractVariablesFromJson(data: any, paths: Record<string, string>): Record<string, any> {\n    const result: Record<string, any> = {};\n    \n    for (const [varName, path] of Object.entries(paths)) {\n      try {\n        const value = this.extractValueFromResponse(data, path);\n        if (value !== undefined) {\n          result[varName] = value;\n          this.setVariable(varName, value);\n        }\n      } catch (error) {\n        console.error(`Error extracting variable ${varName} with path ${path}:`, error);\n      }\n    }\n    \n            return result;\n        }\n        \n  /**\n   * Extract a value from a response using a JSONPath expression\n   * @param response Response object\n   * @param path JSONPath expression\n   * @returns Extracted value or undefined if not found\n   */\n  extractValueFromResponse(response: any, path: string): any {\n    if (!response || !path) return undefined;\n    \n    const jsonPathIndicator = this.options.variableSyntax?.jsonPathIndicator || '$';\n    if (!path.startsWith(jsonPathIndicator)) {\n      return undefined;\n    }\n    \n    try {\n      // Basic JSONPath implementation (only supports $ and dot notation)\n      // Remove the $ prefix\n      const normalizedPath = path.substring(jsonPathIndicator.length);\n      \n      // Handle root reference\n      if (normalizedPath === '') {\n        return response;\n      }\n      \n      // Split on dots, but handle array indexing\n      const segments = this.parsePathSegments(normalizedPath);\n      let current = response;\n      \n      for (const segment of segments) {\n        if (current === undefined || current === null) {\n          return undefined;\n        }\n        \n        // Handle array index notation: [0], [1], etc.\n        if (segment.match(/^\\[\\d+\\]$/)) {\n          const index = parseInt(segment.substring(1, segment.length - 1), 10);\n          if (Array.isArray(current) && index >= 0 && index < current.length) {\n            current = current[index];\n          } else {\n            return undefined;\n          }\n        } else {\n          current = current[segment];\n        }\n      }\n      \n      return current;\n    } catch (error) {\n      console.error(`Error extracting value with path ${path}:`, error);\n      return undefined;\n    }\n  }\n  \n  /**\n   * Parse a JSONPath string into segments, accounting for array indexing\n   * @param path JSONPath string (without the $ prefix)\n   * @returns Array of path segments\n   */\n  private parsePathSegments(path: string): string[] {\n    if (!path || path === '.') return [];\n    \n    const segments: string[] = [];\n    let currentSegment = '';\n    let inBracket = false;\n    \n    // Remove leading dot if present\n    const normalizedPath = path.startsWith('.') ? path.substring(1) : path;\n    \n    for (let i = 0; i < normalizedPath.length; i++) {\n      const char = normalizedPath[i];\n      \n      if (char === '[' && !inBracket) {\n        if (currentSegment) {\n          segments.push(currentSegment);\n          currentSegment = '';\n        }\n        currentSegment += char;\n        inBracket = true;\n      } else if (char === ']' && inBracket) {\n        currentSegment += char;\n        segments.push(currentSegment);\n        currentSegment = '';\n        inBracket = false;\n      } else if (char === '.' && !inBracket) {\n        if (currentSegment) {\n          segments.push(currentSegment);\n          currentSegment = '';\n        }\n            } else {\n        currentSegment += char;\n      }\n    }\n    \n    if (currentSegment) {\n      segments.push(currentSegment);\n    }\n    \n    return segments;\n  }\n}\n\n// Export a singleton instance creator for convenience\nexport default function createVariableManager(options?: VariableManagerOptions): VariableManager {\n  return new VariableManager(options);\n} ", "/**\n * History Manager\n * Manages request and response history\n */\n\nimport { HistoryManagerOptions } from '../types/modules';\n\nexport interface HistoryEntry {\n  id: string;\n  timestamp: number;\n  method: string;\n  path: string;\n  url: string;\n  status: number;\n  success: boolean;\n  duration: number;\n  request: {\n    headers: Record<string, string>;\n    params?: Record<string, string>;\n    body?: any;\n  };\n  response: {\n    headers: Record<string, string>;\n    data: any;\n    size: number;\n  };\n}\n\n/**\n * HistoryManager class\n * Manages request/response history for the API tester\n */\nexport class HistoryManager extends EventTarget {\n  private history: HistoryEntry[] = [];\n  private options: HistoryManagerOptions;\n  \n  /**\n   * Constructor\n   * @param options Configuration options\n   */\n  constructor(options: HistoryManagerOptions = {}) {\n    super();\n    \n        this.options = {\n            maxEntries: 50,\n      persistHistory: true,\n      storageKey: 'api_tester_history',\n      storageType: 'localStorage',\n            compressionEnabled: true,\n      compressionThreshold: 100000, // 100KB\n      storageQuotaWarningThreshold: 0.8, // 80% of available storage\n            ...options\n        };\n        \n        this.loadHistory();\n    }\n    \n    /**\n   * Load history from storage\n   */\n  private loadHistory(): void {\n    try {\n      if (this.options.storageType === 'localStorage') {\n        const storageKey = this.options.storageKey || 'api_tester_history';\n        const storedHistory = localStorage.getItem(storageKey);\n        \n        if (storedHistory) {\n          if (storedHistory.startsWith('COMPRESSED:')) {\n            // Handle decompression (placeholder)\n            this.history = JSON.parse(storedHistory.substring(11));\n          } else {\n            this.history = JSON.parse(storedHistory);\n          }\n          \n          // Fire event\n          this.dispatchEvent(new CustomEvent('history:loaded', {\n            detail: { history: this.history }\n          }));\n        }\n      } else if (this.options.storageType === 'sessionStorage') {\n        const storageKey = this.options.storageKey || 'api_tester_history';\n        const storedHistory = sessionStorage.getItem(storageKey);\n        \n        if (storedHistory) {\n          if (storedHistory.startsWith('COMPRESSED:')) {\n            // Handle decompression (placeholder)\n            this.history = JSON.parse(storedHistory.substring(11));\n          } else {\n            this.history = JSON.parse(storedHistory);\n          }\n          \n          // Fire event\n          this.dispatchEvent(new CustomEvent('history:loaded', {\n            detail: { history: this.history }\n          }));\n                }\n            }\n        } catch (error) {\n      console.error('Failed to load history:', error);\n            this.history = [];\n        }\n    }\n    \n    /**\n   * Save history to storage\n   */\n  private saveHistory(): void {\n    if (!this.options.persistHistory) return;\n    \n    try {\n      // Simple implementation without compression for now\n      const historyStr = JSON.stringify(this.history);\n      const storageKey = this.options.storageKey || 'api_tester_history';\n      \n      if (this.options.storageType === 'localStorage') {\n        localStorage.setItem(storageKey, historyStr);\n      } else if (this.options.storageType === 'sessionStorage') {\n        sessionStorage.setItem(storageKey, historyStr);\n            }\n        } catch (error) {\n      console.error('Failed to save history:', error);\n      // If storage fails, switch to memory-only\n      this.options.storageType = 'memory';\n        }\n    }\n    \n    /**\n   * Add a new entry to the history\n   * @param requestInfo Request information\n   * @param responseData Response data\n   */\n  addEntry(requestInfo: any, responseData: any): void {\n    // Create an entry with sanitized data\n    const entry: HistoryEntry = {\n      id: this.generateId(),\n      timestamp: Date.now(),\n      method: requestInfo.method || 'GET',\n      path: this.extractPathFromUrl(requestInfo.url),\n            url: requestInfo.url,\n      status: responseData.status || 0,\n      success: responseData.status >= 200 && responseData.status < 300,\n      duration: responseData.duration || 0,\n      request: {\n        headers: this.sanitizeHeaders(requestInfo.headers || {}),\n        params: requestInfo.params,\n        body: requestInfo.body\n      },\n      response: {\n        headers: this.sanitizeHeaders(responseData.headers || {}),\n        data: responseData.data,\n        size: this.calculateSize(responseData.data)\n      }\n        };\n        \n        // Add to history\n        this.history.unshift(entry);\n        \n    // Trim history if needed\n    const maxEntries = this.options.maxEntries || 50;\n    if (this.history.length > maxEntries) {\n      this.history = this.history.slice(0, maxEntries);\n        }\n        \n        // Save to storage\n        this.saveHistory();\n        \n    // Fire event\n    this.dispatchEvent(new CustomEvent('history:changed', {\n      detail: { history: this.history }\n    }));\n  }\n  \n  /**\n   * Get all history entries\n   * @returns Array of history entries\n   */\n  getHistory(): HistoryEntry[] {\n        return [...this.history];\n    }\n    \n    /**\n   * Get a history entry by ID\n   * @param id Entry ID\n   * @returns History entry or null if not found\n   */\n  getEntryById(id: string): HistoryEntry | null {\n        return this.history.find(entry => entry.id === id) || null;\n    }\n    \n    /**\n   * Delete a history entry\n   * @param id Entry ID\n   * @returns Whether the entry was deleted\n   */\n  deleteEntry(id: string): boolean {\n        const initialLength = this.history.length;\n        this.history = this.history.filter(entry => entry.id !== id);\n        \n    // Check if anything was deleted\n        if (this.history.length !== initialLength) {\n      // Save to storage\n            this.saveHistory();\n            \n      // Fire event\n      this.dispatchEvent(new CustomEvent('history:changed', {\n        detail: { history: this.history }\n      }));\n            \n            return true;\n        }\n        \n        return false;\n    }\n    \n    /**\n   * Clear all history\n     */\n  clearHistory(): void {\n        this.history = [];\n    \n    // Save to storage\n        this.saveHistory();\n        \n    // Fire events\n    this.dispatchEvent(new CustomEvent('history:cleared'));\n    this.dispatchEvent(new CustomEvent('history:changed', {\n      detail: { history: this.history }\n    }));\n  }\n  \n  /**\n   * Extract path from URL\n   * @param url URL to extract path from\n   * @returns URL path\n   */\n  private extractPathFromUrl(url: string): string {\n        try {\n            const urlObj = new URL(url);\n            return urlObj.pathname;\n        } catch (error) {\n      // If URL parsing fails, return the URL as is\n            return url;\n        }\n    }\n    \n    /**\n   * Sanitize headers\n   * @param headers Headers object\n   * @returns Sanitized headers object\n   */\n  private sanitizeHeaders(headers: Record<string, string>): Record<string, string> {\n    const sanitized: Record<string, string> = {};\n    \n    // Convert header names to lowercase\n    Object.keys(headers).forEach(key => {\n      sanitized[key.toLowerCase()] = headers[key];\n        });\n        \n        return sanitized;\n    }\n    \n    /**\n   * Generate a unique ID\n   * @returns Unique ID\n   */\n  private generateId(): string {\n    return 'h_' + Math.random().toString(36).substring(2, 9) + '_' + Date.now().toString(36);\n  }\n  \n  /**\n   * Calculate size of data in bytes\n   * @param data Data to calculate size of\n   * @returns Size in bytes\n   */\n  private calculateSize(data: any): number {\n    if (!data) return 0;\n    \n    try {\n      // Quick estimate using JSON\n      return JSON.stringify(data).length;\n        } catch (error) {\n      // If JSON fails, return 0\n      return 0;\n        }\n    }\n} ", "/**\n * Flow Controller\n * Manages API flows and request sequences\n */\n\nimport { EndpointManager } from '../modules/endpoint-manager';\nimport { VariableManager } from '../modules/variable-manager';\nimport { HistoryManager } from '../modules/history-manager';\nimport { IUIManager } from '../components/UIManagerNew';\n\nexport interface FlowStep {\n  id: string;\n  name: string;\n  description?: string;\n  endpoint?: string;\n  method?: string;\n  url?: string;\n  headers?: Record<string, string>;\n  params?: Record<string, string>;\n  body?: any;\n  skipIf?: string;\n  delay?: number;\n  extractVariables?: Array<{\n    name: string;\n    path: string;\n    description?: string;\n  }>;\n}\n\nexport interface Flow {\n  id: string;\n  name: string;\n  description?: string;\n  steps: FlowStep[];\n  createdAt: number;\n  updatedAt: number;\n  tags?: string[];\n}\n\nexport interface FlowControllerOptions {\n  endpointManager: EndpointManager;\n  uiManager: IUIManager;\n  variableManager: VariableManager;\n  historyManager: HistoryManager;\n}\n\n/**\n * FlowController class\n * Manages API flows and operations\n */\nexport class FlowController {\n  private flows: Flow[] = [];\n  private activeFlow: Flow | null = null;\n  private activeStepIndex: number = -1;\n  private isRunning: boolean = false;\n  private endpointManager: EndpointManager;\n  private uiManager: IUIManager;\n  private variableManager: VariableManager;\n  private historyManager: HistoryManager;\n  \n  /**\n   * Constructor\n   * @param options FlowController options\n   */\n  constructor(options: FlowControllerOptions) {\n    this.endpointManager = options.endpointManager;\n    this.uiManager = options.uiManager;\n    this.variableManager = options.variableManager;\n    this.historyManager = options.historyManager;\n    \n    this.loadFlows();\n  }\n  \n  /**\n   * Initialize the flow controller\n   */\n  initialize(): void {\n    this.setupEventListeners();\n    \n    // Display flows in UI\n    this.renderFlows();\n  }\n  \n  /**\n   * Load flows from storage\n   */\n  private loadFlows(): void {\n    try {\n      const savedFlows = localStorage.getItem('api_admin_flows');\n      if (savedFlows) {\n        this.flows = JSON.parse(savedFlows);\n      } else {\n        // Create default flow if none exist\n        this.createDefaultFlow();\n      }\n    } catch (error) {\n      console.error('Failed to load flows:', error);\n      this.flows = [];\n      this.createDefaultFlow();\n    }\n  }\n  \n  /**\n   * Create a default flow\n   */\n  private createDefaultFlow(): void {\n    const defaultFlow: Flow = {\n      id: this.generateId(),\n      name: 'Default Flow',\n      description: 'A default flow with basic API operations',\n      steps: [\n        {\n          id: this.generateId(),\n          name: 'Get API Status',\n          description: 'Check if the API is up and running',\n          method: 'GET',\n          url: '/api/v1/health'\n        }\n      ],\n      createdAt: Date.now(),\n      updatedAt: Date.now()\n    };\n    \n    this.flows.push(defaultFlow);\n    this.saveFlows();\n  }\n  \n  /**\n   * Save flows to storage\n   */\n  private saveFlows(): void {\n    try {\n      localStorage.setItem('api_admin_flows', JSON.stringify(this.flows));\n    } catch (error) {\n      console.error('Failed to save flows:', error);\n      this.uiManager.showError('Error', 'Failed to save flows. Local storage may be full.');\n    }\n  }\n  \n  /**\n   * Set up event listeners\n   */\n  private setupEventListeners(): void {\n    // Add any necessary event listeners here\n    document.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n      \n      // Handle flow selection\n      if (target.closest('.flow-item')) {\n        const flowItem = target.closest('.flow-item') as HTMLElement;\n        const flowId = flowItem.dataset.flowId;\n        \n        if (flowId) {\n          this.selectFlow(flowId);\n        }\n      }\n    });\n  }\n  \n  /**\n   * Select a flow\n   * @param flowId Flow ID\n   */\n  selectFlow(flowId: string): void {\n    const flow = this.flows.find(f => f.id === flowId);\n    \n    if (flow) {\n      this.activeFlow = flow;\n      this.activeStepIndex = -1;\n      \n      // Update UI\n      this.renderActiveFlow();\n    }\n  }\n  \n  /**\n   * Render flows in the UI\n   */\n  private renderFlows(): void {\n    const flowMenu = document.getElementById('flow-menu');\n    if (!flowMenu) return;\n    \n    flowMenu.innerHTML = '';\n    \n    this.flows.forEach(flow => {\n      const flowItem = document.createElement('div');\n      flowItem.className = `flow-item p-2 my-1 rounded cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 ${this.activeFlow?.id === flow.id ? 'bg-primary-100 dark:bg-primary-900' : ''}`;\n      flowItem.dataset.flowId = flow.id;\n      \n      const flowName = document.createElement('div');\n      flowName.className = 'font-medium';\n      flowName.textContent = flow.name;\n      \n      const flowDesc = document.createElement('div');\n      flowDesc.className = 'text-xs text-gray-500 dark:text-gray-400';\n      flowDesc.textContent = flow.description || '';\n      \n      flowItem.appendChild(flowName);\n      flowItem.appendChild(flowDesc);\n      \n      flowMenu.appendChild(flowItem);\n    });\n    \n    // Add \"New Flow\" button\n    const newFlowButton = document.createElement('button');\n    newFlowButton.className = 'btn btn-sm btn-secondary w-full mt-2';\n    newFlowButton.textContent = '+ New Flow';\n    newFlowButton.addEventListener('click', () => this.createFlow());\n    \n    flowMenu.appendChild(newFlowButton);\n  }\n  \n  /**\n   * Render the active flow\n   */\n  private renderActiveFlow(): void {\n    if (!this.activeFlow) return;\n    \n    const flowContainer = document.getElementById('flow-details');\n    if (!flowContainer) return;\n    \n    // Clear flow container\n    flowContainer.innerHTML = '';\n    \n    // Create header\n    const header = document.createElement('div');\n    header.className = 'flex justify-between items-center mb-4';\n    \n    const title = document.createElement('h2');\n    title.className = 'text-xl font-bold';\n    title.textContent = this.activeFlow.name;\n    \n    const actions = document.createElement('div');\n    actions.className = 'flex gap-2';\n    \n    const runButton = document.createElement('button');\n    runButton.className = 'btn btn-sm btn-primary';\n    runButton.textContent = 'Run Flow';\n    runButton.addEventListener('click', () => this.runActiveFlow());\n    \n    const editButton = document.createElement('button');\n    editButton.className = 'btn btn-sm btn-secondary';\n    editButton.textContent = 'Edit Flow';\n    editButton.addEventListener('click', () => this.editActiveFlow());\n    \n    actions.appendChild(runButton);\n    actions.appendChild(editButton);\n    \n    header.appendChild(title);\n    header.appendChild(actions);\n    \n    // Create description\n    const description = document.createElement('p');\n    description.className = 'text-gray-600 dark:text-gray-400 mb-4';\n    description.textContent = this.activeFlow.description || 'No description provided';\n    \n    // Create steps container\n    const stepsContainer = document.createElement('div');\n    stepsContainer.className = 'mt-6';\n    \n    const stepsTitle = document.createElement('h3');\n    stepsTitle.className = 'text-lg font-semibold mb-2';\n    stepsTitle.textContent = 'Steps';\n    \n    stepsContainer.appendChild(stepsTitle);\n    \n    // Create steps list\n    const stepsList = document.createElement('div');\n    stepsList.className = 'space-y-3';\n    \n    if (this.activeFlow.steps.length === 0) {\n      const emptySteps = document.createElement('div');\n      emptySteps.className = 'text-gray-500 dark:text-gray-400 text-center p-4 border border-dashed rounded';\n      emptySteps.textContent = 'No steps defined. Add a step to get started.';\n      stepsList.appendChild(emptySteps);\n    } else {\n      // Render each step\n      this.activeFlow.steps.forEach((step, index) => {\n        const stepItem = document.createElement('div');\n        stepItem.className = 'card';\n        stepItem.dataset.stepId = step.id;\n        \n        const stepHeader = document.createElement('div');\n        stepHeader.className = 'flex justify-between items-center';\n        \n        const stepTitle = document.createElement('div');\n        stepTitle.className = 'font-medium';\n        stepTitle.textContent = `${index + 1}. ${step.name}`;\n        \n        const stepActions = document.createElement('div');\n        stepActions.className = 'flex gap-1';\n        \n        const editStepBtn = document.createElement('button');\n        editStepBtn.className = 'text-xs px-2 py-1 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300';\n        editStepBtn.textContent = 'Edit';\n        editStepBtn.addEventListener('click', (e) => {\n          e.stopPropagation();\n          this.editStep(step.id);\n        });\n        \n        const deleteStepBtn = document.createElement('button');\n        deleteStepBtn.className = 'text-xs px-2 py-1 text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300';\n        deleteStepBtn.textContent = 'Delete';\n        deleteStepBtn.addEventListener('click', (e) => {\n          e.stopPropagation();\n          this.deleteStep(step.id);\n        });\n        \n        stepActions.appendChild(editStepBtn);\n        stepActions.appendChild(deleteStepBtn);\n        \n        stepHeader.appendChild(stepTitle);\n        stepHeader.appendChild(stepActions);\n        \n        // Step details\n        const stepDetails = document.createElement('div');\n        stepDetails.className = 'mt-2 text-sm';\n        \n        if (step.description) {\n          const stepDesc = document.createElement('div');\n          stepDesc.className = 'text-gray-600 dark:text-gray-400 mb-2';\n          stepDesc.textContent = step.description;\n          stepDetails.appendChild(stepDesc);\n        }\n        \n        // Display method and URL\n        const methodUrl = document.createElement('div');\n        methodUrl.className = 'font-mono text-xs bg-gray-100 dark:bg-gray-800 p-1 rounded';\n        \n        if (step.method && (step.url || step.endpoint)) {\n          methodUrl.textContent = `${step.method} ${step.url || `[Endpoint: ${step.endpoint}]`}`;\n        } else {\n          methodUrl.textContent = 'No method or URL defined';\n        }\n        \n        stepDetails.appendChild(methodUrl);\n        \n        // Add to step item\n        stepItem.appendChild(stepHeader);\n        stepItem.appendChild(stepDetails);\n        stepsList.appendChild(stepItem);\n      });\n    }\n    \n    stepsContainer.appendChild(stepsList);\n    \n    // Add new step button\n    const addStepBtn = document.createElement('button');\n    addStepBtn.className = 'btn btn-sm btn-outline mt-4 w-full';\n    addStepBtn.textContent = '+ Add Step';\n    addStepBtn.addEventListener('click', () => this.showAddStepModal());\n    \n    stepsContainer.appendChild(addStepBtn);\n    \n    // Append all elements to container\n    flowContainer.appendChild(header);\n    flowContainer.appendChild(description);\n    flowContainer.appendChild(stepsContainer);\n  }\n  \n  /**\n   * Show modal to add a new step\n   */\n  private showAddStepModal(): void {\n    // Implementation will depend on UI system\n    // For now, just create a basic step\n    this.addStep({\n      name: 'New Step',\n      method: 'GET',\n      url: '/api/v1/example'\n    });\n  }\n  \n  /**\n   * Edit the active flow\n   */\n  private editActiveFlow(): void {\n    if (!this.activeFlow) return;\n    \n    // Implementation depends on UI system\n    console.log('Edit flow:', this.activeFlow);\n    \n    // Basic prompt-based editing for now\n    const newName = prompt('Flow name:', this.activeFlow.name);\n    if (newName) {\n      this.activeFlow.name = newName;\n      \n      const newDescription = prompt('Flow description:', this.activeFlow.description || '');\n      this.activeFlow.description = newDescription || '';\n      \n      this.activeFlow.updatedAt = Date.now();\n      this.saveFlows();\n      this.renderFlows();\n      this.renderActiveFlow();\n    }\n  }\n  \n  /**\n   * Edit a step\n   * @param stepId Step ID\n   */\n  private editStep(stepId: string): void {\n    if (!this.activeFlow) return;\n    \n    const step = this.activeFlow.steps.find(s => s.id === stepId);\n    if (!step) return;\n    \n    // Basic prompt-based editing for now\n    const newName = prompt('Step name:', step.name);\n    if (newName) {\n      step.name = newName;\n      \n      const newDescription = prompt('Step description:', step.description || '');\n      step.description = newDescription || '';\n      \n      const newMethod = prompt('HTTP Method (GET, POST, PUT, DELETE):', step.method || 'GET');\n      step.method = newMethod || 'GET';\n      \n      const newUrl = prompt('URL or path:', step.url || '');\n      step.url = newUrl || '';\n      \n      this.activeFlow.updatedAt = Date.now();\n      this.saveFlows();\n      this.renderActiveFlow();\n    }\n  }\n  \n  /**\n   * Create a new flow\n   */\n  createFlow(): void {\n    const newFlow: Flow = {\n      id: this.generateId(),\n      name: 'New Flow',\n      description: 'A new API flow',\n      steps: [],\n      createdAt: Date.now(),\n      updatedAt: Date.now()\n    };\n    \n    this.flows.push(newFlow);\n    this.saveFlows();\n    this.renderFlows();\n  }\n  \n  /**\n   * Delete a flow\n   * @param flowId Flow ID\n   */\n  deleteFlow(flowId: string): void {\n    const index = this.flows.findIndex(f => f.id === flowId);\n    \n    if (index !== -1) {\n      this.flows.splice(index, 1);\n      this.saveFlows();\n      \n      if (this.activeFlow?.id === flowId) {\n        this.activeFlow = this.flows.length > 0 ? this.flows[0] : null;\n        this.activeStepIndex = -1;\n      }\n      \n      this.renderFlows();\n    }\n  }\n  \n  /**\n   * Add a step to the active flow\n   * @param step Flow step\n   */\n  addStep(step: Partial<FlowStep>): void {\n    if (!this.activeFlow) return;\n    \n    const newStep: FlowStep = {\n      id: this.generateId(),\n      name: step.name || 'New Step',\n      ...step\n    };\n    \n    this.activeFlow.steps.push(newStep);\n    this.activeFlow.updatedAt = Date.now();\n    \n    this.saveFlows();\n    this.renderActiveFlow();\n  }\n  \n  /**\n   * Update a step in the active flow\n   * @param stepId Step ID\n   * @param updates Step updates\n   */\n  updateStep(stepId: string, updates: Partial<FlowStep>): void {\n    if (!this.activeFlow) return;\n    \n    const stepIndex = this.activeFlow.steps.findIndex(s => s.id === stepId);\n    \n    if (stepIndex !== -1) {\n      this.activeFlow.steps[stepIndex] = {\n        ...this.activeFlow.steps[stepIndex],\n        ...updates\n      };\n      \n      this.activeFlow.updatedAt = Date.now();\n      this.saveFlows();\n      this.renderActiveFlow();\n    }\n  }\n  \n  /**\n   * Delete a step from the active flow\n   * @param stepId Step ID\n   */\n  deleteStep(stepId: string): void {\n    if (!this.activeFlow) return;\n    \n    const stepIndex = this.activeFlow.steps.findIndex(s => s.id === stepId);\n    \n    if (stepIndex !== -1) {\n      this.activeFlow.steps.splice(stepIndex, 1);\n      this.activeFlow.updatedAt = Date.now();\n      \n      this.saveFlows();\n      this.renderActiveFlow();\n    }\n  }\n  \n  /**\n   * Run the active flow\n   */\n  async runActiveFlow(): Promise<void> {\n    if (!this.activeFlow || this.isRunning) return;\n    \n    this.isRunning = true;\n    this.activeStepIndex = -1;\n    \n    try {\n      // Run each step in sequence\n      for (let i = 0; i < this.activeFlow.steps.length; i++) {\n        this.activeStepIndex = i;\n        \n        // Update UI to show current step\n        this.renderActiveFlow();\n        \n        const step = this.activeFlow.steps[i];\n        \n        // Check if we should skip this step\n        if (step.skipIf && this.evaluateSkipCondition(step.skipIf)) {\n          console.log(`Skipping step: ${step.name}`);\n          continue;\n        }\n        \n        // Execute step\n        const result = await this.executeStep(step);\n        \n        // Process step result (extract variables, etc.)\n        this.processStepResult(step, result);\n        \n        // Add delay if specified\n        if (step.delay && step.delay > 0) {\n          await new Promise(resolve => setTimeout(resolve, step.delay));\n        }\n      }\n      \n      this.activeStepIndex = -1;\n      this.uiManager.showSuccess('Success', 'Flow executed successfully');\n    } catch (error) {\n      console.error('Flow execution failed:', error);\n      this.uiManager.showError('Error', `Flow execution failed: ${error instanceof Error ? error.message : String(error)}`);\n    } finally {\n      this.isRunning = false;\n      this.renderActiveFlow();\n    }\n  }\n  \n  /**\n   * Execute a flow step\n   * @param step Flow step\n   * @returns Step result\n   */\n  private async executeStep(step: FlowStep): Promise<any> {\n    // Get the API endpoint for this step\n    let url = step.url || '';\n    \n    // Replace variables in the URL\n    url = this.variableManager.replaceVariables(url);\n    \n    // Prepare headers with variable substitution\n    const headers: Record<string, string> = {};\n    if (step.headers) {\n      Object.entries(step.headers).forEach(([key, value]) => {\n        headers[key] = this.variableManager.replaceVariables(value);\n      });\n    }\n    \n    // Prepare params with variable substitution\n    const params: Record<string, string> = {};\n    if (step.params) {\n      Object.entries(step.params).forEach(([key, value]) => {\n        params[key] = this.variableManager.replaceVariables(value);\n      });\n    }\n    \n    // Prepare body with variable substitution\n    let body = step.body;\n    if (body && typeof body === 'object') {\n      body = JSON.parse(this.variableManager.replaceVariables(JSON.stringify(body)));\n    }\n    \n    // Create request object\n    const request = {\n      method: step.method || 'GET',\n      url,\n      headers,\n      params,\n      body\n    };\n    \n    try {\n      // Show loading indicator\n      this.uiManager.showLoading();\n      \n      const startTime = Date.now();\n      \n      // Execute request\n      const response = await fetch(url, {\n        method: request.method,\n        headers: request.headers,\n        body: request.body ? JSON.stringify(request.body) : undefined\n      });\n      \n      const endTime = Date.now();\n      const responseTime = endTime - startTime;\n      \n      // Parse response\n      const contentType = response.headers.get('content-type');\n      let data;\n      \n      if (contentType && contentType.includes('application/json')) {\n        data = await response.json();\n      } else {\n        data = await response.text();\n      }\n      \n      // Create response object\n      const responseData = {\n        status: response.status,\n        statusText: response.statusText,\n        headers: Object.fromEntries(response.headers.entries()),\n        data,\n        duration: responseTime\n      };\n      \n      // Add to history\n      this.historyManager.addEntry(request, responseData);\n      \n      return responseData;\n    } finally {\n      // Hide loading indicator\n      this.uiManager.hideLoading();\n    }\n  }\n  \n  /**\n   * Process the result of a step execution\n   * @param step Flow step\n   * @param result Step result\n   */\n  private processStepResult(step: FlowStep, result: any): void {\n    // Extract variables if specified\n    if (step.extractVariables && Array.isArray(step.extractVariables)) {\n      step.extractVariables.forEach(variable => {\n        // Extract variable using JSONPath or similar\n        // Here we're using a simple version that only supports dot notation\n        const value = this.extractValueByPath(result.data, variable.path);\n        \n        if (value !== undefined) {\n          this.variableManager.setVariable(variable.name, value);\n        }\n      });\n    }\n  }\n  \n  /**\n   * Extract a value by dot path from an object\n   * @param obj Object to extract from\n   * @param path Dot notation path (e.g., 'data.user.id')\n   * @returns Extracted value or undefined\n   */\n  private extractValueByPath(obj: any, path: string): any {\n    try {\n      return path.split('.').reduce((o, p) => o?.[p], obj);\n    } catch (error) {\n      console.error(`Failed to extract value by path: ${path}`, error);\n      return undefined;\n    }\n  }\n  \n  /**\n   * Evaluate a skip condition expression\n   * @param expression Skip condition expression\n   * @returns Whether to skip the step\n   */\n  private evaluateSkipCondition(expression: string): boolean {\n    try {\n      // Replace variables in the expression\n      const processedExpression = this.variableManager.replaceVariables(expression);\n      \n      // Simple evaluation (warning: use proper validation in production)\n      // This is just a basic example and isn't secure for real-world use\n      return !!eval(processedExpression);\n    } catch (error) {\n      console.error('Failed to evaluate skip condition:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Generate a unique ID\n   * @returns Unique ID\n   */\n  private generateId(): string {\n    return 'f_' + Math.random().toString(36).substring(2, 9) + '_' + Date.now().toString(36);\n  }\n  \n  /**\n   * Initialize flows from endpoints\n   * @param endpoints API endpoints\n   */\n  initFlowsFromEndpoints(endpoints: any[]): void {\n    // Create flows from endpoints\n    const generatedFlows: Flow[] = [];\n    \n    // Group endpoints by category/tag\n    const groupedEndpoints: Record<string, any[]> = {};\n    \n    endpoints.forEach(endpoint => {\n      const category = endpoint.category || endpoint.tag || 'General';\n      \n      if (!groupedEndpoints[category]) {\n        groupedEndpoints[category] = [];\n      }\n      \n      groupedEndpoints[category].push(endpoint);\n    });\n    \n    // Create a flow for each category\n    Object.entries(groupedEndpoints).forEach(([category, categoryEndpoints]) => {\n      const flow: Flow = {\n        id: this.generateId(),\n        name: category,\n        description: `Generated flow for ${category} endpoints`,\n        steps: categoryEndpoints.map(endpoint => ({\n          id: this.generateId(),\n          name: endpoint.name || endpoint.path,\n          description: endpoint.description || '',\n          method: endpoint.method || 'GET',\n          url: endpoint.path,\n          endpoint: endpoint.id\n        })),\n        createdAt: Date.now(),\n        updatedAt: Date.now(),\n        tags: ['generated']\n      };\n      \n      generatedFlows.push(flow);\n    });\n    \n    // Add generated flows\n    this.flows = [...this.flows, ...generatedFlows];\n    \n    // Set first flow as active if none is selected\n    if (!this.activeFlow && this.flows.length > 0) {\n      this.activeFlow = this.flows[0];\n    }\n    \n    this.saveFlows();\n    this.renderFlows();\n  }\n} ", "/**\n * DOM Utility functions for safe DOM manipulation\n */\n\n// Add this interface to allow 'class' property in element creation options\nexport interface ExtendedElementCreationOptions extends ElementCreationOptions {\n  class?: string;\n}\n\n/**\n * Returns an HTMLElement by its ID with proper type checking\n * @param id Element ID\n * @returns The element or null if not found\n */\nexport function getElementById<T extends HTMLElement = HTMLElement>(\n  id: string\n): T | null {\n  return document.getElementById(id) as T | null;\n}\n\n/**\n * Gets an element by ID (shorthand for getElementById)\n * @param id Element ID\n * @returns The element or null if not found\n */\nexport function getById<T extends HTMLElement = HTMLElement>(\n  id: string\n): T | null {\n  return getElementById<T>(id);\n}\n\n/**\n * Returns the first element matching a selector within a parent with proper type checking\n * @param selector CSS selector\n * @param parent Parent element to search within (optional)\n * @returns The element or null if not found\n */\nexport function querySelector<T extends HTMLElement = HTMLElement>(\n  selector: string, \n  parent: Document | HTMLElement = document\n): T | null {\n  return parent.querySelector(selector) as T;\n}\n\n/**\n * Finds a single element using a selector\n * @param selector CSS selector\n * @param parent Parent element to search within (optional)\n * @returns The element or null if not found\n */\nexport function findElement<T extends HTMLElement = HTMLElement>(\n  selector: string, \n  parent: Document | HTMLElement = document\n): T | null {\n  return querySelector<T>(selector, parent);\n}\n\n/**\n * Returns all elements matching a selector as an array with proper type checking\n * @param selector CSS selector\n * @param parent Parent element to search within (optional)\n * @returns Array of matching elements\n */\nexport function querySelectorAll<T extends HTMLElement = HTMLElement>(\n  selector: string, \n  parent: Document | HTMLElement = document\n): T[] {\n  return Array.from(parent.querySelectorAll(selector)) as T[];\n}\n\n/**\n * Finds multiple elements using a selector\n * @param selector CSS selector\n * @param parent Parent element to search within (optional)\n * @returns Array of matching elements\n */\nexport function findElements<T extends HTMLElement = HTMLElement>(\n  selector: string, \n  parent: Document | HTMLElement = document\n): T[] {\n  return querySelectorAll<T>(selector, parent);\n}\n\n/**\n * Safely creates an HTML element with proper type checking\n * @param tagName Element tag name\n * @param options Element creation options (optional)\n * @returns The created element\n */\nexport function createElement<T extends HTMLElement = HTMLElement>(\n  tagName: string,\n  options?: ExtendedElementCreationOptions\n): T {\n  const element = document.createElement(tagName) as T;\n  \n  // Apply class if provided in extended options\n  if (options?.class) {\n    element.className = options.class;\n  }\n  \n  return element;\n}\n\n/**\n * Creates an element with attributes and optional content\n * @param tagName Element tag name\n * @param attributes Element attributes object\n * @param content Inner content (text, HTML string, or child elements)\n * @returns The created element\n */\nexport function createElementWithAttributes<T extends HTMLElement = HTMLElement>(\n  tagName: string,\n  attributes: Record<string, string> = {},\n  content?: string | HTMLElement | HTMLElement[]\n): T {\n  const element = createElement<T>(tagName);\n  \n  // Set attributes\n  Object.entries(attributes).forEach(([key, value]) => {\n    if (key === 'className') {\n      element.className = value;\n    } else if (key === 'innerHTML' && typeof value === 'string') {\n      element.innerHTML = value;\n    } else {\n      element.setAttribute(key, value);\n    }\n  });\n  \n  // Add content\n  if (content) {\n    if (typeof content === 'string') {\n      element.textContent = content;\n    } else if (Array.isArray(content)) {\n      content.forEach(child => element.appendChild(child));\n    } else {\n      element.appendChild(content);\n    }\n  }\n  \n  return element;\n}\n\n/**\n * Safely sets text content on an element\n * @param element Target element\n * @param text Text content to set\n */\nexport function setTextContent(element: HTMLElement | null, text: string): void {\n  if (element) {\n    element.textContent = text;\n  }\n}\n\n/**\n * Safely sets HTML content on an element\n * @param element Target element\n * @param html HTML content to set\n */\nexport function setHTML(element: HTMLElement | null, html: string): void {\n  if (element) {\n    element.innerHTML = html;\n  }\n}\n\n/**\n * Safely adds a class to an element\n * @param element Target element\n * @param className Class to add\n */\nexport function addClass(element: HTMLElement | null, className: string): void {\n  if (element) {\n    element.classList.add(className);\n  }\n}\n\n/**\n * Safely removes a class from an element\n * @param element Target element\n * @param className Class to remove\n */\nexport function removeClass(element: HTMLElement | null, className: string): void {\n  if (element) {\n    element.classList.remove(className);\n  }\n}\n\n/**\n * Safely toggles a class on an element\n * @param element Target element\n * @param className Class to toggle\n * @param force Force state if provided\n */\nexport function toggleClass(\n  element: HTMLElement | null, \n  className: string, \n  force?: boolean\n): void {\n  if (element) {\n    element.classList.toggle(className, force);\n  }\n}\n\n/**\n * Safely checks if an element has a class\n * @param element Target element\n * @param className Class to check\n * @returns True if the element has the class\n */\nexport function hasClass(element: HTMLElement | null, className: string): boolean {\n  return element ? element.classList.contains(className) : false;\n}\n\n/**\n * Safely adds an event listener to an element\n * @param element Target element\n * @param eventType Event type\n * @param handler Event handler\n * @param options Event listener options\n */\nexport function addEventListener<K extends keyof HTMLElementEventMap>(\n  element: HTMLElement | null,\n  eventType: K,\n  handler: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions\n): void {\n  if (element) {\n    element.addEventListener(eventType, handler, options);\n  }\n}\n\n/**\n * Safely removes an event listener from an element\n * @param element Target element\n * @param eventType Event type\n * @param handler Event handler\n * @param options Event listener options\n */\nexport function removeEventListener<K extends keyof HTMLElementEventMap>(\n  element: HTMLElement | null,\n  eventType: K,\n  handler: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n  options?: boolean | EventListenerOptions\n): void {\n  if (element) {\n    element.removeEventListener(eventType, handler, options);\n  }\n}\n\n/**\n * Safely appends a child to an element\n * @param parent Parent element\n * @param child Child element\n */\nexport function appendChild(\n  parent: HTMLElement | null,\n  child: HTMLElement | string\n): void {\n  if (parent) {\n    if (typeof child === 'string') {\n      parent.appendChild(document.createTextNode(child));\n    } else {\n      parent.appendChild(child);\n    }\n  }\n}\n\n/**\n * Safely removes all children from an element\n * @param element Target element\n */\nexport function removeAllChildren(element: HTMLElement | null): void {\n  if (element) {\n    while (element.firstChild) {\n      element.removeChild(element.firstChild);\n    }\n  }\n}\n\n/**\n * Safely sets an attribute on an element\n * @param element Target element\n * @param name Attribute name\n * @param value Attribute value\n */\nexport function setAttribute(\n  element: HTMLElement | null,\n  name: string,\n  value: string\n): void {\n  if (element) {\n    element.setAttribute(name, value);\n  }\n}\n\n/**\n * Safely gets an attribute from an element\n * @param element Target element\n * @param name Attribute name\n * @returns Attribute value or null\n */\nexport function getAttribute(\n  element: HTMLElement | null,\n  name: string\n): string | null {\n  return element ? element.getAttribute(name) : null;\n}\n\n/**\n * Safely removes an attribute from an element\n * @param element Target element\n * @param name Attribute name\n */\nexport function removeAttribute(\n  element: HTMLElement | null,\n  name: string\n): void {\n  if (element) {\n    element.removeAttribute(name);\n  }\n}\n\n/**\n * Checks if an element is visible\n * @param element Target element\n * @returns True if the element is visible\n */\nexport function isVisible(element: HTMLElement | null): boolean {\n  if (!element) return false;\n  \n  const style = window.getComputedStyle(element);\n  return style.display !== 'none' && \n         style.visibility !== 'hidden' && \n         element.offsetParent !== null;\n}\n\n/**\n * Sets the display property of an element\n * @param element Target element\n * @param display Display value\n */\nexport function setDisplay(\n  element: HTMLElement | null,\n  display: string\n): void {\n  if (element) {\n    element.style.display = display;\n  }\n}\n\n/**\n * Shows an element by setting its display style\n * @param element Target element\n * @param displayValue Display value to use (default: block)\n */\nexport function showElement(\n  element: HTMLElement | null,\n  displayValue: string = 'block'\n): void {\n  setDisplay(element, displayValue);\n}\n\n/**\n * Hides an element by setting display to 'none'\n * @param element Target element\n */\nexport function hideElement(element: HTMLElement | null): void {\n  setDisplay(element, 'none');\n}\n\n/**\n * Toggles the visibility of an element\n * @param element Target element\n * @param displayValue Display value when showing (default: block)\n */\nexport function toggleElementVisibility(\n  element: HTMLElement | null,\n  displayValue: string = 'block'\n): void {\n  if (element) {\n    element.style.display = isVisible(element) ? 'none' : displayValue;\n  }\n}\n\n/**\n * Toggles an element's visibility\n * @param element Target element\n * @param force Force state if provided\n */\nexport function toggleElement(\n  element: HTMLElement | null,\n  force?: boolean\n): void {\n  if (!element) return;\n  \n  const isHidden = element.style.display === 'none';\n  if (force !== undefined) {\n    element.style.display = force ? '' : 'none';\n  } else {\n    element.style.display = isHidden ? '' : 'none';\n  }\n}\n\n/**\n * Add event listeners to multiple elements\n * @param selector CSS selector to find elements\n * @param eventType Event type\n * @param handler Event handler\n * @param options Event listener options\n */\nexport function addEventListeners<K extends keyof HTMLElementEventMap>(\n  selector: string,\n  eventType: K,\n  handler: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions\n): void {\n  const elements = findElements(selector);\n  elements.forEach(element => {\n    addEventListener(element, eventType, handler, options);\n  });\n} ", "/**\n * UI Manager Component\n * Handles UI interactions, notifications, modals, and loading states\n */\n\nimport { UIManagerOptions, ToastOptions, ModalOptions } from '../types/ui';\nimport { logger } from '../utils/logger';\nimport { ResponseViewer } from './ResponseViewer';\nimport { addEventListeners, findElement, findElements, getById, setHTML, toggleElement } from '../utils/dom-utils';\n\n/**\n * UI Manager Interface\n */\nexport interface IUIManager {\n  // Elements\n  container: HTMLElement | null;\n  toastContainer: HTMLElement | null;\n  loadingOverlay: HTMLElement | null;\n  modalContainer: HTMLElement | null;\n  \n  // Initialization methods\n  initElements(): void;\n  initializeUI(): void;\n  \n  // Toast notifications\n  showToast(options: ToastOptions): void;\n  showSuccess(title: string, message: string, duration?: number): void;\n  showError(title: string, message: string, duration?: number): void;\n  showWarning(title: string, message: string, duration?: number): void;\n  showInfo(title: string, message: string, duration?: number): void;\n  \n  // Loading indicators\n  showLoading(message?: string): void;\n  hideLoading(): void;\n  \n  // Modal dialogs\n  showModal(options: ModalOptions): HTMLElement;\n  closeModal(modalEl: HTMLElement): void;\n  closeAllModals(): void;\n  \n  // Confirmation dialogs\n  confirm(title: string, message: string, onConfirm: () => void, onCancel?: () => void): void;\n  \n  // Theme and styling\n  setTheme(theme: string): void;\n  getTheme(): string;\n}\n\n/**\n * UIManager class\n * Manages UI interactions, notifications, modals, and loading states\n */\nexport class UIManager implements IUIManager {\n  // Elements\n  public container: HTMLElement | null;\n  public toastContainer: HTMLElement | null;\n  public loadingOverlay: HTMLElement | null;\n  public modalContainer: HTMLElement | null;\n  \n  private options: UIManagerOptions;\n  private activeToasts: HTMLElement[] = [];\n  private activeModals: HTMLElement[] = [];\n  private theme: string = 'light';\n  private eventListeners: Map<string, Set<Function>> = new Map();\n  private elements: Map<string, HTMLElement> = new Map();\n  private isInitialized: boolean = false;\n  private responseViewer: ResponseViewer | null;\n  \n  /**\n   * Creates a new UIManager instance\n   * @param options Configuration options\n   */\n  constructor(options: UIManagerOptions = {}) {\n    this.options = {\n      containerId: 'app-container',\n      toastContainerId: 'toast-container',\n      loadingOverlayId: 'loading-overlay',\n      modalContainerId: 'modal-container',\n      debug: false,\n      ...options\n    };\n    \n    this.container = null;\n    this.toastContainer = null;\n    this.loadingOverlay = null;\n    this.modalContainer = null;\n    this.responseViewer = this.options.responseViewer || null;\n    \n    this.initElements();\n  }\n  \n  /**\n   * Initialize UI elements\n   */\n  public initElements(): void {\n    // Get container element\n    this.container = document.getElementById(this.options.containerId || 'app-container');\n    \n    // Create toast container if not exists\n    let toastContainer = document.getElementById(this.options.toastContainerId || 'toast-container');\n    if (!toastContainer) {\n      toastContainer = document.createElement('div');\n      toastContainer.id = this.options.toastContainerId || 'toast-container';\n      toastContainer.className = 'toast-container';\n      document.body.appendChild(toastContainer);\n    }\n    this.toastContainer = toastContainer;\n    \n    // Create loading overlay if not exists\n    let loadingOverlay = document.getElementById(this.options.loadingOverlayId || 'loading-overlay');\n    if (!loadingOverlay) {\n      loadingOverlay = document.createElement('div');\n      loadingOverlay.id = this.options.loadingOverlayId || 'loading-overlay';\n      loadingOverlay.className = 'loading-overlay';\n      loadingOverlay.innerHTML = `\n        <div class=\"loading-spinner\"></div>\n        <div class=\"loading-message\">Loading...</div>\n      `;\n      loadingOverlay.style.display = 'none';\n      document.body.appendChild(loadingOverlay);\n    }\n    this.loadingOverlay = loadingOverlay;\n    \n    // Create modal container if not exists\n    let modalContainer = document.getElementById(this.options.modalContainerId || 'modal-container');\n    if (!modalContainer) {\n      modalContainer = document.createElement('div');\n      modalContainer.id = this.options.modalContainerId || 'modal-container';\n      modalContainer.className = 'modal-container';\n      document.body.appendChild(modalContainer);\n    }\n    this.modalContainer = modalContainer;\n    \n    if (this.options.debug) {\n      logger.debug('UIManager: Elements initialized');\n    }\n  }\n  \n  /**\n   * Initialize UI\n   */\n  public initializeUI(): void {\n    // Initialize theme\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      this.setTheme(savedTheme);\n    }\n    \n    // Cache common elements\n    this.cacheElements();\n    \n    // Set up event listeners\n    this.setupEventListeners();\n    \n    // Mark as initialized\n    this.isInitialized = true;\n    \n    // Call the onUiReady callback if provided\n    if (this.options.onUiReady) {\n      this.options.onUiReady();\n    }\n    \n    if (this.options.debug) {\n      logger.debug('UIManager: UI initialized');\n    }\n  }\n  \n  /**\n   * Show a toast notification\n   */\n  public showToast(options: ToastOptions): void {\n    if (!this.toastContainer) return;\n    \n    const toastOptions = {\n      id: options.id || `toast-${Date.now()}`,\n      type: options.type || 'info',\n      title: options.title || '',\n      message: options.message,\n      duration: options.duration || 3000,\n      position: options.position || 'top-right',\n      closable: options.closable !== undefined ? options.closable : true,\n      onClose: options.onClose || (() => {}),\n      dismissable: options.dismissable !== undefined ? options.dismissable : true\n    };\n    \n    // Create toast element\n    const toast = document.createElement('div');\n    toast.className = `toast toast-${toastOptions.type} toast-${toastOptions.position}`;\n    \n    // Add toast content\n    toast.innerHTML = `\n      ${toastOptions.title ? `<div class=\"toast-title\">${toastOptions.title}</div>` : ''}\n      <div class=\"toast-message\">${toastOptions.message}</div>\n      ${toastOptions.closable ? '<button class=\"toast-close\">&times;</button>' : ''}\n    `;\n    \n    // Add to container\n    this.toastContainer.appendChild(toast);\n    \n    // Track active toast\n    this.activeToasts.push(toast);\n    \n    // Add close button event\n    if (toastOptions.closable) {\n      const closeButton = toast.querySelector('.toast-close');\n      if (closeButton) {\n        closeButton.addEventListener('click', () => {\n          this.closeToast(toast);\n          toastOptions.onClose();\n        });\n      }\n    }\n    \n    // Auto-close after duration\n    if (toastOptions.duration > 0) {\n      setTimeout(() => {\n        this.closeToast(toast);\n        toastOptions.onClose();\n      }, toastOptions.duration);\n    }\n    \n    // Animate in\n    setTimeout(() => {\n      toast.classList.add('show');\n    }, 10);\n  }\n  \n  /**\n   * Close a toast notification\n   */\n  private closeToast(toast: HTMLElement): void {\n    toast.classList.remove('show');\n    \n    // Remove after animation\n    setTimeout(() => {\n      if (toast.parentNode) {\n        toast.parentNode.removeChild(toast);\n      }\n      \n      // Remove from active toasts\n      const index = this.activeToasts.indexOf(toast);\n      if (index > -1) {\n        this.activeToasts.splice(index, 1);\n      }\n    }, 300);\n  }\n  \n  /**\n   * Show a success toast\n   */\n  public showSuccess(title: string, message: string, duration: number = 3000): void {\n    this.showToast({\n      type: 'success',\n      title,\n      message,\n      duration\n    });\n  }\n  \n  /**\n   * Show an error toast\n   */\n  public showError(title: string, message: string, duration: number = 5000): void {\n    this.showToast({\n      type: 'error',\n      title,\n      message,\n      duration\n    });\n  }\n  \n  /**\n   * Show a warning toast\n   */\n  public showWarning(title: string, message: string, duration: number = 4000): void {\n    this.showToast({\n      type: 'warning',\n      title,\n      message,\n      duration\n    });\n  }\n  \n  /**\n   * Show an info toast\n   */\n  public showInfo(title: string, message: string, duration: number = 3000): void {\n    this.showToast({\n      type: 'info',\n      title,\n      message,\n      duration\n    });\n  }\n  \n  /**\n   * Show loading overlay\n   */\n  public showLoading(message: string = 'Loading...'): void {\n    if (!this.loadingOverlay) return;\n    \n    // Set message\n    const messageEl = this.loadingOverlay.querySelector('.loading-message');\n    if (messageEl) {\n      messageEl.textContent = message;\n    }\n    \n    // Show overlay\n    this.loadingOverlay.style.display = 'flex';\n  }\n  \n  /**\n   * Hide loading overlay\n   */\n  public hideLoading(): void {\n    if (!this.loadingOverlay) return;\n    \n    this.loadingOverlay.style.display = 'none';\n  }\n  \n  /**\n   * Show a modal dialog\n   */\n  public showModal(options: ModalOptions): HTMLElement {\n    if (!this.modalContainer) {\n      throw new Error('Modal container not found');\n    }\n    \n    // Create modal element\n    const modal = document.createElement('div');\n    modal.className = `modal ${options.customClass || ''}`;\n    \n    // Add size class\n    if (options.size) {\n      modal.classList.add(`modal-${options.size}`);\n    }\n    \n    // Create modal content\n    const modalContent = document.createElement('div');\n    modalContent.className = 'modal-content';\n    \n    // Create header if title is provided\n    if (options.title) {\n      const modalHeader = document.createElement('div');\n      modalHeader.className = 'modal-header';\n      modalHeader.innerHTML = `\n        <h3 class=\"modal-title\">${options.title}</h3>\n        ${options.showClose !== false ? '<button class=\"modal-close\">&times;</button>' : ''}\n      `;\n      modalContent.appendChild(modalHeader);\n    }\n    \n    // Create body\n    const modalBody = document.createElement('div');\n    modalBody.className = 'modal-body';\n    if (typeof options.content === 'string') {\n      modalBody.innerHTML = options.content;\n    } else if (options.content) {\n      modalBody.appendChild(options.content);\n    }\n    modalContent.appendChild(modalBody);\n    \n    // Create footer if buttons are provided\n    if (options.buttons && options.buttons.length > 0) {\n      const modalFooter = document.createElement('div');\n      modalFooter.className = 'modal-footer';\n      \n      // Add buttons\n      options.buttons.forEach(button => {\n        const buttonEl = document.createElement('button');\n        buttonEl.className = `btn ${button.type ? `btn-${button.type}` : 'btn-secondary'}`;\n        buttonEl.textContent = button.text;\n        \n        // Add click event\n        buttonEl.addEventListener('click', () => {\n          if (button.onClick) {\n            button.onClick(modal);\n          }\n          \n          // Close if needed\n          if (button.closeOnClick !== false) {\n            this.closeModal(modal);\n          }\n        });\n        \n        modalFooter.appendChild(buttonEl);\n      });\n      \n      modalContent.appendChild(modalFooter);\n    }\n    \n    // Add modal content to modal\n    modal.appendChild(modalContent);\n    \n    // Add to container\n    this.modalContainer.appendChild(modal);\n    \n    // Track active modal\n    this.activeModals.push(modal);\n    \n    // Add close button event\n    if (options.showClose !== false) {\n      const closeButton = modal.querySelector('.modal-close');\n      if (closeButton) {\n        closeButton.addEventListener('click', () => {\n          this.closeModal(modal);\n          if (options.onClose) {\n            options.onClose();\n          }\n        });\n      }\n    }\n    \n    // Add backdrop click event\n    if (options.closable !== false) {\n      modal.addEventListener('click', (e) => {\n        if (e.target === modal) {\n          this.closeModal(modal);\n          if (options.onClose) {\n            options.onClose();\n          }\n        }\n      });\n    }\n    \n    // Animate in\n    setTimeout(() => {\n      modal.classList.add('show');\n    }, 10);\n    \n    // Call onOpen if provided\n    if (options.onOpen) {\n      setTimeout(() => {\n        if (options.onOpen) {\n          options.onOpen();\n        }\n      }, 300);\n    }\n    \n    return modal;\n  }\n  \n  /**\n   * Close a modal dialog\n   */\n  public closeModal(modal: HTMLElement): void {\n    modal.classList.remove('show');\n    \n    // Remove after animation\n    setTimeout(() => {\n      if (modal.parentNode) {\n        modal.parentNode.removeChild(modal);\n      }\n      \n      // Remove from active modals\n      const index = this.activeModals.indexOf(modal);\n      if (index > -1) {\n        this.activeModals.splice(index, 1);\n      }\n    }, 300);\n  }\n  \n  /**\n   * Close all modal dialogs\n   */\n  public closeAllModals(): void {\n    [...this.activeModals].forEach(modal => {\n      this.closeModal(modal);\n    });\n  }\n  \n  /**\n   * Show a confirmation dialog\n   */\n  public confirm(title: string, message: string, onConfirm: () => void, onCancel?: () => void): void {\n    this.showModal({\n      title,\n      content: `<p>${message}</p>`,\n      size: 'small',\n      buttons: [\n        {\n          text: 'Cancel',\n          type: 'secondary',\n          onClick: () => {\n            if (onCancel) {\n              onCancel();\n            }\n          }\n        },\n        {\n          text: 'Confirm',\n          type: 'primary',\n          onClick: () => {\n            onConfirm();\n          }\n        }\n      ]\n    });\n  }\n  \n  /**\n   * Set the UI theme\n   */\n  public setTheme(theme: string): void {\n    this.theme = theme;\n    \n    // Update body class\n    document.body.classList.remove('theme-light', 'theme-dark');\n    document.body.classList.add(`theme-${theme}`);\n    \n    // Save to localStorage\n    localStorage.setItem('theme', theme);\n  }\n  \n  /**\n   * Get the current theme\n   */\n  public getTheme(): string {\n    return this.theme;\n  }\n  \n  /**\n   * Caches commonly used elements\n   */\n  private cacheElements(): void {\n    // Cache elements that are frequently accessed\n    const elementIds = [\n      'endpoint-select',\n      'parameter-form',\n      'response-container',\n      'loading-indicator',\n      'error-container',\n      'submit-button',\n      'method-select',\n      'reset-button',\n      'variables-container'\n    ];\n    \n    for (const id of elementIds) {\n      const element = getById(id);\n      if (element) {\n        this.elements.set(id, element);\n      }\n    }\n  }\n  \n  /**\n   * Sets up event listeners for UI elements\n   */\n  private setupEventListeners(): void {\n    // Form submission\n    const form = findElement('form');\n    if (form) {\n      form.addEventListener('submit', (event) => {\n        event.preventDefault();\n        this.emit('form:submit', this.getFormData(form as HTMLFormElement));\n      });\n    }\n    \n    // Endpoint selection\n    const endpointSelect = this.elements.get('endpoint-select');\n    if (endpointSelect) {\n      endpointSelect.addEventListener('change', () => {\n        this.emit('endpoint:change', (endpointSelect as HTMLSelectElement).value);\n      });\n    }\n    \n    // Method selection\n    const methodSelect = this.elements.get('method-select');\n    if (methodSelect) {\n      methodSelect.addEventListener('change', () => {\n        this.emit('method:change', (methodSelect as HTMLSelectElement).value);\n      });\n    }\n    \n    // Reset button\n    const resetButton = this.elements.get('reset-button');\n    if (resetButton) {\n      resetButton.addEventListener('click', () => {\n        this.emit('form:reset');\n      });\n    }\n    \n    // Copy response buttons\n    addEventListeners('.copy-response-btn', 'click', (event) => {\n      event.preventDefault();\n      const target = (event.target as HTMLElement)?.dataset?.target;\n      this.emit('response:copy', target);\n    });\n    \n    // Tab switching\n    addEventListeners('.tab-button', 'click', (event) => {\n      const tabId = (event.target as HTMLElement).dataset.tab;\n      if (tabId) {\n        this.switchTab(tabId);\n      }\n    });\n    \n    // Collapsible sections\n    addEventListeners('.collapsible-header', 'click', (event) => {\n      const header = event.target as HTMLElement;\n      const content = header.nextElementSibling as HTMLElement | null;\n      \n      if (content && content.classList.contains('collapsible-content')) {\n        toggleElement(content, content.style.display === 'none');\n        \n        // Toggle the expand/collapse icon\n        const icon = header.querySelector('.collapse-icon');\n        if (icon) {\n          icon.textContent = content.style.display === 'none' ? '+' : '-';\n        }\n      }\n    });\n  }\n  \n  /**\n   * Gets form data as an object\n   * @param form Form element\n   * @returns Form data as an object\n   */\n  private getFormData(form: HTMLFormElement): Record<string, any> {\n    const formData = new FormData(form);\n    const data: Record<string, any> = {};\n    \n    for (const [key, value] of formData.entries()) {\n      data[key] = value;\n    }\n    \n    return data;\n  }\n  \n  /**\n   * Switches between tabs\n   * @param tabId ID of the tab to switch to\n   */\n  private switchTab(tabId: string): void {\n    const tabs = findElements('.tab-content');\n    const buttons = findElements('.tab-button');\n    \n    // Hide all tabs\n    tabs.forEach(tab => {\n      tab.style.display = 'none';\n    });\n    \n    // Deactivate all buttons\n    buttons.forEach(button => {\n      button.classList.remove('active');\n    });\n    \n    // Show the selected tab\n    const selectedTab = getById(tabId);\n    if (selectedTab) {\n      selectedTab.style.display = 'block';\n    }\n    \n    // Activate the selected button\n    const selectedButton = findElement(`.tab-button[data-tab=\"${tabId}\"]`);\n    if (selectedButton) {\n      selectedButton.classList.add('active');\n    }\n    \n    // Emit tab change event\n    this.emit('tab:change', tabId);\n  }\n  \n  /**\n   * Updates form fields based on the provided data\n   * @param data Data to update form with\n   */\n  public updateForm(data: Record<string, any>): void {\n    for (const [key, value] of Object.entries(data)) {\n      const element = findElement(`[name=\"${key}\"]`);\n      if (element) {\n        if (element instanceof HTMLInputElement) {\n          if (element.type === 'checkbox') {\n            element.checked = Boolean(value);\n          } else {\n            element.value = String(value);\n          }\n        } else if (element instanceof HTMLSelectElement || element instanceof HTMLTextAreaElement) {\n          element.value = String(value);\n        }\n      }\n    }\n    \n    // Emit form update event\n    this.emit('form:update', data);\n  }\n  \n  /**\n   * Enables or disables form elements\n   * @param enabled Whether to enable or disable\n   */\n  public setFormEnabled(enabled: boolean): void {\n    const form = findElement('form');\n    if (!form) return;\n    \n    const elements = form.querySelectorAll('input, select, textarea, button');\n    elements.forEach(element => {\n      (element as HTMLInputElement).disabled = !enabled;\n    });\n    \n    // Emit form enabled/disabled event\n    this.emit('form:enabled', enabled);\n  }\n  \n  /**\n   * Resets the form\n   */\n  public resetForm(): void {\n    const form = findElement('form');\n    if (form && form instanceof HTMLFormElement) {\n      form.reset();\n      \n      // Emit form reset event\n      this.emit('form:reset');\n    }\n  }\n  \n  /**\n   * Adds an event listener\n   * @param event Event name\n   * @param callback Callback function\n   */\n  public addEventListener(event: string, callback: Function): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, new Set());\n    }\n    \n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.add(callback);\n    }\n  }\n  \n  /**\n   * Removes an event listener\n   * @param event Event name\n   * @param callback Callback function\n   */\n  public removeEventListener(event: string, callback: Function): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.delete(callback);\n    }\n  }\n  \n  /**\n   * Emits an event\n   * @param event Event name\n   * @param data Event data\n   */\n  private emit(event: string, data: any = null): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          logger.error(`UIManager: Error in event listener for ${event}:`, error);\n        }\n      });\n    }\n  }\n  \n  /**\n   * Shows the loading indicator\n   * @param show Whether to show or hide the indicator\n   * @param message Optional message to display\n   */\n  private setLoadingIndicator(show: boolean, message?: string): void {\n    // Use custom loading indicator if provided\n    if (typeof this.options.showLoadingIndicator === 'function') {\n      this.options.showLoadingIndicator(show, message);\n      return;\n    }\n    \n    // Use default loading indicator\n    const loadingIndicator = this.elements.get('loading-indicator');\n    if (loadingIndicator) {\n      if (show) {\n        loadingIndicator.style.display = 'flex';\n        if (message) {\n          const msgElement = loadingIndicator.querySelector('.loading-message');\n          if (msgElement) {\n            msgElement.textContent = message;\n          }\n        }\n      } else {\n        loadingIndicator.style.display = 'none';\n      }\n    }\n  }\n} ", "/**\n * Bundled API Endpoints\n * Provides a default set of API endpoints for testing\n */\nimport { Endpoint, EndpointParameter } from '../types/modules';\n\nexport const bundledEndpoints: Endpoint[] = [\n  {\n    id: 'health',\n    name: 'API Health',\n    category: 'System',\n    description: 'Check the health status of the API',\n    path: '/api/v1/health',\n    method: 'GET',\n    parameters: [],\n    headers: {},\n    requestBody: null,\n    responseExample: null,\n    requiresAuth: false,\n    tags: ['health', 'system']\n  },\n  {\n    id: 'status',\n    name: 'API Status',\n    category: 'System',\n    description: 'Get detailed status of the API and its dependencies',\n    path: '/api/v1/status',\n    method: 'GET',\n    parameters: [],\n    headers: {},\n    requestBody: null,\n    responseExample: null,\n    requiresAuth: false,\n    tags: ['system']\n  },\n  {\n    id: 'users-list',\n    name: 'List Users',\n    category: 'Users',\n    description: 'Get a list of all users',\n    path: '/api/v1/users',\n    method: 'GET',\n    parameters: [\n      {\n        name: 'page',\n        in: 'query',\n        description: 'Page number',\n        required: false,\n        type: 'integer',\n        default: 1\n      },\n      {\n        name: 'limit',\n        in: 'query',\n        description: 'Number of users per page',\n        required: false,\n        type: 'integer',\n        default: 10\n      }\n    ],\n    headers: {},\n    requestBody: null,\n    responseExample: null,\n    requiresAuth: false,\n    tags: ['users']\n  },\n  {\n    id: 'users-get',\n    name: 'Get User',\n    category: 'Users',\n    description: 'Get a specific user by ID',\n    path: '/api/v1/users/{id}',\n    method: 'GET',\n    parameters: [\n      {\n        name: 'id',\n        in: 'path',\n        description: 'User ID',\n        required: true,\n        type: 'string'\n      }\n    ],\n    headers: {},\n    requestBody: null,\n    responseExample: null,\n    requiresAuth: false,\n    tags: ['users']\n  },\n  {\n    id: 'users-create',\n    name: 'Create User',\n    category: 'Users',\n    description: 'Create a new user',\n    path: '/api/v1/users',\n    method: 'POST',\n    parameters: [],\n    requestBody: {\n      required: true,\n      content: {\n        'application/json': {\n          schema: {\n            type: 'object',\n            properties: {\n              name: {\n                type: 'string',\n                description: 'User name',\n                example: 'John Doe'\n              },\n              email: {\n                type: 'string',\n                description: 'User email',\n                example: 'john@example.com'\n              },\n              role: {\n                type: 'string',\n                description: 'User role',\n                enum: ['admin', 'user'],\n                example: 'user'\n              }\n            },\n            required: ['name', 'email']\n          }\n        }\n      }\n    },\n    headers: {},\n    responseExample: null,\n    requiresAuth: false,\n    tags: ['users']\n  },\n  {\n    id: 'products-list',\n    name: 'List Products',\n    category: 'Products',\n    description: 'Get a list of all products',\n    path: '/api/v1/products',\n    method: 'GET',\n    parameters: [\n      {\n        name: 'page',\n        in: 'query',\n        description: 'Page number',\n        required: false,\n        type: 'integer',\n        default: 1\n      },\n      {\n        name: 'limit',\n        in: 'query',\n        description: 'Number of products per page',\n        required: false,\n        type: 'integer',\n        default: 10\n      },\n      {\n        name: 'category',\n        in: 'query',\n        description: 'Filter by category',\n        required: false,\n        type: 'string'\n      }\n    ],\n    headers: {},\n    requestBody: null,\n    responseExample: null,\n    requiresAuth: false,\n    tags: ['products']\n  },\n  {\n    id: 'products-get',\n    name: 'Get Product',\n    category: 'Products',\n    description: 'Get a specific product by ID',\n    path: '/api/v1/products/{id}',\n    method: 'GET',\n    parameters: [\n      {\n        name: 'id',\n        in: 'path',\n        description: 'Product ID',\n        required: true,\n        type: 'string'\n      }\n    ],\n    headers: {},\n    requestBody: null,\n    responseExample: null,\n    requiresAuth: false,\n    tags: ['products']\n  },\n  {\n    id: 'products-create',\n    name: 'Create Product',\n    category: 'Products',\n    description: 'Create a new product',\n    path: '/api/v1/products',\n    method: 'POST',\n    parameters: [],\n    requestBody: {\n      required: true,\n      content: {\n        'application/json': {\n          schema: {\n            type: 'object',\n            properties: {\n              name: {\n                type: 'string',\n                description: 'Product name',\n                example: 'Smartphone X1'\n              },\n              description: {\n                type: 'string',\n                description: 'Product description',\n                example: 'The latest smartphone with advanced features'\n              },\n              price: {\n                type: 'number',\n                description: 'Product price',\n                example: 999.99\n              },\n              category: {\n                type: 'string',\n                description: 'Product category',\n                example: 'Electronics'\n              }\n            },\n            required: ['name', 'price']\n          }\n        }\n      }\n    },\n    headers: {},\n    responseExample: null,\n    requiresAuth: false,\n    tags: ['products']\n  },\n  {\n    id: 'orders-list',\n    name: 'List Orders',\n    category: 'Orders',\n    description: 'Get a list of all orders',\n    path: '/api/v1/orders',\n    method: 'GET',\n    parameters: [\n      {\n        name: 'page',\n        in: 'query',\n        description: 'Page number',\n        required: false,\n        type: 'integer',\n        default: 1\n      },\n      {\n        name: 'limit',\n        in: 'query',\n        description: 'Number of orders per page',\n        required: false,\n        type: 'integer',\n        default: 10\n      },\n      {\n        name: 'userId',\n        in: 'query',\n        description: 'Filter by user ID',\n        required: false,\n        type: 'string'\n      },\n      {\n        name: 'status',\n        in: 'query',\n        description: 'Filter by order status',\n        required: false,\n        type: 'string',\n        enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled']\n      }\n    ],\n    headers: {},\n    requestBody: null,\n    responseExample: null,\n    requiresAuth: false,\n    tags: ['orders']\n  },\n  {\n    id: 'orders-get',\n    name: 'Get Order',\n    category: 'Orders',\n    description: 'Get a specific order by ID',\n    path: '/api/v1/orders/{id}',\n    method: 'GET',\n    parameters: [\n      {\n        name: 'id',\n        in: 'path',\n        description: 'Order ID',\n        required: true,\n        type: 'string'\n      }\n    ],\n    headers: {},\n    requestBody: null,\n    responseExample: null,\n    requiresAuth: false,\n    tags: ['orders']\n  },\n  {\n    id: 'orders-create',\n    name: 'Create Order',\n    category: 'Orders',\n    description: 'Create a new order',\n    path: '/api/v1/orders',\n    method: 'POST',\n    parameters: [],\n    requestBody: {\n      required: true,\n      content: {\n        'application/json': {\n          schema: {\n            type: 'object',\n            properties: {\n              userId: {\n                type: 'string',\n                description: 'User ID',\n                example: 'usr_123456'\n              },\n              items: {\n                type: 'array',\n                description: 'Order items',\n                items: {\n                  type: 'object',\n                  properties: {\n                    productId: {\n                      type: 'string',\n                      description: 'Product ID',\n                      example: 'prod_123456'\n                    },\n                    quantity: {\n                      type: 'integer',\n                      description: 'Quantity',\n                      example: 1\n                    },\n                    price: {\n                      type: 'number',\n                      description: 'Price per unit',\n                      example: 999.99\n                    }\n                  },\n                  required: ['productId', 'quantity']\n                }\n              },\n              shippingAddress: {\n                type: 'object',\n                description: 'Shipping address',\n                properties: {\n                  street: {\n                    type: 'string',\n                    description: 'Street address',\n                    example: '123 Main St'\n                  },\n                  city: {\n                    type: 'string',\n                    description: 'City',\n                    example: 'San Francisco'\n                  },\n                  state: {\n                    type: 'string',\n                    description: 'State/Province',\n                    example: 'CA'\n                  },\n                  postalCode: {\n                    type: 'string',\n                    description: 'Postal code',\n                    example: '94105'\n                  },\n                  country: {\n                    type: 'string',\n                    description: 'Country',\n                    example: 'USA'\n                  }\n                },\n                required: ['street', 'city', 'country']\n              }\n            },\n            required: ['userId', 'items']\n          }\n        }\n      }\n    },\n    headers: {},\n    responseExample: null,\n    requiresAuth: false,\n    tags: ['orders']\n  }\n]; ", "/**\n * Storage Utility Functions\n * Utilities for working with localStorage, sessionStorage, and IndexedDB\n */\n\nimport { logger } from './logger';\n\n/**\n * Interface for storage options\n */\nexport interface StorageOptions {\n  expires?: number; // Expiration time in milliseconds\n  prefix?: string;  // Key prefix for namespacing\n}\n\n/**\n * Interface for a stored item with expiration\n */\ninterface StoredItem<T> {\n  value: T;\n  expires?: number; // Timestamp when the item expires\n}\n\n/**\n * Checks if the storage is available\n * @param type Storage type ('localStorage' or 'sessionStorage')\n * @returns Whether the storage is available\n */\nexport function isStorageAvailable(type: 'localStorage' | 'sessionStorage'): boolean {\n  try {\n    const storage = window[type];\n    const testKey = `__storage_test__${Math.random()}`;\n    storage.setItem(testKey, testKey);\n    storage.removeItem(testKey);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Sets an item in localStorage with optional expiration\n * @param key Key to store under\n * @param value Value to store\n * @param options Storage options\n */\nexport function setLocalStorageItem<T>(key: string, value: T, options: StorageOptions = {}): void {\n  try {\n    if (!isStorageAvailable('localStorage')) {\n      logger.warn('localStorage is not available');\n      return;\n    }\n    \n    const { expires, prefix = '' } = options;\n    const prefixedKey = prefix ? `${prefix}_${key}` : key;\n    \n    const item: StoredItem<T> = {\n      value\n    };\n    \n    // Add expiration if specified\n    if (expires) {\n      item.expires = Date.now() + expires;\n    }\n    \n    localStorage.setItem(prefixedKey, JSON.stringify(item));\n    logger.debug(`LocalStorage: Set item \"${prefixedKey}\"`);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logger.error(`Failed to set localStorage item \"${key}\":`, errorMessage);\n  }\n}\n\n/**\n * Gets an item from localStorage, respecting expiration\n * @param key Key to retrieve\n * @param options Storage options\n * @returns Retrieved value or null if not found or expired\n */\nexport function getLocalStorageItem<T>(key: string, options: StorageOptions = {}): T | null {\n  try {\n    if (!isStorageAvailable('localStorage')) {\n      logger.warn('localStorage is not available');\n      return null;\n    }\n    \n    const { prefix = '' } = options;\n    const prefixedKey = prefix ? `${prefix}_${key}` : key;\n    \n    const json = localStorage.getItem(prefixedKey);\n    \n    if (!json) {\n      return null;\n    }\n    \n    const item: StoredItem<T> = JSON.parse(json);\n    \n    // Check if the item has expired\n    if (item.expires && item.expires < Date.now()) {\n      localStorage.removeItem(prefixedKey);\n      logger.debug(`LocalStorage: Item \"${prefixedKey}\" expired and was removed`);\n      return null;\n    }\n    \n    logger.debug(`LocalStorage: Retrieved item \"${prefixedKey}\"`);\n    return item.value;\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logger.error(`Failed to get localStorage item \"${key}\":`, errorMessage);\n    return null;\n  }\n}\n\n/**\n * Removes an item from localStorage\n * @param key Key to remove\n * @param options Storage options\n */\nexport function removeLocalStorageItem(key: string, options: StorageOptions = {}): void {\n  try {\n    if (!isStorageAvailable('localStorage')) {\n      logger.warn('localStorage is not available');\n      return;\n    }\n    \n    const { prefix = '' } = options;\n    const prefixedKey = prefix ? `${prefix}_${key}` : key;\n    \n    localStorage.removeItem(prefixedKey);\n    logger.debug(`LocalStorage: Removed item \"${prefixedKey}\"`);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logger.error(`Failed to remove localStorage item \"${key}\":`, errorMessage);\n  }\n}\n\n/**\n * Sets an item in sessionStorage\n * @param key Key to store under\n * @param value Value to store\n * @param options Storage options\n */\nexport function setSessionStorageItem<T>(key: string, value: T, options: StorageOptions = {}): void {\n  try {\n    if (!isStorageAvailable('sessionStorage')) {\n      logger.warn('sessionStorage is not available');\n      return;\n    }\n    \n    const { prefix = '' } = options;\n    const prefixedKey = prefix ? `${prefix}_${key}` : key;\n    \n    const item: StoredItem<T> = { value };\n    \n    sessionStorage.setItem(prefixedKey, JSON.stringify(item));\n    logger.debug(`SessionStorage: Set item \"${prefixedKey}\"`);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logger.error(`Failed to set sessionStorage item \"${key}\":`, errorMessage);\n  }\n}\n\n/**\n * Gets an item from sessionStorage\n * @param key Key to retrieve\n * @param options Storage options\n * @returns Retrieved value or null if not found\n */\nexport function getSessionStorageItem<T>(key: string, options: StorageOptions = {}): T | null {\n  try {\n    if (!isStorageAvailable('sessionStorage')) {\n      logger.warn('sessionStorage is not available');\n      return null;\n    }\n    \n    const { prefix = '' } = options;\n    const prefixedKey = prefix ? `${prefix}_${key}` : key;\n    \n    const json = sessionStorage.getItem(prefixedKey);\n    \n    if (!json) {\n      return null;\n    }\n    \n    const item: StoredItem<T> = JSON.parse(json);\n    logger.debug(`SessionStorage: Retrieved item \"${prefixedKey}\"`);\n    return item.value;\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logger.error(`Failed to get sessionStorage item \"${key}\":`, errorMessage);\n    return null;\n  }\n}\n\n/**\n * Removes an item from sessionStorage\n * @param key Key to remove\n * @param options Storage options\n */\nexport function removeSessionStorageItem(key: string, options: StorageOptions = {}): void {\n  try {\n    if (!isStorageAvailable('sessionStorage')) {\n      logger.warn('sessionStorage is not available');\n      return;\n    }\n    \n    const { prefix = '' } = options;\n    const prefixedKey = prefix ? `${prefix}_${key}` : key;\n    \n    sessionStorage.removeItem(prefixedKey);\n    logger.debug(`SessionStorage: Removed item \"${prefixedKey}\"`);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logger.error(`Failed to remove sessionStorage item \"${key}\":`, errorMessage);\n  }\n}\n\n/**\n * Clears expired items from localStorage\n * @param prefix Optional prefix to limit cleaning to specific keys\n * @returns Number of items removed\n */\nexport function clearExpiredLocalStorageItems(prefix?: string): number {\n  if (!isStorageAvailable('localStorage')) {\n    logger.warn('localStorage is not available');\n    return 0;\n  }\n  \n  let removedCount = 0;\n  const now = Date.now();\n  \n  try {\n    const keys = Object.keys(localStorage);\n    \n    for (const key of keys) {\n      // Skip if prefix doesn't match\n      if (prefix && !key.startsWith(prefix)) {\n        continue;\n      }\n      \n      try {\n        const json = localStorage.getItem(key);\n        if (!json) continue;\n        \n        const item = JSON.parse(json);\n        \n        // Check if the item has an expiration and if it has expired\n        if (item.expires && item.expires < now) {\n          localStorage.removeItem(key);\n          removedCount++;\n        }\n      } catch {\n        // Skip items that fail to parse\n        continue;\n      }\n    }\n    \n    logger.debug(`LocalStorage: Cleared ${removedCount} expired items`);\n    return removedCount;\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logger.error('Failed to clear expired localStorage items:', errorMessage);\n    return removedCount;\n  }\n}\n\n/**\n * Gets the size of data stored in localStorage\n * @param prefix Optional prefix to limit size calculation\n * @returns Size in bytes\n */\nexport function getLocalStorageSize(prefix?: string): number {\n  if (!isStorageAvailable('localStorage')) {\n    logger.warn('localStorage is not available');\n    return 0;\n  }\n  \n  try {\n    const keys = Object.keys(localStorage);\n    let totalSize = 0;\n    \n    for (const key of keys) {\n      // Skip if prefix doesn't match\n      if (prefix && !key.startsWith(prefix)) {\n        continue;\n      }\n      \n      const value = localStorage.getItem(key);\n      if (value) {\n        totalSize += key.length + value.length;\n      }\n    }\n    \n    return totalSize * 2; // Multiply by 2 because characters are UTF-16 (2 bytes per character)\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logger.error('Failed to calculate localStorage size:', errorMessage);\n    return 0;\n  }\n}\n\n/**\n * Gets all localStorage keys with a specific prefix\n * @param prefix Prefix to filter by\n * @returns Array of keys\n */\nexport function getLocalStorageKeys(prefix = ''): string[] {\n  if (!isStorageAvailable('localStorage')) {\n    logger.warn('localStorage is not available');\n    return [];\n  }\n  \n  try {\n    const keys = Object.keys(localStorage);\n    \n    if (!prefix) {\n      return keys;\n    }\n    \n    return keys.filter(key => key.startsWith(prefix)).map(key => {\n      // Remove prefix from the key if desired\n      return prefix ? key.substring(prefix.length + 1) : key;\n    });\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logger.error('Failed to get localStorage keys:', errorMessage);\n    return [];\n  }\n}\n\n/**\n * Creates a storage manager for a specific namespace\n * @param namespace Namespace for the storage\n * @returns Storage manager object\n */\nexport function createStorageManager(namespace: string) {\n  const options: StorageOptions = { prefix: namespace };\n  \n  return {\n    setItem: <T>(key: string, value: T, expires?: number): void => {\n      setLocalStorageItem(key, value, { ...options, expires });\n    },\n    \n    getItem: <T>(key: string): T | null => {\n      return getLocalStorageItem<T>(key, options);\n    },\n    \n    removeItem: (key: string): void => {\n      removeLocalStorageItem(key, options);\n    },\n    \n    clear: (): void => {\n      const keys = getLocalStorageKeys(namespace);\n      keys.forEach(key => removeLocalStorageItem(key, options));\n    },\n    \n    clearExpired: (): number => {\n      return clearExpiredLocalStorageItems(namespace);\n    },\n    \n    getSize: (): number => {\n      return getLocalStorageSize(namespace);\n    },\n    \n    getKeys: (): string[] => {\n      return getLocalStorageKeys(namespace);\n    }\n  };\n} ", "/**\n * DomainStateManager Module\n * Manages domain state data and updates\n */\n\nimport { logger } from '../utils/logger';\nimport { DomainStateViewer } from '../components/DomainStateViewer';\nimport { getLocalStorageItem, setLocalStorageItem } from '../utils/storage-utils';\n\n/**\n * Interface for DomainStateManager options\n */\nexport interface DomainStateManagerOptions {\n  viewer?: DomainStateViewer;\n  storageKey?: string;\n  enablePersistence?: boolean;\n  stateEndpoint?: string;\n  diffingEnabled?: boolean;\n  storagePrefix?: string;\n}\n\n/**\n * Default options\n */\nconst DEFAULT_OPTIONS: DomainStateManagerOptions = {\n  storageKey: 'domain_state',\n  enablePersistence: true,\n  stateEndpoint: '/api/v1/state',\n  diffingEnabled: true,\n  storagePrefix: 'admin_ui'\n};\n\n/**\n * DomainStateManager class\n * Manages domain state data and persistence\n */\nexport class DomainStateManager {\n  private options: Required<DomainStateManagerOptions>;\n  private state: Record<string, any> = {};\n  private previousState: Record<string, any> = {};\n  private viewer: DomainStateViewer | null;\n  \n  /**\n   * Creates a new DomainStateManager instance\n   * @param options Manager options\n   */\n  constructor(options: DomainStateManagerOptions = {}) {\n    // Apply default options\n    this.options = { ...DEFAULT_OPTIONS, ...options } as Required<DomainStateManagerOptions>;\n    \n    // Initialize properties\n    this.viewer = this.options.viewer || null;\n    \n    // Log initialization\n    logger.debug('DomainStateManager: Initializing');\n  }\n  \n  /**\n   * Initializes the manager\n   */\n  public initialize(): void {\n    try {\n      // Load persisted state if enabled\n      if (this.options.enablePersistence) {\n        this.loadState();\n      }\n      \n      // Initialize the viewer if available\n      if (this.viewer) {\n        this.viewer.initialize();\n        this.updateViewer();\n      }\n      \n      logger.info('DomainStateManager: Initialized successfully');\n        } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error('DomainStateManager: Failed to initialize:', errorMessage);\n        }\n    }\n    \n    /**\n   * Sets a state value\n   * @param key State key\n   * @param value State value\n   * @param persist Whether to persist the updated state\n   */\n  public setState(key: string, value: any, persist: boolean = true): void {\n    try {\n      // Save previous state for diffing if enabled\n      if (this.options.diffingEnabled) {\n        this.previousState = { ...this.state };\n      }\n      \n      // Update the state\n      this.state[key] = value;\n      \n      // Update the viewer\n      this.updateViewer();\n      \n      // Persist the state if enabled\n      if (persist && this.options.enablePersistence) {\n        this.persistState();\n      }\n      \n      logger.debug(`DomainStateManager: Set state value for key \"${key}\"`);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(`DomainStateManager: Failed to set state for key \"${key}\":`, errorMessage);\n    }\n  }\n  \n  /**\n   * Gets a state value\n   * @param key State key\n   * @param defaultValue Default value if key doesn't exist\n   * @returns State value or default value\n   */\n  public getState<T>(key: string, defaultValue?: T): T | undefined {\n    return key in this.state ? this.state[key] : defaultValue;\n  }\n  \n  /**\n   * Gets the entire state object\n   * @returns Complete state object\n   */\n  public getAllState(): Record<string, any> {\n    return { ...this.state };\n  }\n  \n  /**\n   * Removes a state value\n   * @param key State key\n   * @param persist Whether to persist the updated state\n   */\n  public removeState(key: string, persist: boolean = true): void {\n    try {\n      // Save previous state for diffing if enabled\n      if (this.options.diffingEnabled) {\n        this.previousState = { ...this.state };\n      }\n      \n      // Remove the state key\n      if (key in this.state) {\n        delete this.state[key];\n        \n        // Update the viewer\n        this.updateViewer();\n        \n        // Persist the state if enabled\n        if (persist && this.options.enablePersistence) {\n          this.persistState();\n        }\n        \n        logger.debug(`DomainStateManager: Removed state value for key \"${key}\"`);\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(`DomainStateManager: Failed to remove state for key \"${key}\":`, errorMessage);\n    }\n  }\n  \n  /**\n   * Clears all state values\n   * @param persist Whether to persist the cleared state\n   */\n  public clearState(persist: boolean = true): void {\n    try {\n      // Save previous state for diffing if enabled\n      if (this.options.diffingEnabled) {\n        this.previousState = { ...this.state };\n      }\n      \n      // Clear the state\n      this.state = {};\n      \n      // Update the viewer\n      this.updateViewer();\n      \n      // Persist the state if enabled\n      if (persist && this.options.enablePersistence) {\n        this.persistState();\n      }\n      \n      logger.debug('DomainStateManager: Cleared all state values');\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error('DomainStateManager: Failed to clear state:', errorMessage);\n    }\n  }\n  \n  /**\n   * Updates the state viewer with current state\n   */\n  private updateViewer(): void {\n    if (this.viewer) {\n      const diff = this.options.diffingEnabled \n        ? this.calculateDiff(this.previousState, this.state)\n        : null;\n        \n      this.viewer.updateState(this.state, diff);\n        }\n    }\n    \n    /**\n   * Calculates the difference between previous and current state\n   * @param oldState Previous state\n   * @param newState Current state\n   * @returns Diff object showing added, updated, and removed properties\n   */\n  private calculateDiff(oldState: Record<string, any>, newState: Record<string, any>): Record<string, any> {\n    const diff: Record<string, any> = {\n      added: {},\n      updated: {},\n      removed: {}\n    };\n    \n    // Find added and updated properties\n    Object.keys(newState).forEach(key => {\n      if (!(key in oldState)) {\n        diff.added[key] = newState[key];\n      } else if (JSON.stringify(oldState[key]) !== JSON.stringify(newState[key])) {\n        diff.updated[key] = {\n          from: oldState[key],\n          to: newState[key]\n        };\n      }\n    });\n    \n    // Find removed properties\n    Object.keys(oldState).forEach(key => {\n      if (!(key in newState)) {\n        diff.removed[key] = oldState[key];\n      }\n    });\n    \n    return diff;\n  }\n  \n  /**\n   * Persists the current state to storage\n   */\n  private persistState(): void {\n    try {\n      const storageOptions = {\n        prefix: this.options.storagePrefix\n      };\n      \n      setLocalStorageItem(this.options.storageKey, this.state, storageOptions);\n      logger.debug('DomainStateManager: State persisted to storage');\n        } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error('DomainStateManager: Failed to persist state:', errorMessage);\n        }\n    }\n    \n    /**\n   * Loads state from storage\n   */\n  private loadState(): void {\n    try {\n      const storageOptions = {\n        prefix: this.options.storagePrefix\n      };\n      \n      const storedState = getLocalStorageItem<Record<string, any>>(\n        this.options.storageKey, \n        storageOptions\n      );\n      \n      if (storedState) {\n        this.state = storedState;\n        logger.debug('DomainStateManager: State loaded from storage');\n      }\n        } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error('DomainStateManager: Failed to load state from storage:', errorMessage);\n        }\n    }\n    \n    /**\n   * Updates state from API response\n   * @param response API response object\n   * @param stateKey Optional key to extract from response\n   */\n  public updateFromResponse(response: any, stateKey?: string): void {\n    try {\n      if (!response) return;\n      \n      // Save previous state for diffing if enabled\n      if (this.options.diffingEnabled) {\n        this.previousState = { ...this.state };\n      }\n      \n      if (stateKey && typeof response === 'object' && stateKey in response) {\n        // Extract specific key from response\n        this.setState(stateKey, response[stateKey]);\n      } else if (typeof response === 'object' && 'state' in response) {\n        // Handle response with 'state' property\n        const stateData = response.state;\n        \n        if (typeof stateData === 'object' && stateData !== null) {\n          // Update all keys from state object\n          for (const [key, value] of Object.entries(stateData)) {\n            this.setState(key, value, false);\n          }\n          \n          // Persist the full state once\n          if (this.options.enablePersistence) {\n            this.persistState();\n          }\n        }\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error('DomainStateManager: Failed to update state from response:', errorMessage);\n    }\n  }\n  \n  /**\n   * Checks if a state key exists\n   * @param key State key\n   * @returns Whether the key exists\n   */\n  public hasState(key: string): boolean {\n    return key in this.state;\n  }\n  \n  /**\n   * Fetches current state from the API\n   * @returns Promise resolving to the state data\n   */\n  public async fetchStateFromApi(): Promise<Record<string, any>> {\n    try {\n      const response = await fetch(this.options.stateEndpoint);\n      \n      if (!response.ok) {\n        throw new Error(`API returned status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      // Save previous state for diffing if enabled\n      if (this.options.diffingEnabled) {\n        this.previousState = { ...this.state };\n      }\n      \n      if (data && typeof data === 'object') {\n        if ('state' in data && typeof data.state === 'object') {\n          // State is nested under 'state' property\n          this.state = data.state;\n            } else {\n          // State is the entire response\n          this.state = data;\n        }\n        \n        // Update viewer and persist\n        this.updateViewer();\n        \n        if (this.options.enablePersistence) {\n          this.persistState();\n        }\n        \n        logger.info('DomainStateManager: State fetched from API');\n      }\n      \n      return this.getAllState();\n            } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error('DomainStateManager: Failed to fetch state from API:', errorMessage);\n      throw error;\n    }\n  }\n} ", "/**\n * DomainStateViewer Component\n * Displays and visualizes domain state\n */\n\nimport { logger } from '../utils/logger';\n\n/**\n * Interface for DomainStateViewer options\n */\nexport interface DomainStateViewerOptions {\n  containerId: string;\n}\n\n/**\n * DomainStateViewer class\n */\nexport class DomainStateViewer {\n  private options: DomainStateViewerOptions;\n  private container: HTMLElement | null = null;\n  private currentState: Record<string, any> = {};\n  private jsonFormatter: any = null; // Will use JSON Formatter library if available\n  \n  /**\n   * Creates a new DomainStateViewer instance\n   * @param options Viewer options\n   */\n  constructor(options: DomainStateViewerOptions) {\n    this.options = options;\n  }\n  \n  /**\n   * Initializes the viewer\n   */\n  public initialize(): void {\n    try {\n      // Get container element\n      this.container = document.getElementById(this.options.containerId);\n      \n      if (!this.container) {\n        throw new Error(`Container element not found: ${this.options.containerId}`);\n      }\n      \n      // Check if JSON Formatter is available\n      if (typeof window !== 'undefined' && 'JSONFormatter' in window) {\n        this.jsonFormatter = (window as any).JSONFormatter;\n      }\n      \n      logger.debug('DomainStateViewer: Initialized');\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error('DomainStateViewer: Initialization failed:', errorMessage);\n    }\n  }\n  \n  /**\n   * Updates the viewer with new state data\n   * @param state Current state object\n   * @param diff Optional diff showing state changes\n   */\n  public updateState(state: Record<string, any>, diff?: Record<string, any> | null): void {\n    try {\n      if (!this.container) {\n        return;\n      }\n      \n      this.currentState = { ...state };\n      \n      // Display state\n      if (Object.keys(state).length === 0) {\n        this.renderEmptyState();\n      } else {\n        this.renderState(state, diff);\n      }\n      \n      logger.debug('DomainStateViewer: State updated');\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error('DomainStateViewer: Failed to update state:', errorMessage);\n    }\n  }\n  \n  /**\n   * Renders empty state message\n   */\n  private renderEmptyState(): void {\n    if (!this.container) return;\n    \n    this.container.innerHTML = `\n      <div class=\"empty-state\">\n        <p class=\"text-text-muted\">No domain state data available</p>\n      </div>\n    `;\n  }\n  \n  /**\n   * Renders state content\n   * @param state State object to render\n   * @param diff Optional diff showing state changes\n   */\n  private renderState(state: Record<string, any>, diff?: Record<string, any> | null): void {\n    if (!this.container) return;\n    \n    // Clear container\n    this.container.innerHTML = '';\n    \n    // Create state wrapper\n    const stateWrapper = document.createElement('div');\n    stateWrapper.className = 'domain-state-wrapper';\n    \n    // Add toolbar\n    const toolbar = document.createElement('div');\n    toolbar.className = 'domain-state-toolbar';\n    toolbar.innerHTML = `\n      <div class=\"state-info\">\n        <span class=\"state-count\">${Object.keys(state).length} entities</span>\n      </div>\n      <div class=\"toolbar-actions\">\n        <button class=\"refresh-state-btn\" title=\"Refresh State\">\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\n          </svg>\n        </button>\n        <button class=\"expand-all-btn\" title=\"Expand All\">\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 11l7-7 7 7M5 19l7-7 7 7\"></path>\n          </svg>\n        </button>\n        <button class=\"collapse-all-btn\" title=\"Collapse All\">\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 13l-7 7-7-7m14-8l-7 7-7-7\"></path>\n          </svg>\n        </button>\n      </div>\n    `;\n    stateWrapper.appendChild(toolbar);\n    \n    // Add diff summary if available\n    if (diff && (\n        Object.keys(diff.added).length > 0 || \n        Object.keys(diff.updated).length > 0 || \n        Object.keys(diff.removed).length > 0\n    )) {\n      const diffSummary = document.createElement('div');\n      diffSummary.className = 'state-diff-summary';\n      \n      let summaryHTML = '<div class=\"diff-title\">Changes:</div><div class=\"diff-counts\">';\n      \n      if (Object.keys(diff.added).length > 0) {\n        summaryHTML += `<span class=\"diff-added\">+${Object.keys(diff.added).length} added</span>`;\n      }\n      \n      if (Object.keys(diff.updated).length > 0) {\n        summaryHTML += `<span class=\"diff-updated\">~${Object.keys(diff.updated).length} updated</span>`;\n      }\n      \n      if (Object.keys(diff.removed).length > 0) {\n        summaryHTML += `<span class=\"diff-removed\">-${Object.keys(diff.removed).length} removed</span>`;\n      }\n      \n      summaryHTML += '</div>';\n      diffSummary.innerHTML = summaryHTML;\n      stateWrapper.appendChild(diffSummary);\n    }\n    \n    // Create content container\n    const contentContainer = document.createElement('div');\n    contentContainer.className = 'domain-state-content';\n    \n    // Use JSON Formatter if available, otherwise use preformatted text\n    if (this.jsonFormatter) {\n      const formatter = new this.jsonFormatter(state);\n      contentContainer.appendChild(formatter.render());\n      \n      // Add diff highlights if available\n      if (diff) {\n        this.addDiffHighlights(contentContainer, diff);\n      }\n    } else {\n      // Simple JSON display with syntax highlighting\n      const pre = document.createElement('pre');\n      pre.className = 'json-display';\n      pre.textContent = JSON.stringify(state, null, 2);\n      contentContainer.appendChild(pre);\n    }\n    \n    stateWrapper.appendChild(contentContainer);\n    this.container.appendChild(stateWrapper);\n    \n    // Add event listeners\n    this.addEventListeners(stateWrapper);\n  }\n  \n  /**\n   * Adds diff highlights to the rendered JSON\n   * @param container Container element\n   * @param diff State diff object\n   */\n  private addDiffHighlights(container: HTMLElement, diff: Record<string, any>): void {\n    // This is a simple implementation - for a real app, you would need\n    // to walk the DOM and find the specific nodes to highlight based on paths\n    \n    // Get all key elements\n    const keyElements = container.querySelectorAll('.json-formatter-key');\n    \n    keyElements.forEach(keyElement => {\n      const key = keyElement.textContent?.replace(':', '').trim();\n      \n      if (!key) return;\n      \n      // Check if this key is in any of the diff categories\n      if (key in diff.added) {\n        keyElement.parentElement?.classList.add('diff-added');\n      } else if (key in diff.updated) {\n        keyElement.parentElement?.classList.add('diff-updated');\n      } else if (key in diff.removed) {\n        // Removed keys won't be in the current state, so we'd need to\n        // add them separately - this is beyond the scope of this example\n      }\n    });\n  }\n  \n  /**\n   * Adds event listeners to the state viewer\n   * @param container Container element\n   */\n  private addEventListeners(container: HTMLElement): void {\n    // Refresh button\n    const refreshBtn = container.querySelector('.refresh-state-btn');\n    if (refreshBtn) {\n      refreshBtn.addEventListener('click', () => {\n        // Dispatch a custom event that can be handled by the app\n        const event = new CustomEvent('domainstate:refresh');\n        document.dispatchEvent(event);\n      });\n    }\n    \n    // Expand all button\n    const expandBtn = container.querySelector('.expand-all-btn');\n    if (expandBtn) {\n      expandBtn.addEventListener('click', () => {\n        // If using JSONFormatter, find all toggle elements and expand them\n        const toggles = container.querySelectorAll('.json-formatter-toggler-link');\n        toggles.forEach(toggle => {\n          const open = toggle.parentElement?.classList.contains('json-formatter-open');\n          if (!open) {\n            (toggle as HTMLElement).click();\n          }\n        });\n      });\n    }\n    \n    // Collapse all button\n    const collapseBtn = container.querySelector('.collapse-all-btn');\n    if (collapseBtn) {\n      collapseBtn.addEventListener('click', () => {\n        // If using JSONFormatter, find all toggle elements and collapse them\n        const toggles = container.querySelectorAll('.json-formatter-toggler-link');\n        toggles.forEach(toggle => {\n          const open = toggle.parentElement?.classList.contains('json-formatter-open');\n          if (open) {\n            (toggle as HTMLElement).click();\n          }\n        });\n      });\n    }\n  }\n} ", "/**\n * JSON Utility Functions\n * Utilities for working with JSON data\n */\n\n/**\n * Determines the type of a JSON token for syntax highlighting\n * @param token The token to analyze\n * @returns Token type classification\n */\nexport function determineTokenType(token: string): 'property' | 'string' | 'number' | 'boolean' | 'null' | 'punctuation' | 'unknown' {\n  // Handle property names (with quotes and colon)\n  if (/^[\"'].*[\"']\\s*:/.test(token)) {\n    return 'property';\n  }\n  // Handle string values\n  else if (/^[\"'].*[\"']$/.test(token)) {\n    return 'string';\n  }\n  // Handle numeric values\n  else if (/^-?\\d+\\.?\\d*([eE][-+]?\\d+)?$/.test(token)) {\n    return 'number';\n  }\n  // Handle boolean values\n  else if (/^(true|false)$/.test(token)) {\n    return 'boolean';\n  }\n  // Handle null value\n  else if (/^null$/.test(token)) {\n    return 'null';\n  }\n  // Handle punctuation\n  else if (/^[{}\\[\\],]$/.test(token)) {\n    return 'punctuation';\n  }\n  // Unknown token type\n  return 'unknown';\n}\n\n/**\n * Formats JSON string with syntax highlighting\n * @param jsonString JSON string to format\n * @returns HTML string with syntax highlighting\n */\nexport function formatJSON(jsonString: string): string {\n  if (!jsonString) return '';\n  \n  // Function to escape HTML\n  const escapeHtml = (text: string): string => {\n    return text\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#039;');\n  };\n  \n  // Tokenize the JSON string\n  const tokenize = (text: string): string => {\n    // Add line breaks\n    let result = text.replace(/({)|(})|(\\[)|(\\])|(,)/g, '$1$2$3$4$5\\n');\n    \n    // Add indentation\n    let indentLevel = 0;\n    const lines = result.split('\\n');\n    result = lines.map(line => {\n      let indent = ' '.repeat(indentLevel * 2);\n      \n      // Adjust indent level based on current line\n      if (line.includes('}') || line.includes(']')) {\n        indentLevel = Math.max(0, indentLevel - 1);\n        indent = ' '.repeat(indentLevel * 2);\n      }\n      \n      const formattedLine = indent + line;\n      \n      // Adjust indent level for next line\n      if (line.includes('{') || line.includes('[')) {\n        indentLevel++;\n      }\n      \n      return formattedLine;\n    }).join('\\n');\n    \n    // Split into tokens\n    const tokens = result.match(/(\".*?\"|'.*?'|\\{|\\}|\\[|\\]|,|\\d+\\.\\d+|\\d+|true|false|null|[^\",\\{\\}\\[\\]\\s]+)/g) || [];\n    \n    // Apply syntax highlighting to each token\n    return tokens.map(token => {\n      const escapedToken = escapeHtml(token);\n      const tokenType = determineTokenType(token);\n      \n      switch (tokenType) {\n        case 'property':\n          return `<span class=\"json-property\">${escapedToken}</span>`;\n        case 'string':\n          return `<span class=\"json-string\">${escapedToken}</span>`;\n        case 'number':\n          return `<span class=\"json-number\">${escapedToken}</span>`;\n        case 'boolean':\n          return `<span class=\"json-boolean\">${escapedToken}</span>`;\n        case 'null':\n          return `<span class=\"json-null\">${escapedToken}</span>`;\n        case 'punctuation':\n          return `<span class=\"json-punctuation\">${escapedToken}</span>`;\n        default:\n          return escapedToken;\n      }\n    }).join('');\n  };\n  \n  try {\n    // Pretty-print the JSON\n    const obj = JSON.parse(jsonString);\n    const prettyJson = JSON.stringify(obj, null, 2);\n    \n    // Tokenize and highlight\n    return tokenize(prettyJson);\n  } catch (error) {\n    // If parsing fails, just tokenize as is\n    return `<span class=\"json-error\">Invalid JSON: ${escapeHtml(String(error))}</span><br>${tokenize(jsonString)}`;\n  }\n}\n\n/**\n * Pretty-prints JSON data for display\n * @param data Data to pretty-print\n * @returns Formatted string\n */\nexport function prettyPrintJSON(data: any): string {\n  try {\n    return JSON.stringify(data, null, 2);\n  } catch (error) {\n    return `Error formatting JSON: ${error instanceof Error ? error.message : String(error)}`;\n  }\n}\n\n/**\n * Safely parses a JSON string\n * @param jsonString String to parse\n * @param fallback Fallback value if parsing fails\n * @returns Parsed object or fallback value\n */\nexport function safeParseJSON<T>(jsonString: string, fallback: T): T {\n  try {\n    return JSON.parse(jsonString) as T;\n  } catch (error) {\n    console.error('Error parsing JSON:', error);\n    return fallback;\n  }\n}\n\n/**\n * Gets a value from an object using a dot-notation path\n * @param obj Object to extract from\n * @param path Path to the property (e.g., 'user.address.city')\n * @param defaultValue Default value if property doesn't exist\n * @returns Extracted value or default value\n */\nexport function getValueByPath<T>(obj: any, path: string, defaultValue: T): T {\n  if (!obj || !path) return defaultValue;\n  \n  try {\n    const parts = path.split('.');\n    let current = obj;\n    \n    for (const part of parts) {\n      if (current === undefined || current === null) {\n        return defaultValue;\n      }\n      \n      current = current[part];\n    }\n    \n    return current !== undefined ? current : defaultValue;\n  } catch (error) {\n    console.error(`Error extracting path ${path}:`, error);\n    return defaultValue;\n  }\n} ", "/**\n * String Utility Functions\n * Various utilities for string manipulation\n */\n\n/**\n * Truncates a string to the specified length and adds an ellipsis\n * @param str String to truncate\n * @param maxLength Maximum length before truncation\n * @returns Truncated string\n */\nexport function truncate(str: string, maxLength: number): string {\n  if (!str) return '';\n  if (str.length <= maxLength) return str;\n  return str.substring(0, maxLength) + '...';\n}\n\n/**\n * Capitalizes the first letter of a string\n * @param str String to capitalize\n * @returns Capitalized string\n */\nexport function capitalize(str: string): string {\n  if (!str) return '';\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n * Converts a camelCase string to Title Case\n * @param camelCase String in camelCase\n * @returns String in Title Case\n */\nexport function camelToTitleCase(camelCase: string): string {\n  if (!camelCase) return '';\n  \n  // Add space before capital letters and capitalize first letter\n  return capitalize(\n    camelCase.replace(/([A-Z])/g, ' $1')\n  ).trim();\n}\n\n/**\n * Converts a string to camelCase\n * @param str String to convert\n * @returns camelCase string\n */\nexport function toCamelCase(str: string): string {\n  if (!str) return '';\n  \n  // Replace spaces, hyphens and underscores with spaces, then camelCase\n  return str\n    .replace(/[-_\\s]+(.)?/g, (_, c) => c ? c.toUpperCase() : '')\n    .replace(/^[A-Z]/, c => c.toLowerCase());\n}\n\n/**\n * Converts a string to snake_case\n * @param str String to convert\n * @returns snake_case string\n */\nexport function toSnakeCase(str: string): string {\n  if (!str) return '';\n  \n  // Handle camelCase\n  let result = str.replace(/([a-z])([A-Z])/g, '$1_$2');\n  \n  // Handle spaces, hyphens, and other separators\n  result = result.replace(/[\\s-]+/g, '_');\n  \n  return result.toLowerCase();\n}\n\n/**\n * Converts a string to kebab-case\n * @param str String to convert\n * @returns kebab-case string\n */\nexport function toKebabCase(str: string): string {\n  if (!str) return '';\n  \n  // Handle camelCase\n  let result = str.replace(/([a-z])([A-Z])/g, '$1-$2');\n  \n  // Handle spaces, underscores, and other separators\n  result = result.replace(/[\\s_]+/g, '-');\n  \n  return result.toLowerCase();\n}\n\n/**\n * Escapes HTML special characters in a string\n * @param html String with potential HTML content\n * @returns Escaped HTML string\n */\nexport function escapeHtml(html: string): string {\n  if (!html) return '';\n  \n  return html\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\n/**\n * Strips HTML tags from a string\n * @param html String with HTML content\n * @returns String without HTML tags\n */\nexport function stripHtml(html: string): string {\n  if (!html) return '';\n  \n  // Remove HTML tags using regex\n  return html.replace(/<[^>]*>/g, '');\n}\n\n/**\n * Generates a UUID v4 string\n * @returns UUID v4 string\n */\nexport function generateUuid(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n/**\n * Checks if a string is a valid URL\n * @param str String to check\n * @returns Whether the string is a valid URL\n */\nexport function isValidUrl(str: string): boolean {\n  try {\n    new URL(str);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Checks if a string is a valid email address\n * @param email String to check\n * @returns Whether the string is a valid email\n */\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n/**\n * Gets the file extension from a filename\n * @param filename Filename to parse\n * @returns File extension without the dot\n */\nexport function getFileExtension(filename: string): string {\n  if (!filename) return '';\n  \n  const parts = filename.split('.');\n  if (parts.length === 1) return '';\n  \n  return parts[parts.length - 1].toLowerCase();\n}\n\n/**\n * Formats a number as bytes with an appropriate unit\n * @param bytes Number of bytes\n * @param decimals Number of decimal places\n * @returns Formatted string (e.g., \"1.5 KB\")\n */\nexport function formatBytes(bytes: number, decimals: number = 2): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + ' ' + sizes[i];\n}\n\n/**\n * Pluralizes a word based on count\n * @param word Word to pluralize\n * @param count Count to determine pluralization\n * @returns Pluralized word\n */\nexport function pluralize(word: string, count: number): string {\n  if (count === 1) return word;\n  \n  // Very simple English pluralization rules\n  if (word.endsWith('y')) {\n    return word.slice(0, -1) + 'ies';\n  } else if (word.endsWith('s') || word.endsWith('x') || word.endsWith('z') || \n             word.endsWith('ch') || word.endsWith('sh')) {\n    return word + 'es';\n  } else {\n    return word + 's';\n  }\n} ", "/**\n * ResponseViewer Component\n * Displays API response data with formatting and syntax highlighting\n */\n\nimport { formatJSON } from '../utils/json-utils';\nimport { escapeHtml } from '../utils/string-utils';\nimport { setHTML, createElement, ExtendedElementCreationOptions, getById } from '../utils/dom-utils';\nimport { logger } from '../utils/logger';\n\n// Define a minimal JSONFormatter interface to avoid TypeScript errors\ninterface JSONFormatterInterface {\n  new(data: any): {\n    render(): HTMLElement;\n  };\n}\n\n/**\n * Response viewer options interface\n */\nexport interface ResponseViewerOptions {\n  containerId?: string;        // ID of the container element\n  responseHeadersId?: string;  // ID of the response headers element\n  responseBodyId?: string;     // ID of the response body element\n  responseStatusId?: string;   // ID of the response status element\n  formatter?: JSONFormatterInterface;  // JSON formatter instance or class\n}\n\n/**\n * Response data interface\n */\nexport interface ResponseData {\n  status: number;\n  statusText: string;\n  headers: Record<string, string>;\n  body: any;\n  time?: number;\n  size?: number;\n  url?: string;\n  method?: string;\n  formattedTime?: string;\n}\n\n/**\n * Error data interface\n */\nexport interface ErrorData {\n  message: string;\n  details?: string;\n  code?: number;\n  stack?: string;\n}\n\n/**\n * Default response viewer options\n */\nconst DEFAULT_OPTIONS: ResponseViewerOptions = {\n  containerId: 'response-container',\n  responseHeadersId: 'response-headers',\n  responseBodyId: 'response-body',\n  responseStatusId: 'response-status',\n};\n\n/**\n * ResponseViewer class\n */\nexport class ResponseViewer {\n  private options: Required<ResponseViewerOptions>;\n  private container: HTMLElement | null;\n  private responseHeaders: HTMLElement | null;\n  private responseBody: HTMLElement | null;\n  private responseStatus: HTMLElement | null;\n  private currentResponse: ResponseData | null;\n  private currentHeaders: Record<string, string>;\n  private currentStatus: number;\n  private formatter: JSONFormatterInterface | null;\n  \n  /**\n   * Creates a new ResponseViewer instance\n   * @param options Component options\n   */\n  constructor(options: Partial<ResponseViewerOptions> = {}) {\n    this.options = { ...DEFAULT_OPTIONS, ...options } as Required<ResponseViewerOptions>;\n    \n    this.container = getById(this.options.containerId);\n    this.responseHeaders = getById(this.options.responseHeadersId);\n    this.responseBody = getById(this.options.responseBodyId);\n    this.responseStatus = getById(this.options.responseStatusId);\n    \n    this.currentResponse = null;\n    this.currentHeaders = {};\n    this.currentStatus = 0;\n    this.formatter = this.options.formatter || (typeof window !== 'undefined' && (window as any).JSONFormatter ? (window as any).JSONFormatter : null);\n    \n    if (!this.container) {\n      logger.warn(`ResponseViewer: Container element with ID \"${this.options.containerId}\" not found`);\n    }\n  }\n  \n  /**\n   * Displays API response data\n   * @param response Response data\n   * @param headers Response headers\n   * @param status HTTP status code\n   */\n  display(response: any, headers: Record<string, string> = {}, status: number = 200): void {\n    this.currentResponse = response;\n    this.currentHeaders = headers;\n    this.currentStatus = status;\n    \n    // Update UI\n    this.displayResponseHeaders();\n    this.displayResponseBody();\n    \n    // Show the container\n    this.showResponseContainer();\n  }\n  \n  /**\n   * Shows the response container\n   */\n  showResponseContainer(): void {\n    if (this.container) {\n      this.container.style.display = '';\n    }\n  }\n  \n  /**\n   * Clears the response viewer\n   */\n  clear(): void {\n    this.currentResponse = null;\n    this.currentHeaders = {};\n    this.currentStatus = 0;\n    \n    if (this.responseHeaders) {\n      this.responseHeaders.innerHTML = '';\n    }\n    \n    if (this.responseBody) {\n      this.responseBody.innerHTML = '';\n    }\n    \n    if (this.container) {\n      this.container.style.display = 'none';\n    }\n  }\n  \n  /**\n   * Gets the current response data\n   * @returns Current response data\n   */\n  getResponse(): any {\n    return this.currentResponse;\n  }\n  \n  /**\n   * Gets the current response headers\n   * @returns Current response headers\n   */\n  getHeaders(): Record<string, string> {\n    return { ...this.currentHeaders };\n  }\n  \n  /**\n   * Gets the current HTTP status code\n   * @returns Current HTTP status code\n   */\n  getStatus(): number {\n    return this.currentStatus;\n  }\n  \n  /**\n   * Displays response headers\n   */\n  private displayResponseHeaders(): void {\n    if (!this.responseHeaders) return;\n    \n    // Create headers HTML\n    const statusClass = this.getStatusClass(this.currentStatus);\n    const statusText = this.getStatusText(this.currentStatus);\n    \n    let html = `\n      <div class=\"mb-2\">\n        <span class=\"font-semibold\">Status:</span> \n        <span class=\"${statusClass}\">${this.currentStatus} ${statusText}</span>\n      </div>\n    `;\n    \n    if (Object.keys(this.currentHeaders).length > 0) {\n      html += '<div class=\"mb-2\"><span class=\"font-semibold\">Headers:</span></div>';\n      html += '<ul class=\"text-sm ml-2 border-l-2 border-gray-300 pl-3 mb-4\">';\n      \n      Object.entries(this.currentHeaders).forEach(([name, value]) => {\n        html += `<li><span class=\"font-medium\">${escapeHtml(name)}</span>: ${escapeHtml(String(value))}</li>`;\n      });\n      \n      html += '</ul>';\n    }\n    \n    setHTML(this.responseHeaders, html);\n  }\n  \n  /**\n   * Displays response body\n   */\n  private displayResponseBody(): void {\n    if (!this.responseBody || this.currentResponse === null) return;\n    \n    try {\n      // Check if response is JSON\n      if (typeof this.currentResponse === 'object') {\n        this.displayJsonResponse(this.currentResponse);\n      } else if (typeof this.currentResponse === 'string') {\n        // Try to parse as JSON\n        try {\n          const jsonObject = JSON.parse(this.currentResponse);\n          this.displayJsonResponse(jsonObject);\n        } catch (e) {\n          // Not JSON, display as text\n          this.displayTextResponse(this.currentResponse);\n        }\n      } else {\n        // Convert to string and display as text\n        this.displayTextResponse(String(this.currentResponse));\n      }\n    } catch (error) {\n      // Handle any display errors\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error('Error displaying response:', errorMessage);\n      \n      setHTML(\n        this.responseBody,\n        `<div class=\"text-red-500 p-2\">Error displaying response: ${escapeHtml(errorMessage)}</div>`\n      );\n    }\n  }\n  \n  /**\n   * Displays JSON response with formatter\n   * @param json JSON object to display\n   */\n  private displayJsonResponse(json: any): void {\n    if (!this.responseBody) return;\n    \n    // First clear any existing content\n    this.responseBody.innerHTML = '';\n    \n    // Display using JSONFormatter if available\n    if (this.formatter) {\n      try {\n        const formatter = new this.formatter(json);\n        this.responseBody.appendChild(formatter.render());\n        return;\n      } catch (error) {\n        logger.warn('Error using JSONFormatter, falling back to basic formatting:', error);\n        // Fall back to basic formatting if JSONFormatter fails\n      }\n    }\n    \n    // Use basic JSON formatting as fallback\n    const formattedJson = formatJSON(JSON.stringify(json));\n    const wrapper = createElement<HTMLDivElement>('div', {\n      class: 'json-viewer overflow-auto'\n    } as ExtendedElementCreationOptions);\n    wrapper.innerHTML = formattedJson;\n    this.responseBody.appendChild(wrapper);\n  }\n  \n  /**\n   * Displays text response\n   * @param text Text to display\n   */\n  private displayTextResponse(text: string): void {\n    if (!this.responseBody) return;\n    \n    const isHtml = text.trim().startsWith('<') && text.trim().endsWith('>');\n    \n    if (isHtml) {\n      // Display HTML content in an iframe for safety\n      const iframe = createElement<HTMLIFrameElement>('iframe', {\n        class: 'w-full h-96 border border-gray-300 rounded',\n        sandbox: 'allow-same-origin'\n      } as ExtendedElementCreationOptions);\n      \n      this.responseBody.innerHTML = '';\n      this.responseBody.appendChild(iframe);\n      \n      // Now we can access contentDocument and contentWindow properties\n      if (iframe.contentDocument) {\n        iframe.contentDocument.open();\n        iframe.contentDocument.write(text);\n        iframe.contentDocument.close();\n      } else if (iframe.contentWindow && iframe.contentWindow.document) {\n        iframe.contentWindow.document.open();\n        iframe.contentWindow.document.write(text);\n        iframe.contentWindow.document.close();\n      }\n    } else {\n      // Display as preformatted text\n      const pre = createElement<HTMLPreElement>('pre', {\n        class: 'bg-gray-100 p-4 rounded overflow-auto text-sm'\n      } as ExtendedElementCreationOptions);\n      \n      pre.textContent = text;\n      this.responseBody.innerHTML = '';\n      this.responseBody.appendChild(pre);\n    }\n  }\n  \n  /**\n   * Gets the appropriate CSS class for a status code\n   * @param status HTTP status code\n   * @returns CSS class name\n   */\n  private getStatusClass(status: number): string {\n    if (status >= 200 && status < 300) {\n      return 'text-green-600 font-medium';\n    } else if (status >= 300 && status < 400) {\n      return 'text-blue-600 font-medium';\n    } else if (status >= 400 && status < 500) {\n      return 'text-amber-600 font-medium';\n    } else if (status >= 500) {\n      return 'text-red-600 font-medium';\n    } else {\n      return 'text-gray-600 font-medium';\n    }\n  }\n  \n  /**\n   * Gets status text for a status code\n   * @param status HTTP status code\n   * @returns Status text\n   */\n  private getStatusText(status: number): string {\n    const statusTexts: Record<number, string> = {\n      200: 'OK',\n      201: 'Created',\n      204: 'No Content',\n      301: 'Moved Permanently',\n      302: 'Found',\n      304: 'Not Modified',\n      400: 'Bad Request',\n      401: 'Unauthorized',\n      403: 'Forbidden',\n      404: 'Not Found',\n      405: 'Method Not Allowed',\n      422: 'Unprocessable Entity',\n      429: 'Too Many Requests',\n      500: 'Internal Server Error',\n      502: 'Bad Gateway',\n      503: 'Service Unavailable',\n      504: 'Gateway Timeout'\n    };\n    \n    return statusTexts[status] || '';\n  }\n\n  /**\n   * Show an API response in the viewer\n   * @param response The API response object to display\n   */\n  showResponse(response: any): void {\n    if (!response) {\n      this.clear();\n      return;\n    }\n    \n    // Store the response data\n    this.currentResponse = response;\n    \n    // Extract headers and status if available\n    if (response.headers) {\n      this.currentHeaders = response.headers;\n    }\n    \n    if (response.status) {\n      this.currentStatus = response.status;\n    }\n    \n    // Update UI\n    this.displayResponseHeaders();\n    this.displayResponseBody();\n    \n    // Show the response container\n    this.showResponseContainer();\n  }\n\n  /**\n   * Show an error in the viewer\n   * @param error The error to display\n   */\n  showError(error: ErrorData): void {\n    if (!error) {\n      this.clear();\n      return;\n    }\n    \n    // Create response from error\n    const response: ResponseData = {\n      status: error.code || 0,\n      statusText: 'Error',\n      headers: {},\n      body: {\n        error: error.message,\n        details: error.details || '',\n        stack: error.stack || ''\n      }\n    };\n    \n    // Store the response data\n    this.currentResponse = response;\n    \n    // Update UI\n    this.displayResponseStatus('error');\n    this.displayResponseBody();\n    \n    // Show the response container\n    this.showResponseContainer();\n  }\n\n  /**\n   * Displays response status\n   */\n  private displayResponseStatus(type: 'success' | 'error' | 'warning' = 'success'): void {\n    if (!this.responseStatus || !this.currentResponse) return;\n    \n    const statusCode = this.currentResponse.status;\n    const statusText = this.currentResponse.statusText;\n    \n    let statusClass = 'status-unknown';\n    \n    if (type === 'error' || statusCode >= 400) {\n      statusClass = 'status-error';\n    } else if (statusCode >= 200 && statusCode < 300) {\n      statusClass = 'status-success';\n    } else if (statusCode >= 300 && statusCode < 400) {\n      statusClass = 'status-redirect';\n    } else if (statusCode === 0) {\n      statusClass = 'status-error';\n    }\n    \n    // Format response time if available\n    let timeInfo = '';\n    if (this.currentResponse.time) {\n      const formattedTime = this.currentResponse.formattedTime || `${this.currentResponse.time}ms`;\n      timeInfo = `<span class=\"response-time\">${formattedTime}</span>`;\n    }\n    \n    // Format response size if available\n    let sizeInfo = '';\n    if (this.currentResponse.size) {\n      sizeInfo = `<span class=\"response-size\">${this.formatBytes(this.currentResponse.size)}</span>`;\n    }\n    \n    this.responseStatus.innerHTML = `\n      <div class=\"status-code ${statusClass}\">${statusCode}</div>\n      <div class=\"status-text\">${statusText}</div>\n      ${timeInfo}\n      ${sizeInfo}\n    `;\n  }\n\n  /**\n   * Formats bytes to human-readable size\n   */\n  private formatBytes(bytes: number, decimals: number = 2): string {\n    if (bytes === 0) return '0 Bytes';\n    \n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n    return parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + ' ' + sizes[i];\n  }\n} ", "/**\n * VariableExtractor Component\n * Extracts variables from API response data using path expressions\n */\n\nimport { getValueByPath } from '../utils/json-utils';\nimport { logger } from '../utils/logger';\n\n// Define variable extraction pattern\nexport interface VariableExtractionPattern {\n  name: string;\n  path: string;\n  description?: string;\n  required?: boolean;\n  defaultValue?: any;\n}\n\n// Options for variable extractor\nexport interface VariableExtractorOptions {\n  onVariableExtracted?: (name: string, value: any) => void;\n  onExtractionComplete?: (variables: Record<string, any>) => void;\n  onExtractionError?: (error: Error, pattern: VariableExtractionPattern) => void;\n}\n\n/**\n * Class for extracting variables from response data\n */\nexport class VariableExtractor {\n  private options: VariableExtractorOptions;\n  private extractionPatterns: VariableExtractionPattern[];\n  private extractedVariables: Record<string, any>;\n  \n  /**\n   * Creates a new variable extractor\n   * @param options Options for the extractor\n   */\n  constructor(options: VariableExtractorOptions = {}) {\n    this.options = options;\n    this.extractionPatterns = [];\n    this.extractedVariables = {};\n  }\n  \n  /**\n   * Adds an extraction pattern\n   * @param pattern Extraction pattern to add\n   * @returns This instance for chaining\n   */\n  addPattern(pattern: VariableExtractionPattern): VariableExtractor {\n    this.extractionPatterns.push(pattern);\n    return this;\n  }\n  \n  /**\n   * Adds multiple extraction patterns\n   * @param patterns Extraction patterns to add\n   * @returns This instance for chaining\n   */\n  addPatterns(patterns: VariableExtractionPattern[]): VariableExtractor {\n    this.extractionPatterns.push(...patterns);\n    return this;\n  }\n  \n  /**\n   * Removes an extraction pattern by name\n   * @param name Name of the pattern to remove\n   * @returns This instance for chaining\n   */\n  removePattern(name: string): VariableExtractor {\n    this.extractionPatterns = this.extractionPatterns.filter(pattern => pattern.name !== name);\n    return this;\n  }\n  \n  /**\n   * Clears all extraction patterns\n   * @returns This instance for chaining\n   */\n  clearPatterns(): VariableExtractor {\n    this.extractionPatterns = [];\n    return this;\n  }\n  \n  /**\n   * Gets all extraction patterns\n   * @returns Array of extraction patterns\n   */\n  getPatterns(): VariableExtractionPattern[] {\n    return [...this.extractionPatterns];\n  }\n  \n  /**\n   * Gets a specific extraction pattern by name\n   * @param name Name of the pattern to get\n   * @returns The pattern or undefined if not found\n   */\n  getPattern(name: string): VariableExtractionPattern | undefined {\n    return this.extractionPatterns.find(pattern => pattern.name === name);\n  }\n  \n  /**\n   * Extracts variables from response data\n   * @param data Response data to extract from\n   * @param clearExisting Whether to clear existing extracted variables\n   * @returns Object containing extracted variables\n   */\n  extract(data: any, clearExisting: boolean = true): Record<string, any> {\n    // Clear existing variables if needed\n    if (clearExisting) {\n      this.extractedVariables = {};\n    }\n    \n    // Extract variables based on patterns\n    for (const pattern of this.extractionPatterns) {\n      try {\n        // Extract the value using the path\n        const value = getValueByPath(data, pattern.path, pattern.defaultValue);\n        \n        // Handle required fields\n        if (pattern.required && (value === undefined || value === null)) {\n          throw new Error(`Required variable '${pattern.name}' not found at path '${pattern.path}'`);\n        }\n        \n        // Store the extracted variable\n        this.extractedVariables[pattern.name] = value;\n        \n        // Call the variable extracted callback\n        if (this.options.onVariableExtracted) {\n          this.options.onVariableExtracted(pattern.name, value);\n        }\n      } catch (error) {\n        // Handle extraction errors\n        const extractionError = error instanceof Error ? error : new Error(String(error));\n        \n        logger.warn(`Error extracting variable '${pattern.name}': ${extractionError.message}`);\n        \n        // Call the error callback if provided\n        if (this.options.onExtractionError) {\n          this.options.onExtractionError(extractionError, pattern);\n        }\n        \n        // Use default value if provided\n        if (pattern.defaultValue !== undefined) {\n          this.extractedVariables[pattern.name] = pattern.defaultValue;\n        }\n      }\n    }\n    \n    // Call the extraction complete callback\n    if (this.options.onExtractionComplete) {\n      this.options.onExtractionComplete({ ...this.extractedVariables });\n    }\n    \n    return { ...this.extractedVariables };\n  }\n  \n  /**\n   * Gets all extracted variables\n   * @returns Object containing all extracted variables\n   */\n  getVariables(): Record<string, any> {\n    return { ...this.extractedVariables };\n  }\n  \n  /**\n   * Gets a specific variable value\n   * @param name Name of the variable\n   * @returns Variable value or undefined if not found\n   */\n  getVariable(name: string): any {\n    return this.extractedVariables[name];\n  }\n  \n  /**\n   * Sets a variable value manually\n   * @param name Name of the variable\n   * @param value Value to set\n   * @returns This instance for chaining\n   */\n  setVariable(name: string, value: any): VariableExtractor {\n    this.extractedVariables[name] = value;\n    \n    // Call the variable extracted callback\n    if (this.options.onVariableExtracted) {\n      this.options.onVariableExtracted(name, value);\n    }\n    \n    return this;\n  }\n  \n  /**\n   * Clears all extracted variables\n   * @returns This instance for chaining\n   */\n  clearVariables(): VariableExtractor {\n    this.extractedVariables = {};\n    return this;\n  }\n  \n  /**\n   * Extracts variables from a JSON response string\n   * @param jsonString JSON string to extract from\n   * @param clearExisting Whether to clear existing extracted variables\n   * @returns Object containing extracted variables\n   */\n  extractFromJson(jsonString: string, clearExisting: boolean = true): Record<string, any> {\n    try {\n      const data = JSON.parse(jsonString);\n      return this.extract(data, clearExisting);\n    } catch (error) {\n      const parseError = error instanceof Error ? error : new Error(String(error));\n      logger.error('Error parsing JSON:', parseError.message);\n      \n      if (clearExisting) {\n        this.extractedVariables = {};\n      }\n      \n      return { ...this.extractedVariables };\n    }\n  }\n  \n  /**\n   * Parses a response and extracts variables based on content type\n   * @param response Response object\n   * @param contentType Content type of the response\n   * @param clearExisting Whether to clear existing extracted variables\n   * @returns Object containing extracted variables\n   */\n  extractFromResponse(\n    response: Response | any, \n    contentType?: string, \n    clearExisting: boolean = true\n  ): Promise<Record<string, any>> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // If it's a fetch Response object\n        if (response instanceof Response) {\n          // Determine content type\n          const responseContentType = contentType || response.headers.get('content-type') || '';\n          \n          // Handle different content types\n          if (responseContentType.includes('application/json')) {\n            const jsonData = await response.json();\n            const variables = this.extract(jsonData, clearExisting);\n            resolve(variables);\n          } else if (responseContentType.includes('text/')) {\n            const textData = await response.text();\n            \n            // Try to parse as JSON anyway\n            try {\n              const jsonData = JSON.parse(textData);\n              const variables = this.extract(jsonData, clearExisting);\n              resolve(variables);\n            } catch {\n              // Not JSON, just extract from the raw text\n              const variables = this.extract({ text: textData }, clearExisting);\n              resolve(variables);\n            }\n          } else {\n            // Unknown content type, use the response object as is\n            const variables = this.extract(response, clearExisting);\n            resolve(variables);\n          }\n        } else {\n          // Not a Response object, use as is\n          const variables = this.extract(response, clearExisting);\n          resolve(variables);\n        }\n      } catch (error) {\n        const extractionError = error instanceof Error ? error : new Error(String(error));\n        logger.error('Error extracting variables from response:', extractionError.message);\n        reject(extractionError);\n      }\n    });\n  }\n\n  /**\n   * Shows the variable extraction modal\n   * @param responseData Response data to extract variables from\n   */\n  showExtractionModal(responseData: any): void {\n    // Create modal if it doesn't exist\n    this.createModal();\n    \n    // Store response data for extraction\n    this._responseData = responseData;\n    \n    // Populate the path input with suggestions if possible\n    this.suggestPaths(responseData);\n    \n    // Show the modal\n    const modal = document.getElementById('variable-extractor-modal');\n    if (modal) {\n      modal.classList.remove('hidden');\n    }\n  }\n\n  /**\n   * Creates the variable extraction modal\n   */\n  private createModal(): void {\n    // Check if modal already exists\n    if (document.getElementById('variable-extractor-modal')) {\n      return;\n    }\n    \n    // Create modal element\n    const modal = document.createElement('div');\n    modal.id = 'variable-extractor-modal';\n    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden';\n    \n    // Create modal content\n    modal.innerHTML = `\n      <div class=\"bg-bg-card p-6 rounded-lg shadow-xl w-full max-w-lg max-h-[90vh] overflow-auto\">\n        <div class=\"flex justify-between items-center mb-4\">\n          <h2 class=\"text-lg font-bold\">Extract Variables</h2>\n          <button id=\"close-extractor-modal\" class=\"text-text-muted hover:text-text\">\n            <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n            </svg>\n          </button>\n        </div>\n        \n        <div class=\"space-y-4\">\n          <div>\n            <label class=\"block text-sm font-medium mb-1\">Variable Name</label>\n            <input id=\"variable-name-input\" type=\"text\" class=\"w-full px-3 py-2 border border-border rounded bg-bg text-sm\" placeholder=\"e.g. userId\">\n          </div>\n          \n          <div>\n            <label class=\"block text-sm font-medium mb-1\">JSON Path</label>\n            <div class=\"flex\">\n              <input id=\"variable-path-input\" type=\"text\" class=\"flex-1 px-3 py-2 border border-border rounded-l bg-bg text-sm\" placeholder=\"e.g. data.user.id\">\n              <button id=\"test-path-btn\" class=\"px-3 py-2 bg-primary-600 text-white rounded-r\">Test</button>\n            </div>\n            <div id=\"path-suggestion-container\" class=\"mt-1 text-xs text-text-muted\"></div>\n          </div>\n          \n          <div>\n            <label class=\"block text-sm font-medium mb-1\">Description (optional)</label>\n            <input id=\"variable-description-input\" type=\"text\" class=\"w-full px-3 py-2 border border-border rounded bg-bg text-sm\" placeholder=\"Optional description\">\n          </div>\n          \n          <div class=\"flex items-center\">\n            <input id=\"variable-required-checkbox\" type=\"checkbox\" class=\"mr-2\">\n            <label for=\"variable-required-checkbox\" class=\"text-sm\">Required (extraction fails if not found)</label>\n          </div>\n          \n          <div>\n            <label class=\"block text-sm font-medium mb-1\">Default Value (optional)</label>\n            <input id=\"variable-default-input\" type=\"text\" class=\"w-full px-3 py-2 border border-border rounded bg-bg text-sm\" placeholder=\"Default value if not found\">\n          </div>\n          \n          <div id=\"test-result-container\" class=\"mt-2 p-3 border border-border rounded bg-bg-sidebar hidden\">\n            <div class=\"text-sm font-medium mb-1\">Test Result:</div>\n            <div id=\"test-result\" class=\"text-sm font-mono break-all\"></div>\n          </div>\n        </div>\n        \n        <div class=\"flex justify-end mt-6 space-x-2\">\n          <button id=\"cancel-extraction-btn\" class=\"px-4 py-2 border border-border rounded text-text-muted hover:bg-bg-sidebar\">\n            Cancel\n          </button>\n          <button id=\"add-extraction-btn\" class=\"px-4 py-2 bg-primary-600 text-white rounded hover:bg-primary-700\">\n            Add Variable\n          </button>\n        </div>\n      </div>\n    `;\n    \n    // Add modal to body\n    document.body.appendChild(modal);\n    \n    // Set up event listeners\n    this.setupModalEventListeners();\n  }\n\n  /**\n   * Sets up event listeners for the variable extraction modal\n   */\n  private setupModalEventListeners(): void {\n    // Close button\n    const closeBtn = document.getElementById('close-extractor-modal');\n    if (closeBtn) {\n      closeBtn.addEventListener('click', () => this.hideModal());\n    }\n    \n    // Cancel button\n    const cancelBtn = document.getElementById('cancel-extraction-btn');\n    if (cancelBtn) {\n      cancelBtn.addEventListener('click', () => this.hideModal());\n    }\n    \n    // Test path button\n    const testPathBtn = document.getElementById('test-path-btn');\n    if (testPathBtn) {\n      testPathBtn.addEventListener('click', () => this.testPath());\n    }\n    \n    // Add variable button\n    const addBtn = document.getElementById('add-extraction-btn');\n    if (addBtn) {\n      addBtn.addEventListener('click', () => this.addVariableFromModal());\n    }\n    \n    // Path input (test on Enter key)\n    const pathInput = document.getElementById('variable-path-input');\n    if (pathInput) {\n      pathInput.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') {\n          this.testPath();\n        }\n      });\n    }\n  }\n\n  /**\n   * Hides the variable extraction modal\n   */\n  private hideModal(): void {\n    const modal = document.getElementById('variable-extractor-modal');\n    if (modal) {\n      modal.classList.add('hidden');\n    }\n  }\n\n  /**\n   * Tests the current path against the response data\n   */\n  private testPath(): void {\n    if (!this._responseData) {\n      this.showTestResult('No response data available', false);\n      return;\n    }\n    \n    const pathInput = document.getElementById('variable-path-input') as HTMLInputElement;\n    if (!pathInput) return;\n    \n    const path = pathInput.value.trim();\n    if (!path) {\n      this.showTestResult('Please enter a path', false);\n      return;\n    }\n    \n    try {\n      const value = getValueByPath(this._responseData, path, undefined);\n      if (value === undefined) {\n        this.showTestResult('Path not found in response data', false);\n      } else {\n        this.showTestResult(typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value), true);\n      }\n    } catch (error) {\n      this.showTestResult(`Error: ${error instanceof Error ? error.message : String(error)}`, false);\n    }\n  }\n\n  /**\n   * Shows the test result\n   * @param result Result to show\n   * @param success Whether the test was successful\n   */\n  private showTestResult(result: string, success: boolean): void {\n    const resultContainer = document.getElementById('test-result-container');\n    const resultElement = document.getElementById('test-result');\n    \n    if (resultContainer && resultElement) {\n      resultContainer.classList.remove('hidden');\n      resultContainer.classList.toggle('border-green-500', success);\n      resultContainer.classList.toggle('border-red-500', !success);\n      resultContainer.classList.toggle('bg-green-50', success);\n      resultContainer.classList.toggle('bg-red-50', !success);\n      \n      resultElement.textContent = result;\n    }\n  }\n\n  /**\n   * Adds a variable from the modal inputs\n   */\n  private addVariableFromModal(): void {\n    // Get input values\n    const nameInput = document.getElementById('variable-name-input') as HTMLInputElement;\n    const pathInput = document.getElementById('variable-path-input') as HTMLInputElement;\n    const descriptionInput = document.getElementById('variable-description-input') as HTMLInputElement;\n    const requiredCheckbox = document.getElementById('variable-required-checkbox') as HTMLInputElement;\n    const defaultInput = document.getElementById('variable-default-input') as HTMLInputElement;\n    \n    if (!nameInput || !pathInput) return;\n    \n    const name = nameInput.value.trim();\n    const path = pathInput.value.trim();\n    \n    // Validate inputs\n    if (!name) {\n      this.showTestResult('Please enter a variable name', false);\n      return;\n    }\n    \n    if (!path) {\n      this.showTestResult('Please enter a JSON path', false);\n      return;\n    }\n    \n    // Create extraction pattern\n    const pattern: VariableExtractionPattern = {\n      name,\n      path,\n      description: descriptionInput?.value.trim() || undefined,\n      required: requiredCheckbox?.checked || false,\n      defaultValue: defaultInput?.value.trim() || undefined\n    };\n    \n    // Add pattern\n    this.addPattern(pattern);\n    \n    // Extract variable if response data is available\n    if (this._responseData) {\n      try {\n        const value = getValueByPath(this._responseData, path, pattern.defaultValue);\n        this.setVariable(name, value);\n        \n        // Show success message\n        this.showTestResult(`Variable '${name}' extracted successfully`, true);\n        \n        // Hide modal after a short delay\n        setTimeout(() => this.hideModal(), 1000);\n      } catch (error) {\n        this.showTestResult(`Error extracting variable: ${error instanceof Error ? error.message : String(error)}`, false);\n      }\n    } else {\n      // No response data, just add the pattern\n      this.showTestResult(`Pattern added, but no response data to extract from`, true);\n      \n      // Hide modal after a short delay\n      setTimeout(() => this.hideModal(), 1000);\n    }\n  }\n\n  /**\n   * Suggests paths based on response data\n   * @param data Response data to suggest paths from\n   */\n  private suggestPaths(data: any): void {\n    if (!data || typeof data !== 'object') return;\n    \n    const suggestionsContainer = document.getElementById('path-suggestion-container');\n    if (!suggestionsContainer) return;\n    \n    // Find common or important paths\n    const suggestions: string[] = [];\n    \n    // Helper function to recursively find paths up to a certain depth\n    const findPaths = (obj: any, currentPath: string = '', depth: number = 0) => {\n      if (depth > 3 || typeof obj !== 'object' || obj === null) return;\n      \n      // Add primitive values or arrays with primitives\n      if (Array.isArray(obj)) {\n        if (obj.length > 0 && typeof obj[0] !== 'object') {\n          suggestions.push(`${currentPath}[0]`);\n        } else if (obj.length > 0) {\n          // Check first array item for common fields\n          findPaths(obj[0], `${currentPath}[0]`, depth + 1);\n        }\n        return;\n      }\n      \n      // Check each property\n      for (const key of Object.keys(obj)) {\n        const path = currentPath ? `${currentPath}.${key}` : key;\n        \n        // Add this path if it's a primitive or empty object\n        if (typeof obj[key] !== 'object' || obj[key] === null) {\n          suggestions.push(path);\n        } else {\n          // Recursively search deeper\n          findPaths(obj[key], path, depth + 1);\n        }\n        \n        // Limit suggestions to 10\n        if (suggestions.length >= 10) return;\n      }\n    };\n    \n    // Find paths\n    findPaths(data);\n    \n    // Display suggestions\n    if (suggestions.length > 0) {\n      const html = `\n        <div class=\"text-xs mb-1\">Suggested paths:</div>\n        <div class=\"flex flex-wrap gap-1\">\n          ${suggestions.map(path => `\n            <span class=\"cursor-pointer px-1 py-0.5 bg-bg-sidebar hover:bg-primary-100 rounded text-xs path-suggestion\" data-path=\"${path}\">\n              ${path}\n            </span>\n          `).join('')}\n        </div>\n      `;\n      \n      suggestionsContainer.innerHTML = html;\n      \n      // Add event listeners to suggestion spans\n      const suggestionSpans = suggestionsContainer.querySelectorAll('.path-suggestion');\n      suggestionSpans.forEach(span => {\n        span.addEventListener('click', () => {\n          const path = span.getAttribute('data-path');\n          const pathInput = document.getElementById('variable-path-input') as HTMLInputElement;\n          if (pathInput && path) {\n            pathInput.value = path;\n            this.testPath();\n          }\n        });\n      });\n    } else {\n      suggestionsContainer.innerHTML = '';\n    }\n  }\n\n  // Store response data for extraction\n  private _responseData: any = null;\n} ", "/**\n * RequestBuilder Component\n * Handles building API requests with tabs for params, headers, body, and auth\n */\n\nimport { getById, createElement, setHTML } from '../utils/dom-utils';\nimport { logger } from '../utils/logger';\nimport { formatJSON } from '../utils/json-utils';\nimport { escapeHtml } from '../utils/string-utils';\nimport { IUIManager } from './UIManagerNew';\n\nexport interface RequestData {\n  method: string;\n  url: string;\n  params: Record<string, string>;\n  headers: Record<string, string>;\n  body?: any;\n  auth?: {\n    type: string;\n    username?: string;\n    password?: string;\n    token?: string;\n    apiKey?: string;\n    apiKeyName?: string;\n  };\n  bodyType?: 'json' | 'form-data' | 'x-www-form-urlencoded' | 'raw' | 'binary';\n}\n\nexport interface RequestBuilderOptions {\n  containerId?: string;\n  uiManager?: IUIManager;\n  onRequestDataChange?: (data: RequestData) => void;\n}\n\nconst DEFAULT_OPTIONS: RequestBuilderOptions = {\n  containerId: 'request-form'\n};\n\n/**\n * RequestBuilder class\n * Builds API requests with a tabbed interface\n */\nexport class RequestBuilder {\n  private options: Required<RequestBuilderOptions>;\n  private container: HTMLElement | null;\n  private tabButtons: HTMLElement[] = [];\n  private tabContents: HTMLElement[] = [];\n  private requestData: RequestData = {\n    method: 'GET',\n    url: '',\n    params: {},\n    headers: {},\n    bodyType: 'json'\n  };\n  private uiManager?: IUIManager;\n  \n  /**\n   * Creates a new RequestBuilder instance\n   */\n  constructor(options: RequestBuilderOptions = {}) {\n    this.options = { ...DEFAULT_OPTIONS, ...options } as Required<RequestBuilderOptions>;\n    this.container = getById(this.options.containerId);\n    this.uiManager = this.options.uiManager;\n    \n    if (!this.container) {\n      logger.warn(`RequestBuilder: Container element with ID \"${this.options.containerId}\" not found`);\n      return;\n    }\n    \n    this.initTabs();\n    this.setupEventListeners();\n  }\n  \n  /**\n   * Initialize tabs\n   */\n  private initTabs(): void {\n    if (!this.container) return;\n    \n    // Create tabs structure\n    const tabsHtml = `\n      <div class=\"flex border-b border-border mb-4\">\n        <button class=\"tab-button active\" data-tab=\"params\">Params</button>\n        <button class=\"tab-button\" data-tab=\"headers\">Headers</button>\n        <button class=\"tab-button\" data-tab=\"body\">Body</button>\n        <button class=\"tab-button\" data-tab=\"auth\">Auth</button>\n      </div>\n      <div id=\"params-tab\" class=\"tab-content active\"></div>\n      <div id=\"headers-tab\" class=\"tab-content hidden\"></div>\n      <div id=\"body-tab\" class=\"tab-content hidden\"></div>\n      <div id=\"auth-tab\" class=\"tab-content hidden\"></div>\n    `;\n    \n    setHTML(this.container, tabsHtml);\n    \n    // Store references to tab buttons and contents\n    this.tabButtons = Array.from(this.container.querySelectorAll('.tab-button'));\n    \n    this.tabContents = [\n      getById('params-tab'),\n      getById('headers-tab'),\n      getById('body-tab'),\n      getById('auth-tab')\n    ].filter((el): el is HTMLElement => el !== null);\n    \n    // Render empty tab contents\n    this.renderParamsTab();\n    this.renderHeadersTab();\n    this.renderBodyTab();\n    this.renderAuthTab();\n  }\n  \n  /**\n   * Set up event listeners\n   */\n  private setupEventListeners(): void {\n    if (!this.container) return;\n    \n    // Add event listeners for tabs\n    this.tabButtons.forEach(button => {\n      button.addEventListener('click', () => {\n        // Remove active class from all tabs\n        this.tabButtons.forEach(btn => btn.classList.remove('active'));\n        this.tabContents.forEach(content => content.classList.add('hidden'));\n        \n        // Activate clicked tab\n        button.classList.add('active');\n        const tabName = button.getAttribute('data-tab');\n        \n        if (tabName) {\n          const tabContent = getById(`${tabName}-tab`);\n          if (tabContent) {\n            tabContent.classList.remove('hidden');\n          }\n        }\n      });\n    });\n    \n    // Set up event delegation for form inputs\n    this.container.addEventListener('change', (e) => {\n      const target = e.target as HTMLElement;\n      \n      if (target.tagName === 'INPUT' || target.tagName === 'SELECT' || target.tagName === 'TEXTAREA') {\n        this.handleInputChange(target);\n      }\n    });\n    \n    // Listen for keyup events in text inputs to update in real-time\n    this.container.addEventListener('keyup', (e) => {\n      const target = e.target as HTMLElement;\n      \n      if (target.tagName === 'INPUT' && target.getAttribute('type') === 'text') {\n        this.handleInputChange(target);\n      }\n    });\n  }\n  \n  /**\n   * Handle input change events\n   */\n  private handleInputChange(target: HTMLElement): void {\n    const inputType = target.getAttribute('data-type');\n    const inputKey = target.getAttribute('data-key');\n    \n    if (!inputType || !inputKey) return;\n    \n    if (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement) {\n      const value = target.value;\n      \n      // Update the request data based on input type\n      switch (inputType) {\n        case 'param':\n          this.requestData.params[inputKey] = value;\n          break;\n          \n        case 'header':\n          this.requestData.headers[inputKey] = value;\n          break;\n          \n        case 'body':\n          // Handle body differently depending on body type\n          if (this.requestData.bodyType === 'json') {\n            try {\n              // Try to parse JSON body\n              this.requestData.body = JSON.parse(value);\n            } catch (e) {\n              // Store as string if not valid JSON\n              this.requestData.body = value;\n            }\n          } else {\n            this.requestData.body = value;\n          }\n          break;\n          \n        case 'bodyType':\n          this.requestData.bodyType = value as RequestData['bodyType'];\n          this.renderBodyTab(); // Re-render body tab when type changes\n          break;\n          \n        case 'auth':\n          if (!this.requestData.auth) {\n            this.requestData.auth = { type: 'none' };\n          }\n          \n          if (inputKey === 'type') {\n            this.requestData.auth.type = value;\n            this.renderAuthTab(); // Re-render auth tab when type changes\n          } else {\n            (this.requestData.auth as any)[inputKey] = value;\n          }\n          break;\n          \n        case 'method':\n          this.requestData.method = value;\n          break;\n          \n        case 'url':\n          this.requestData.url = value;\n          break;\n      }\n      \n      // Notify about data change\n      if (this.options.onRequestDataChange) {\n        this.options.onRequestDataChange(this.requestData);\n      }\n    }\n  }\n  \n  /**\n   * Render parameters tab content\n   */\n  private renderParamsTab(): void {\n    const tab = getById('params-tab');\n    if (!tab) return;\n    \n    let html = `\n      <div class=\"mb-2 flex justify-between items-center\">\n        <h3 class=\"text-sm font-medium\">Query Parameters</h3>\n        <button id=\"add-param-btn\" class=\"text-xs px-2 py-1 border border-primary-500 text-primary-500 rounded hover:bg-primary-500 hover:text-white\">\n          Add Parameter\n        </button>\n      </div>\n      <div class=\"space-y-2\" id=\"params-list\">\n    `;\n    \n    // Add existing parameters\n    const params = this.requestData.params;\n    \n    if (Object.keys(params).length === 0) {\n      html += `<p class=\"text-sm text-text-muted italic\">No parameters defined</p>`;\n    } else {\n      Object.entries(params).forEach(([key, value]) => {\n        html += this.createParamRow(key, value);\n      });\n    }\n    \n    html += `</div>`;\n    \n    setHTML(tab, html);\n    \n    // Add event listener for the add parameter button\n    const addParamBtn = getById('add-param-btn');\n    if (addParamBtn) {\n      addParamBtn.addEventListener('click', () => this.addParameter());\n    }\n  }\n  \n  /**\n   * Create a parameter input row\n   */\n  private createParamRow(key: string = '', value: string = ''): string {\n    return `\n      <div class=\"flex gap-2 items-center param-row\">\n        <input \n          type=\"text\" \n          class=\"w-1/3 px-2 py-1 border border-border rounded bg-bg text-sm\" \n          placeholder=\"Parameter name\" \n          value=\"${escapeHtml(key)}\" \n          data-type=\"param-key\"\n        >\n        <input \n          type=\"text\" \n          class=\"flex-1 px-2 py-1 border border-border rounded bg-bg text-sm\" \n          placeholder=\"Value\" \n          value=\"${escapeHtml(value)}\" \n          data-type=\"param\" \n          data-key=\"${escapeHtml(key)}\"\n        >\n        <button class=\"text-red-500 hover:text-red-700 delete-param-btn\">\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n          </svg>\n        </button>\n      </div>\n    `;\n  }\n  \n  /**\n   * Add a new parameter\n   */\n  private addParameter(): void {\n    const paramsList = getById('params-list');\n    if (!paramsList) return;\n    \n    const newParam = createElement('div', { class: 'flex gap-2 items-center param-row' });\n    \n    const keyInput = createElement('input', {\n      type: 'text',\n      class: 'w-1/3 px-2 py-1 border border-border rounded bg-bg text-sm',\n      placeholder: 'Parameter name',\n      'data-type': 'param-key'\n    });\n    \n    const valueInput = createElement('input', {\n      type: 'text',\n      class: 'flex-1 px-2 py-1 border border-border rounded bg-bg text-sm',\n      placeholder: 'Value',\n      'data-type': 'param',\n      'data-key': ''\n    });\n    \n    const deleteBtn = createElement('button', {\n      class: 'text-red-500 hover:text-red-700 delete-param-btn'\n    });\n    \n    deleteBtn.innerHTML = `\n      <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n      </svg>\n    `;\n    \n    deleteBtn.addEventListener('click', () => {\n      newParam.remove();\n    });\n    \n    keyInput.addEventListener('input', () => {\n      const newKey = keyInput.value;\n      valueInput.setAttribute('data-key', newKey);\n      \n      // Update request data\n      const oldValue = valueInput.value;\n      delete this.requestData.params[valueInput.getAttribute('data-key') || ''];\n      this.requestData.params[newKey] = oldValue;\n    });\n    \n    newParam.appendChild(keyInput);\n    newParam.appendChild(valueInput);\n    newParam.appendChild(deleteBtn);\n    \n    if (paramsList.querySelector('.italic')) {\n      // Remove \"No parameters defined\" message\n      paramsList.innerHTML = '';\n    }\n    \n    paramsList.appendChild(newParam);\n  }\n  \n  /**\n   * Render headers tab content\n   */\n  private renderHeadersTab(): void {\n    const tab = getById('headers-tab');\n    if (!tab) return;\n    \n    let html = `\n      <div class=\"mb-2 flex justify-between items-center\">\n        <h3 class=\"text-sm font-medium\">HTTP Headers</h3>\n        <button id=\"add-header-btn\" class=\"text-xs px-2 py-1 border border-primary-500 text-primary-500 rounded hover:bg-primary-500 hover:text-white\">\n          Add Header\n        </button>\n      </div>\n      <div class=\"space-y-2\" id=\"headers-list\">\n    `;\n    \n    // Add common headers dropdown\n    html += `\n      <div class=\"mb-3\">\n        <label class=\"text-xs text-text-muted\">Add Common Header:</label>\n        <select id=\"common-headers\" class=\"w-full px-2 py-1 border border-border rounded bg-bg text-sm mt-1\">\n          <option value=\"\">Select a common header...</option>\n          <option value=\"Content-Type\">Content-Type</option>\n          <option value=\"Authorization\">Authorization</option>\n          <option value=\"Accept\">Accept</option>\n          <option value=\"Accept-Language\">Accept-Language</option>\n          <option value=\"Cache-Control\">Cache-Control</option>\n          <option value=\"User-Agent\">User-Agent</option>\n        </select>\n      </div>\n    `;\n    \n    // Add existing headers\n    const headers = this.requestData.headers;\n    \n    if (Object.keys(headers).length === 0) {\n      html += `<p class=\"text-sm text-text-muted italic\">No headers defined</p>`;\n    } else {\n      Object.entries(headers).forEach(([key, value]) => {\n        html += this.createHeaderRow(key, value);\n      });\n    }\n    \n    html += `</div>`;\n    \n    setHTML(tab, html);\n    \n    // Add event listener for the add header button\n    const addHeaderBtn = getById('add-header-btn');\n    if (addHeaderBtn) {\n      addHeaderBtn.addEventListener('click', () => this.addHeader());\n    }\n    \n    // Add event listener for common headers dropdown\n    const commonHeadersSelect = getById('common-headers') as HTMLSelectElement;\n    if (commonHeadersSelect) {\n      commonHeadersSelect.addEventListener('change', () => {\n        const selectedHeader = commonHeadersSelect.value;\n        if (selectedHeader) {\n          this.addHeader(selectedHeader, this.getDefaultHeaderValue(selectedHeader));\n          commonHeadersSelect.value = ''; // Reset dropdown\n        }\n      });\n    }\n  }\n  \n  /**\n   * Get default value for common headers\n   */\n  private getDefaultHeaderValue(header: string): string {\n    const defaults: Record<string, string> = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'Accept-Language': 'en-US,en;q=0.9',\n      'Cache-Control': 'no-cache',\n      'User-Agent': 'API-Admin-UI'\n    };\n    \n    return defaults[header] || '';\n  }\n  \n  /**\n   * Create a header input row\n   */\n  private createHeaderRow(key: string = '', value: string = ''): string {\n    return `\n      <div class=\"flex gap-2 items-center header-row\">\n        <input \n          type=\"text\" \n          class=\"w-1/3 px-2 py-1 border border-border rounded bg-bg text-sm\" \n          placeholder=\"Header name\" \n          value=\"${escapeHtml(key)}\" \n          data-type=\"header-key\"\n        >\n        <input \n          type=\"text\" \n          class=\"flex-1 px-2 py-1 border border-border rounded bg-bg text-sm\" \n          placeholder=\"Value\" \n          value=\"${escapeHtml(value)}\" \n          data-type=\"header\" \n          data-key=\"${escapeHtml(key)}\"\n        >\n        <button class=\"text-red-500 hover:text-red-700 delete-header-btn\">\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n          </svg>\n        </button>\n      </div>\n    `;\n  }\n  \n  /**\n   * Add a new header\n   */\n  private addHeader(key: string = '', value: string = ''): void {\n    const headersList = getById('headers-list');\n    if (!headersList) return;\n    \n    const newHeader = createElement('div', { class: 'flex gap-2 items-center header-row' });\n    \n    const keyInput = createElement('input', {\n      type: 'text',\n      class: 'w-1/3 px-2 py-1 border border-border rounded bg-bg text-sm',\n      placeholder: 'Header name',\n      'data-type': 'header-key',\n      value: key\n    });\n    \n    const valueInput = createElement('input', {\n      type: 'text',\n      class: 'flex-1 px-2 py-1 border border-border rounded bg-bg text-sm',\n      placeholder: 'Value',\n      'data-type': 'header',\n      'data-key': key,\n      value: value\n    });\n    \n    const deleteBtn = createElement('button', {\n      class: 'text-red-500 hover:text-red-700 delete-header-btn'\n    });\n    \n    deleteBtn.innerHTML = `\n      <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n      </svg>\n    `;\n    \n    deleteBtn.addEventListener('click', () => {\n      newHeader.remove();\n      delete this.requestData.headers[keyInput.value];\n      \n      // Notify about data change\n      if (this.options.onRequestDataChange) {\n        this.options.onRequestDataChange(this.requestData);\n      }\n    });\n    \n    keyInput.addEventListener('input', () => {\n      const newKey = keyInput.value;\n      valueInput.setAttribute('data-key', newKey);\n      \n      // Update request data\n      const oldValue = valueInput.value;\n      delete this.requestData.headers[valueInput.getAttribute('data-key') || ''];\n      this.requestData.headers[newKey] = oldValue;\n      \n      // Notify about data change\n      if (this.options.onRequestDataChange) {\n        this.options.onRequestDataChange(this.requestData);\n      }\n    });\n    \n    valueInput.addEventListener('input', () => {\n      this.requestData.headers[keyInput.value] = valueInput.value;\n      \n      // Notify about data change\n      if (this.options.onRequestDataChange) {\n        this.options.onRequestDataChange(this.requestData);\n      }\n    });\n    \n    newHeader.appendChild(keyInput);\n    newHeader.appendChild(valueInput);\n    newHeader.appendChild(deleteBtn);\n    \n    if (headersList.querySelector('.italic')) {\n      // Remove \"No headers defined\" message\n      headersList.innerHTML = '';\n    }\n    \n    headersList.appendChild(newHeader);\n    \n    // Update request data\n    if (key && value) {\n      this.requestData.headers[key] = value;\n      \n      // Notify about data change\n      if (this.options.onRequestDataChange) {\n        this.options.onRequestDataChange(this.requestData);\n      }\n    }\n  }\n  \n  /**\n   * Render body tab content\n   */\n  private renderBodyTab(): void {\n    const tab = getById('body-tab');\n    if (!tab) return;\n    \n    const bodyType = this.requestData.bodyType || 'json';\n    \n    let html = `\n      <div class=\"mb-2\">\n        <h3 class=\"text-sm font-medium mb-2\">Request Body</h3>\n        \n        <div class=\"flex mb-3\">\n          <select id=\"body-type-select\" data-type=\"bodyType\" data-key=\"type\" class=\"px-2 py-1 border border-border rounded bg-bg text-sm\">\n            <option value=\"json\" ${bodyType === 'json' ? 'selected' : ''}>JSON</option>\n            <option value=\"form-data\" ${bodyType === 'form-data' ? 'selected' : ''}>form-data</option>\n            <option value=\"x-www-form-urlencoded\" ${bodyType === 'x-www-form-urlencoded' ? 'selected' : ''}>x-www-form-urlencoded</option>\n            <option value=\"raw\" ${bodyType === 'raw' ? 'selected' : ''}>Raw</option>\n            <option value=\"binary\" ${bodyType === 'binary' ? 'selected' : ''}>Binary</option>\n          </select>\n        </div>\n      `;\n    \n    // Render different body inputs based on type\n    switch (bodyType) {\n      case 'json':\n        const jsonValue = typeof this.requestData.body === 'object' \n          ? JSON.stringify(this.requestData.body, null, 2) \n          : (this.requestData.body || '{\\n  \\n}');\n          \n        html += `\n          <div id=\"json-body-container\">\n            <textarea \n              id=\"json-body\" \n              class=\"w-full h-64 px-3 py-2 border border-border rounded bg-bg font-mono text-sm\" \n              data-type=\"body\" \n              data-key=\"json\"\n              placeholder=\"Enter JSON body\"\n            >${escapeHtml(jsonValue)}</textarea>\n            <div class=\"flex justify-end mt-2\">\n              <button id=\"format-json-btn\" class=\"text-xs px-2 py-1 text-primary-500 hover:text-primary-700\">\n                Format JSON\n              </button>\n            </div>\n          </div>\n        `;\n        break;\n        \n      case 'form-data':\n        html += `\n          <div id=\"form-data-container\" class=\"space-y-2\">\n            <div class=\"flex justify-end mb-2\">\n              <button id=\"add-form-field-btn\" class=\"text-xs px-2 py-1 border border-primary-500 text-primary-500 rounded hover:bg-primary-500 hover:text-white\">\n                Add Field\n              </button>\n            </div>\n        `;\n        \n        // Add form fields\n        const formData = this.requestData.body || {};\n        \n        if (typeof formData !== 'object' || Object.keys(formData).length === 0) {\n          html += `<p class=\"text-sm text-text-muted italic\">No form fields defined</p>`;\n        } else {\n          Object.entries(formData).forEach(([key, value]) => {\n            html += this.createFormDataRow(key, value as string);\n          });\n        }\n        \n        html += `</div>`;\n        break;\n        \n      case 'x-www-form-urlencoded':\n        html += `\n          <div id=\"urlencoded-container\" class=\"space-y-2\">\n            <div class=\"flex justify-end mb-2\">\n              <button id=\"add-urlencoded-field-btn\" class=\"text-xs px-2 py-1 border border-primary-500 text-primary-500 rounded hover:bg-primary-500 hover:text-white\">\n                Add Field\n              </button>\n            </div>\n        `;\n        \n        // Add urlencoded fields\n        const urlencoded = this.requestData.body || {};\n        \n        if (typeof urlencoded !== 'object' || Object.keys(urlencoded).length === 0) {\n          html += `<p class=\"text-sm text-text-muted italic\">No form fields defined</p>`;\n        } else {\n          Object.entries(urlencoded).forEach(([key, value]) => {\n            html += this.createUrlencodedRow(key, value as string);\n          });\n        }\n        \n        html += `</div>`;\n        break;\n        \n      case 'raw':\n        html += `\n          <textarea \n            id=\"raw-body\" \n            class=\"w-full h-64 px-3 py-2 border border-border rounded bg-bg font-mono text-sm\" \n            data-type=\"body\" \n            data-key=\"raw\"\n            placeholder=\"Enter raw body content\"\n          >${escapeHtml(this.requestData.body || '')}</textarea>\n        `;\n        break;\n        \n      case 'binary':\n        html += `\n          <div id=\"binary-container\" class=\"border-2 border-dashed border-border rounded p-8 text-center\">\n            <p class=\"text-text-muted mb-4\">Select a file to upload</p>\n            <input type=\"file\" id=\"binary-file\" class=\"hidden\">\n            <button id=\"select-file-btn\" class=\"px-4 py-2 border border-primary-500 text-primary-500 rounded hover:bg-primary-500 hover:text-white\">\n              Select File\n            </button>\n            <p id=\"selected-file-name\" class=\"mt-4 text-sm\"></p>\n          </div>\n        `;\n        break;\n    }\n    \n    html += `</div>`;\n    \n    setHTML(tab, html);\n    \n    // Set up event listeners based on body type\n    this.setupBodyEventListeners(bodyType);\n  }\n  \n  /**\n   * Set up event listeners for the body tab\n   */\n  private setupBodyEventListeners(bodyType: string): void {\n    // Body type select\n    const bodyTypeSelect = getById('body-type-select') as HTMLSelectElement;\n    if (bodyTypeSelect) {\n      bodyTypeSelect.addEventListener('change', () => {\n        const newBodyType = bodyTypeSelect.value as RequestData['bodyType'];\n        this.requestData.bodyType = newBodyType;\n        \n        // Reset body when changing type\n        if (newBodyType === 'json') {\n          this.requestData.body = {};\n        } else if (newBodyType === 'form-data' || newBodyType === 'x-www-form-urlencoded') {\n          this.requestData.body = {};\n        } else {\n          this.requestData.body = '';\n        }\n        \n        // Re-render body tab\n        this.renderBodyTab();\n        \n        // Notify about data change\n        if (this.options.onRequestDataChange) {\n          this.options.onRequestDataChange(this.requestData);\n        }\n      });\n    }\n    \n    // Body type specific listeners\n    switch (bodyType) {\n      case 'json':\n        // JSON body textarea\n        const jsonBody = getById('json-body') as HTMLTextAreaElement;\n        if (jsonBody) {\n          jsonBody.addEventListener('input', () => {\n            try {\n              this.requestData.body = JSON.parse(jsonBody.value);\n            } catch (e) {\n              // Store as string if not valid JSON\n              this.requestData.body = jsonBody.value;\n            }\n            \n            // Notify about data change\n            if (this.options.onRequestDataChange) {\n              this.options.onRequestDataChange(this.requestData);\n            }\n          });\n        }\n        \n        // Format JSON button\n        const formatJsonBtn = getById('format-json-btn');\n        if (formatJsonBtn) {\n          formatJsonBtn.addEventListener('click', () => {\n            const jsonBody = getById('json-body') as HTMLTextAreaElement;\n            if (jsonBody) {\n              try {\n                const formatted = JSON.stringify(JSON.parse(jsonBody.value), null, 2);\n                jsonBody.value = formatted;\n                this.requestData.body = JSON.parse(formatted);\n                \n                // Notify about data change\n                if (this.options.onRequestDataChange) {\n                  this.options.onRequestDataChange(this.requestData);\n                }\n              } catch (e) {\n                if (this.uiManager) {\n                  this.uiManager.showError('Invalid JSON', 'Please check your JSON syntax.');\n                } else {\n                  alert('Invalid JSON. Please check your syntax.');\n                }\n              }\n            }\n          });\n        }\n        break;\n        \n      case 'form-data':\n        // Add form field button\n        const addFormFieldBtn = getById('add-form-field-btn');\n        if (addFormFieldBtn) {\n          addFormFieldBtn.addEventListener('click', () => this.addFormDataField());\n        }\n        break;\n        \n      case 'x-www-form-urlencoded':\n        // Add urlencoded field button\n        const addUrlencodedFieldBtn = getById('add-urlencoded-field-btn');\n        if (addUrlencodedFieldBtn) {\n          addUrlencodedFieldBtn.addEventListener('click', () => this.addUrlencodedField());\n        }\n        break;\n        \n      case 'binary':\n        // Select file button\n        const selectFileBtn = getById('select-file-btn');\n        if (selectFileBtn) {\n          selectFileBtn.addEventListener('click', () => {\n            const fileInput = getById('binary-file') as HTMLInputElement;\n            if (fileInput) {\n              fileInput.click();\n            }\n          });\n        }\n        \n        // File input change\n        const fileInput = getById('binary-file') as HTMLInputElement;\n        if (fileInput) {\n          fileInput.addEventListener('change', () => {\n            const fileNameElement = getById('selected-file-name');\n            if (fileNameElement && fileInput.files && fileInput.files[0]) {\n              fileNameElement.textContent = fileInput.files[0].name;\n              this.requestData.body = fileInput.files[0];\n              \n              // Notify about data change\n              if (this.options.onRequestDataChange) {\n                this.options.onRequestDataChange(this.requestData);\n              }\n            }\n          });\n        }\n        break;\n    }\n  }\n  \n  /**\n   * Create a form-data input row\n   */\n  private createFormDataRow(key: string = '', value: string = ''): string {\n    return `\n      <div class=\"flex gap-2 items-center form-data-row\">\n        <input \n          type=\"text\" \n          class=\"w-1/3 px-2 py-1 border border-border rounded bg-bg text-sm\" \n          placeholder=\"Field name\" \n          value=\"${escapeHtml(key)}\" \n          data-type=\"form-data-key\"\n        >\n        <input \n          type=\"text\" \n          class=\"flex-1 px-2 py-1 border border-border rounded bg-bg text-sm\" \n          placeholder=\"Value\" \n          value=\"${escapeHtml(value)}\" \n          data-type=\"form-data\" \n          data-key=\"${escapeHtml(key)}\"\n        >\n        <button class=\"text-red-500 hover:text-red-700 delete-form-data-btn\">\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n          </svg>\n        </button>\n      </div>\n    `;\n  }\n  \n  /**\n   * Add a new form-data field\n   */\n  private addFormDataField(): void {\n    const container = getById('form-data-container');\n    if (!container) return;\n    \n    // Check if we need to remove the \"No form fields defined\" message\n    const noFieldsMessage = container.querySelector('.italic');\n    if (noFieldsMessage) {\n      container.removeChild(noFieldsMessage);\n    }\n    \n    // Create a new row for form data field\n    const newRow = createElement('div', { class: 'flex gap-2 items-center form-data-row' });\n    \n    // Create key input\n    const keyInput = createElement('input', {\n      type: 'text',\n      class: 'w-1/3 px-2 py-1 border border-border rounded bg-bg text-sm',\n      placeholder: 'Field name',\n      'data-type': 'form-data-key'\n    });\n    \n    // Create value input\n    const valueInput = createElement('input', {\n      type: 'text',\n      class: 'flex-1 px-2 py-1 border border-border rounded bg-bg text-sm',\n      placeholder: 'Value',\n      'data-type': 'form-data',\n      'data-key': ''\n    });\n    \n    // Create delete button\n    const deleteBtn = createElement('button', {\n      class: 'text-red-500 hover:text-red-700 delete-form-data-btn'\n    });\n    \n    deleteBtn.innerHTML = `\n      <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n      </svg>\n    `;\n    \n    // Set up event listeners\n    deleteBtn.addEventListener('click', () => {\n      newRow.remove();\n      \n      // Update request body by removing this field\n      if (keyInput.value) {\n        if (typeof this.requestData.body === 'object') {\n          delete this.requestData.body[keyInput.value];\n        }\n      }\n      \n      // Notify about data change\n      if (this.options.onRequestDataChange) {\n        this.options.onRequestDataChange(this.requestData);\n      }\n    });\n    \n    keyInput.addEventListener('input', () => {\n      const newKey = keyInput.value;\n      valueInput.setAttribute('data-key', newKey);\n      \n      // Update request body\n      if (typeof this.requestData.body !== 'object') {\n        this.requestData.body = {};\n      }\n      \n      const oldKey = valueInput.getAttribute('data-key') || '';\n      if (oldKey && oldKey !== newKey) {\n        const value = this.requestData.body[oldKey];\n        delete this.requestData.body[oldKey];\n        if (newKey) {\n          this.requestData.body[newKey] = value;\n        }\n      }\n    });\n    \n    valueInput.addEventListener('input', () => {\n      // Update request body\n      if (typeof this.requestData.body !== 'object') {\n        this.requestData.body = {};\n      }\n      \n      const key = keyInput.value;\n      if (key) {\n        this.requestData.body[key] = valueInput.value;\n        \n        // Notify about data change\n        if (this.options.onRequestDataChange) {\n          this.options.onRequestDataChange(this.requestData);\n        }\n      }\n    });\n    \n    // Add elements to the row\n    newRow.appendChild(keyInput);\n    newRow.appendChild(valueInput);\n    newRow.appendChild(deleteBtn);\n    \n    // Add row to the container\n    container.appendChild(newRow);\n  }\n  \n  /**\n   * Create a x-www-form-urlencoded input row\n   */\n  private createUrlencodedRow(key: string = '', value: string = ''): string {\n    return `\n      <div class=\"flex gap-2 items-center urlencoded-row\">\n        <input \n          type=\"text\" \n          class=\"w-1/3 px-2 py-1 border border-border rounded bg-bg text-sm\" \n          placeholder=\"Field name\" \n          value=\"${escapeHtml(key)}\" \n          data-type=\"urlencoded-key\"\n        >\n        <input \n          type=\"text\" \n          class=\"flex-1 px-2 py-1 border border-border rounded bg-bg text-sm\" \n          placeholder=\"Value\" \n          value=\"${escapeHtml(value)}\" \n          data-type=\"urlencoded\" \n          data-key=\"${escapeHtml(key)}\"\n        >\n        <button class=\"text-red-500 hover:text-red-700 delete-urlencoded-btn\">\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n          </svg>\n        </button>\n      </div>\n    `;\n  }\n  \n  /**\n   * Add a new x-www-form-urlencoded field\n   */\n  private addUrlencodedField(): void {\n    const container = getById('urlencoded-container');\n    if (!container) return;\n    \n    // Check if we need to remove the \"No form fields defined\" message\n    const noFieldsMessage = container.querySelector('.italic');\n    if (noFieldsMessage) {\n      container.removeChild(noFieldsMessage);\n    }\n    \n    // Create a new row for urlencoded field\n    const newRow = createElement('div', { class: 'flex gap-2 items-center urlencoded-row' });\n    \n    // Create key input\n    const keyInput = createElement('input', {\n      type: 'text',\n      class: 'w-1/3 px-2 py-1 border border-border rounded bg-bg text-sm',\n      placeholder: 'Field name',\n      'data-type': 'urlencoded-key'\n    });\n    \n    // Create value input\n    const valueInput = createElement('input', {\n      type: 'text',\n      class: 'flex-1 px-2 py-1 border border-border rounded bg-bg text-sm',\n      placeholder: 'Value',\n      'data-type': 'urlencoded',\n      'data-key': ''\n    });\n    \n    // Create delete button\n    const deleteBtn = createElement('button', {\n      class: 'text-red-500 hover:text-red-700 delete-urlencoded-btn'\n    });\n    \n    deleteBtn.innerHTML = `\n      <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n      </svg>\n    `;\n    \n    // Set up event listeners\n    deleteBtn.addEventListener('click', () => {\n      newRow.remove();\n      \n      // Update request body by removing this field\n      if (keyInput.value) {\n        if (typeof this.requestData.body === 'object') {\n          delete this.requestData.body[keyInput.value];\n        }\n      }\n      \n      // Notify about data change\n      if (this.options.onRequestDataChange) {\n        this.options.onRequestDataChange(this.requestData);\n      }\n    });\n    \n    keyInput.addEventListener('input', () => {\n      const newKey = keyInput.value;\n      valueInput.setAttribute('data-key', newKey);\n      \n      // Update request body\n      if (typeof this.requestData.body !== 'object') {\n        this.requestData.body = {};\n      }\n      \n      const oldKey = valueInput.getAttribute('data-key') || '';\n      if (oldKey && oldKey !== newKey) {\n        const value = this.requestData.body[oldKey];\n        delete this.requestData.body[oldKey];\n        if (newKey) {\n          this.requestData.body[newKey] = value;\n        }\n      }\n    });\n    \n    valueInput.addEventListener('input', () => {\n      // Update request body\n      if (typeof this.requestData.body !== 'object') {\n        this.requestData.body = {};\n      }\n      \n      const key = keyInput.value;\n      if (key) {\n        this.requestData.body[key] = valueInput.value;\n        \n        // Notify about data change\n        if (this.options.onRequestDataChange) {\n          this.options.onRequestDataChange(this.requestData);\n        }\n      }\n    });\n    \n    // Add elements to the row\n    newRow.appendChild(keyInput);\n    newRow.appendChild(valueInput);\n    newRow.appendChild(deleteBtn);\n    \n    // Add row to the container\n    container.appendChild(newRow);\n  }\n  \n  /**\n   * Render authentication tab content\n   */\n  private renderAuthTab(): void {\n    const tab = getById('auth-tab');\n    if (!tab) return;\n    \n    const auth = this.requestData.auth || { type: 'none' };\n    \n    let html = `\n      <div class=\"mb-2\">\n        <h3 class=\"text-sm font-medium mb-2\">Authentication</h3>\n        \n        <div class=\"mb-4\">\n          <select id=\"auth-type-select\" data-type=\"auth\" data-key=\"type\" class=\"w-full px-2 py-1 border border-border rounded bg-bg text-sm\">\n            <option value=\"none\" ${auth.type === 'none' ? 'selected' : ''}>No Auth</option>\n            <option value=\"basic\" ${auth.type === 'basic' ? 'selected' : ''}>Basic Auth</option>\n            <option value=\"bearer\" ${auth.type === 'bearer' ? 'selected' : ''}>Bearer Token</option>\n            <option value=\"apiKey\" ${auth.type === 'apiKey' ? 'selected' : ''}>API Key</option>\n          </select>\n        </div>\n    `;\n    \n    // Render auth inputs based on type\n    switch (auth.type) {\n      case 'basic':\n        html += `\n          <div class=\"space-y-3\">\n            <div>\n              <label class=\"text-xs text-text-muted\">Username</label>\n              <input \n                type=\"text\" \n                class=\"w-full px-2 py-1 border border-border rounded bg-bg text-sm mt-1\" \n                placeholder=\"Username\" \n                value=\"${escapeHtml(auth.username || '')}\" \n                data-type=\"auth\" \n                data-key=\"username\"\n              >\n            </div>\n            <div>\n              <label class=\"text-xs text-text-muted\">Password</label>\n              <input \n                type=\"password\" \n                class=\"w-full px-2 py-1 border border-border rounded bg-bg text-sm mt-1\" \n                placeholder=\"Password\" \n                value=\"${escapeHtml(auth.password || '')}\" \n                data-type=\"auth\" \n                data-key=\"password\"\n              >\n            </div>\n          </div>\n        `;\n        break;\n        \n      case 'bearer':\n        html += `\n          <div>\n            <label class=\"text-xs text-text-muted\">Token</label>\n            <input \n              type=\"text\" \n              class=\"w-full px-2 py-1 border border-border rounded bg-bg text-sm mt-1\" \n              placeholder=\"Bearer token\" \n              value=\"${escapeHtml(auth.token || '')}\" \n              data-type=\"auth\" \n              data-key=\"token\"\n            >\n          </div>\n        `;\n        break;\n        \n      case 'apiKey':\n        html += `\n          <div class=\"space-y-3\">\n            <div>\n              <label class=\"text-xs text-text-muted\">Key Name</label>\n              <input \n                type=\"text\" \n                class=\"w-full px-2 py-1 border border-border rounded bg-bg text-sm mt-1\" \n                placeholder=\"API key name (e.g. X-API-Key)\" \n                value=\"${escapeHtml(auth.apiKeyName || '')}\" \n                data-type=\"auth\" \n                data-key=\"apiKeyName\"\n              >\n            </div>\n            <div>\n              <label class=\"text-xs text-text-muted\">Key Value</label>\n              <input \n                type=\"text\" \n                class=\"w-full px-2 py-1 border border-border rounded bg-bg text-sm mt-1\" \n                placeholder=\"API key value\" \n                value=\"${escapeHtml(auth.apiKey || '')}\" \n                data-type=\"auth\" \n                data-key=\"apiKey\"\n              >\n            </div>\n          </div>\n        `;\n        break;\n    }\n    \n    html += `</div>`;\n    \n    setHTML(tab, html);\n    \n    // Set up event listeners\n    const authTypeSelect = getById('auth-type-select') as HTMLSelectElement;\n    if (authTypeSelect) {\n      authTypeSelect.addEventListener('change', () => {\n        const newAuthType = authTypeSelect.value;\n        \n        if (!this.requestData.auth) {\n          this.requestData.auth = { type: newAuthType };\n        } else {\n          this.requestData.auth.type = newAuthType;\n        }\n        \n        // Re-render auth tab\n        this.renderAuthTab();\n        \n        // Notify about data change\n        if (this.options.onRequestDataChange) {\n          this.options.onRequestDataChange(this.requestData);\n        }\n      });\n    }\n  }\n  \n  /**\n   * Load request data\n   * @param data Request data to load\n   */\n  public loadRequest(data: Partial<RequestData>): void {\n    this.requestData = {\n      ...this.requestData,\n      ...data\n    };\n    \n    // Re-render tabs\n    this.renderParamsTab();\n    this.renderHeadersTab();\n    this.renderBodyTab();\n    this.renderAuthTab();\n  }\n  \n  /**\n   * Get current request data\n   * @returns Current request data\n   */\n  public getRequestData(): RequestData {\n    return { ...this.requestData };\n  }\n} ", "/**\n * AppController class\n * Main application controller that orchestrates all modules\n */\n\n// Import dependencies\nimport { EndpointManager } from '../modules/endpoint-manager';\nimport { BackendLogsManager } from '../modules/backend-logs-manager';\nimport { StatusManager } from '../modules/status-manager';\nimport { VariableManager } from '../modules/variable-manager';\nimport { HistoryManager } from '../modules/history-manager';\nimport { FlowController } from './FlowController';\nimport { UIManager, IUIManager } from '../components/UIManagerNew';\nimport { bundledEndpoints } from '../data/bundled-endpoints';\nimport { DomainStateManager } from '../modules/domain-state-manager';\nimport { DomainStateViewer } from '../components/DomainStateViewer';\nimport { ResponseViewer } from '../components/ResponseViewer';\nimport { VariableExtractor } from '../components/VariableExtractor';\nimport { RequestBuilder, RequestData } from '../components/RequestBuilder';\nimport { Config } from '../config/config';\n\n// Import types\nimport {\n  EndpointManagerOptions,\n  StatusManagerOptions,\n  VariableManagerOptions,\n  HistoryManagerOptions,\n  DomainStateManagerOptions,\n  VariableExtractorOptions,\n  ResponseViewerOptions,\n  DomainStateViewerOptions,\n  FlowControllerOptions\n} from '../types/app-types';\n\n/**\n * Main application controller\n */\nexport class AppController {\n  private endpointManager!: EndpointManager;\n  private logsManager!: BackendLogsManager;\n  private statusManager!: StatusManager;\n  private variableManager!: VariableManager;\n  private historyManager!: HistoryManager;\n  private domainStateManager!: DomainStateManager;\n  private flowController!: FlowController;\n  private uiManager!: UIManager;\n  private responseViewer!: ResponseViewer;\n  private variableExtractor!: VariableExtractor;\n  private domainStateViewer!: DomainStateViewer;\n  private requestBuilder!: RequestBuilder;\n  private config?: Config;\n  \n  /**\n   * Constructor\n   */\n  constructor() {\n    // Initialize managers\n    this.initializeManagers();\n    \n    // Initialize UI\n    this.uiManager = new UIManager();\n    \n    // Set up UI components\n    this.setupUIComponents();\n    \n    // Initialize flow controller\n    this.flowController = new FlowController({\n      endpointManager: this.endpointManager,\n      uiManager: this.uiManager,\n      variableManager: this.variableManager,\n      historyManager: this.historyManager,\n      appController: this\n    });\n  }\n  \n  /**\n   * Initialize all manager modules\n   */\n  private initializeManagers(): void {\n    // Initialize VariableManager\n    const variableManagerOptions: VariableManagerOptions = {\n      persistVariables: true,\n      storageKey: 'api_admin_variables',\n      variablePrefix: '$',\n      maxVariables: 100,\n      storageType: 'localStorage'\n    };\n    this.variableManager = new VariableManager(variableManagerOptions);\n    \n    // Initialize EndpointManager\n    const endpointManagerOptions: EndpointManagerOptions = {\n      useLocalEndpoints: true,\n      supportMultipleFormats: true\n    };\n    this.endpointManager = new EndpointManager(endpointManagerOptions);\n    \n    // Initialize StatusManager\n    const statusManagerOptions: StatusManagerOptions = {\n      updateInterval: 30000,\n      statusEndpoint: '/api/v1/health'\n    };\n    this.statusManager = new StatusManager(statusManagerOptions);\n    \n    // Initialize HistoryManager\n    const historyOptions: HistoryManagerOptions = {\n      maxEntries: 50,\n      persistHistory: true\n    };\n    this.historyManager = new HistoryManager(historyOptions);\n    \n    // Initialize BackendLogsManager\n    this.logsManager = new BackendLogsManager({\n      logsEndpoint: '/api/v1/logs',\n      maxLogsToFetch: 100,\n      autoRefresh: true\n    });\n    \n    // Initialize DomainStateManager\n    const domainStateOptions: DomainStateManagerOptions = {\n      localStorageKey: 'domain_state',\n      autoSave: true,\n      diffingEnabled: true\n    };\n    this.domainStateManager = new DomainStateManager(domainStateOptions);\n  }\n  \n  /**\n   * Set up UI components\n   */\n  private setupUIComponents(): void {\n    // Initialize ResponseViewer\n    const responseViewerOptions: ResponseViewerOptions = {\n      containerId: 'response-container',\n      responseHeadersId: 'response-headers',\n      responseBodyId: 'response-body',\n      responseStatusId: 'response-status'\n    };\n    this.responseViewer = new ResponseViewer(responseViewerOptions);\n    \n    // Initialize RequestBuilder\n    this.requestBuilder = new RequestBuilder({\n      containerId: 'request-form',\n      uiManager: this.uiManager,\n      onRequestDataChange: (data: RequestData) => {\n        console.log('Request data changed:', data);\n      }\n    });\n    \n    // Initialize VariableExtractor\n    const variableExtractorOptions: VariableExtractorOptions = {\n      variablePrefix: '$',\n      suggestionsEnabled: true,\n      autoExtract: true\n    };\n    this.variableExtractor = new VariableExtractor(variableExtractorOptions);\n    \n    // Initialize DomainStateViewer\n    const domainStateViewerOptions: DomainStateViewerOptions = {\n      containerId: 'domain-state-container',\n      stateManager: this.domainStateManager,\n      showFilters: true,\n      showTimeline: true\n    };\n    this.domainStateViewer = new DomainStateViewer(domainStateViewerOptions);\n  }\n  \n  /**\n   * Initialize the application\n   * @param config Application configuration\n   */\n  public initialize(config?: Config): void {\n    // Store config\n    this.config = config;\n    \n    // Apply config if provided\n    if (config) {\n      this.applyConfiguration(config);\n    }\n    \n    // Load bundled endpoints if available\n    if (bundledEndpoints) {\n      this.endpointManager.loadEndpoints();\n    }\n    \n    // Set up event listeners\n    this.setupEventListeners();\n    \n    // Initialize flow controller\n    this.flowController.initialize();\n    \n    // Load user preferences\n    this.loadUserPreferences();\n    \n    // Refresh status\n    this.statusManager.refreshStatus();\n    \n    console.log('AppController initialized');\n  }\n  \n  /**\n   * Apply configuration to all modules\n   * @param config Application configuration\n   */\n  private applyConfiguration(config: Config): void {\n    // Apply configuration to each module as needed\n    if (config.get('endpoints.customEndpointsPath')) {\n      this.endpointManager.setDynamicEndpointsPath(config.get('endpoints.customEndpointsPath'));\n    }\n    \n    // Apply theme\n    const theme = config.get('ui.theme');\n    if (theme) {\n      document.body.classList.toggle('dark-mode', theme === 'dark');\n    }\n  }\n  \n  /**\n   * Set up event listeners\n   */\n  private setupEventListeners(): void {\n    // Handle send button click\n    const sendButton = document.getElementById('send-button');\n    if (sendButton) {\n      sendButton.addEventListener('click', () => this.handleSendRequest());\n    }\n    \n    // Handle tab buttons\n    const tabButtons = document.querySelectorAll('.tab-button');\n    tabButtons.forEach(button => {\n      button.addEventListener('click', (e) => {\n        const tabName = (e.target as HTMLElement).getAttribute('data-tab');\n        if (tabName) {\n          this.activateTab(tabName);\n        }\n      });\n    });\n    \n    // Handle extract variables button\n    const extractVariablesBtn = document.getElementById('extract-variables-btn');\n    if (extractVariablesBtn) {\n      extractVariablesBtn.addEventListener('click', () => {\n        // Open variable extractor\n        const response = this.responseViewer.getResponse();\n        if (response) {\n          // Show variable extractor UI\n          this.variableExtractor.showExtractionModal(response);\n        } else {\n          this.uiManager.showError('No Response', 'There is no response data to extract variables from.');\n        }\n      });\n    }\n    \n    // Handle clear response button\n    const clearResponseBtn = document.getElementById('clear-response-btn');\n    if (clearResponseBtn) {\n      clearResponseBtn.addEventListener('click', () => {\n        this.responseViewer.clear();\n      });\n    }\n    \n    // Handle clear variables button\n    const clearVariablesBtn = document.getElementById('clear-variables-btn');\n    if (clearVariablesBtn) {\n      clearVariablesBtn.addEventListener('click', () => {\n        this.variableManager.clearVariables();\n        this.updateVariablesList();\n      });\n    }\n  }\n  \n  /**\n   * Activate a tab\n   * @param tabName Name of the tab to activate\n   */\n  private activateTab(tabName: string): void {\n    // Update tab buttons\n    const tabButtons = document.querySelectorAll('.tab-button');\n    tabButtons.forEach(button => {\n      button.classList.toggle('active', button.getAttribute('data-tab') === tabName);\n    });\n    \n    // Update tab content\n    const tabContents = document.querySelectorAll('[data-tab-content]');\n    tabContents.forEach(content => {\n      content.classList.toggle('hidden', content.getAttribute('data-tab-content') !== tabName);\n      content.classList.toggle('active', content.getAttribute('data-tab-content') === tabName);\n    });\n  }\n  \n  /**\n   * Update the variables list in the UI\n   */\n  private updateVariablesList(): void {\n    const variablesList = document.getElementById('variables-list');\n    if (!variablesList) return;\n    \n    const variables = this.variableManager.getVariables();\n    \n    if (Object.keys(variables).length === 0) {\n      variablesList.innerHTML = '<div class=\"text-text-muted italic\">No variables defined</div>';\n      return;\n    }\n    \n    let html = '<div class=\"space-y-1\">';\n    \n    Object.entries(variables).forEach(([name, value]) => {\n      html += `\n        <div class=\"flex justify-between items-center p-1 hover:bg-bg-sidebar rounded\">\n          <div>\n            <span class=\"font-medium text-primary-500\">${name}</span>\n            <span class=\"text-xs text-text-muted ml-2\">${typeof value === 'object' ? 'Object' : typeof value}</span>\n          </div>\n          <div class=\"text-xs truncate max-w-[200px]\">${typeof value === 'object' ? JSON.stringify(value) : String(value)}</div>\n        </div>\n      `;\n    });\n    \n    html += '</div>';\n    \n    variablesList.innerHTML = html;\n  }\n  \n  /**\n   * Handle send request button click\n   */\n  private handleSendRequest(): void {\n    // Get request details from the RequestBuilder\n    const requestData = this.requestBuilder.getRequestData();\n    \n    // Process variables in the URL, headers, and params\n    requestData.url = this.variableManager.replaceVariables(requestData.url);\n    \n    // Process headers\n    const processedHeaders: Record<string, string> = {};\n    \n    Object.entries(requestData.headers).forEach(([key, value]) => {\n      processedHeaders[key] = this.variableManager.replaceVariables(String(value));\n    });\n    \n    // Add auth header if needed\n    if (requestData.auth) {\n      switch (requestData.auth.type) {\n        case 'basic':\n          if (requestData.auth.username && requestData.auth.password) {\n            const credentials = btoa(`${requestData.auth.username}:${requestData.auth.password}`);\n            processedHeaders['Authorization'] = `Basic ${credentials}`;\n          }\n          break;\n          \n        case 'bearer':\n          if (requestData.auth.token) {\n            processedHeaders['Authorization'] = `Bearer ${requestData.auth.token}`;\n          }\n          break;\n          \n        case 'apiKey':\n          if (requestData.auth.apiKeyName && requestData.auth.apiKey) {\n            processedHeaders[requestData.auth.apiKeyName] = requestData.auth.apiKey;\n          }\n          break;\n      }\n    }\n    \n    // Take before snapshot if domain state viewer is active\n    if (this.domainStateViewer && 'selectedEntityTypes' in this.domainStateViewer) {\n      const entityTypes = (this.domainStateViewer as any).selectedEntityTypes || [];\n      this.domainStateManager.takeBeforeSnapshot(entityTypes);\n    }\n    \n    // Show loading indicator\n    this.uiManager.showLoading('Sending request...');\n    \n    // Send request\n    this.sendRequest({\n      method: requestData.method,\n      url: requestData.url,\n      headers: processedHeaders,\n      body: requestData.body\n    })\n      .then(response => {\n        // Hide loading indicator\n        this.uiManager.hideLoading();\n        \n        // Display response\n        this.responseViewer.display(response.body, response.headers, response.status);\n        \n        // Take after snapshot if domain state viewer is active\n        if (this.domainStateViewer && 'selectedEntityTypes' in this.domainStateViewer) {\n          const entityTypes = (this.domainStateViewer as any).selectedEntityTypes || [];\n          this.domainStateManager.takeAfterSnapshot(entityTypes)\n            .then(() => {\n              // Access diffs\n              const diffs = this.domainStateManager.getDiffs();\n              if (diffs && Object.keys(diffs).length > 0) {\n                console.log('Domain state changes detected:', diffs);\n              }\n            });\n        }\n        \n        // Add to history\n        this.historyManager.addEntry({\n          method: requestData.method,\n          url: requestData.url,\n          headers: requestData.headers,\n          body: requestData.body\n        }, {\n          status: response.status,\n          headers: response.headers,\n          body: response.body,\n          time: response.time\n        });\n        \n        // Update variables list\n        this.updateVariablesList();\n      })\n      .catch(error => {\n        // Hide loading indicator\n        this.uiManager.hideLoading();\n        \n        // Display error\n        this.showError(error);\n      });\n  }\n  \n  /**\n   * Send an API request\n   * @param request Request object\n   * @returns Promise with response\n   */\n  private async sendRequest(request: any): Promise<any> {\n    const startTime = Date.now();\n    \n    try {\n      // Create fetch options\n      const options: RequestInit = {\n        method: request.method,\n        headers: request.headers\n      };\n      \n      // Add body for non-GET requests\n      if (request.method !== 'GET' && request.method !== 'HEAD') {\n        if (typeof request.body === 'object') {\n          options.body = JSON.stringify(request.body);\n        } else if (request.body) {\n          options.body = request.body;\n        }\n      }\n      \n      // Build URL with query parameters\n      let url = request.url;\n      if (request.params && Object.keys(request.params).length > 0) {\n        const queryParams = new URLSearchParams();\n        \n        Object.entries(request.params).forEach(([key, value]) => {\n          queryParams.append(key, String(value));\n        });\n        \n        url += (url.includes('?') ? '&' : '?') + queryParams.toString();\n      }\n      \n      // Execute request\n      const response = await fetch(url, options);\n      \n      // Calculate request time\n      const timeMs = Date.now() - startTime;\n      \n      // Get response headers\n      const headers: Record<string, string> = {};\n      response.headers.forEach((value, key) => {\n        headers[key] = value;\n      });\n      \n      // Get response body\n      let body;\n      const contentType = headers['content-type'] || '';\n      \n      if (contentType.includes('application/json')) {\n        body = await response.json();\n      } else if (contentType.includes('text/')) {\n        body = await response.text();\n      } else {\n        // For binary responses, get text representation\n        body = await response.text();\n      }\n      \n      return {\n        status: response.status,\n        statusText: response.statusText,\n        headers,\n        body,\n        time: timeMs,\n        url: response.url\n      };\n    } catch (error) {\n      const timeMs = Date.now() - startTime;\n      \n      throw {\n        message: error instanceof Error ? error.message : String(error),\n        time: timeMs\n      };\n    }\n  }\n  \n  /**\n   * Show error message\n   * @param message Error message to display\n   */\n  public showError(message: string | Error): void {\n    const errorMessage = message instanceof Error ? message.message : message;\n    console.error(errorMessage);\n    this.uiManager.showError('Error', errorMessage);\n  }\n  \n  /**\n   * Handle request initiated from domain state viewer\n   */\n  private handleRequestFromDomainState(): void {\n    // TODO: Implement handling requests from domain state viewer\n    console.log('Request initiated from domain state viewer');\n  }\n  \n  /**\n   * Load user preferences\n   */\n  private loadUserPreferences(): void {\n    // TODO: Implement loading user preferences\n  }\n}\n\n// Export a singleton instance\nexport default new AppController(); ", "/**\n * Configuration Manager\n * Handles application configuration\n */\n\ninterface ConfigValues {\n    apiBaseUrl: string;\n    apiVersion: string;\n    useApiVersionPrefix: boolean;\n    requestTimeout: number;\n    maxHistoryItems: number;\n    theme: 'light' | 'dark' | 'auto';\n    endpoints?: {\n        customEndpointsPath?: string;\n        [key: string]: any;\n    };\n    ui?: {\n        theme?: 'light' | 'dark' | 'auto';\n        [key: string]: any;\n    };\n    [key: string]: any;\n}\n\nexport class Config {\n    private config: ConfigValues;\n\n    /**\n     * Creates a new Config instance\n     * @param initialConfig - Initial configuration values\n     */\n    constructor(initialConfig: Partial<ConfigValues> = {}) {\n        this.config = {\n            // Default configuration\n            apiBaseUrl: 'http://localhost:3000', // Base URL for API requests\n            apiVersion: 'v1', // API version\n            useApiVersionPrefix: true, // Whether to use API version in URL\n            requestTimeout: 30000, // Request timeout in milliseconds\n            maxHistoryItems: 50, // Maximum number of history items to store\n            theme: 'light', // UI theme (light, dark, auto)\n            ...initialConfig // Override with provided values\n        };\n        \n        // Load configuration from storage\n        this._loadFromStorage();\n    }\n    \n    /**\n     * Gets a configuration value using dot notation\n     * @param key - The configuration key (supports dot notation)\n     * @param defaultValue - Default value if key not found\n     * @returns The configuration value\n     */\n    get(key: string, defaultValue: any = null): any {\n        // Handle dot notation (e.g., 'endpoints.customEndpointsPath')\n        const parts = key.split('.');\n        let current: any = this.config;\n        \n        for (const part of parts) {\n            if (current === null || current === undefined || typeof current !== 'object') {\n                return defaultValue;\n            }\n            \n            if (!(part in current)) {\n                return defaultValue;\n            }\n            \n            current = current[part];\n        }\n        \n        return current !== undefined ? current : defaultValue;\n    }\n    \n    /**\n     * Sets a configuration value with support for dot notation\n     * @param key - The configuration key\n     * @param value - The configuration value\n     */\n    set(key: string, value: any): void {\n        // Handle dot notation (e.g., 'endpoints.customEndpointsPath')\n        const parts = key.split('.');\n        let current: any = this.config;\n        \n        // Navigate to the correct object, creating objects as needed\n        for (let i = 0; i < parts.length - 1; i++) {\n            const part = parts[i];\n            \n            if (!(part in current) || current[part] === null || typeof current[part] !== 'object') {\n                current[part] = {};\n            }\n            \n            current = current[part];\n        }\n        \n        // Set the final property\n        current[parts[parts.length - 1]] = value;\n        \n        // Save to storage\n        this._saveToStorage();\n    }\n    \n    /**\n     * Sets multiple configuration values\n     * @param values - The configuration values\n     */\n    setMultiple(values: Partial<ConfigValues>): void {\n        Object.assign(this.config, values);\n        \n        // Save to storage\n        this._saveToStorage();\n    }\n    \n    /**\n     * Gets all configuration values\n     * @returns The configuration object\n     */\n    getAll(): ConfigValues {\n        return { ...this.config };\n    }\n    \n    /**\n     * Resets configuration to defaults\n     * @returns Promise that resolves when reset is complete\n     */\n    async reset(): Promise<void> {\n        // Reset to defaults\n        this.config = {\n            apiBaseUrl: 'http://localhost:3000',\n            apiVersion: 'v1',\n            useApiVersionPrefix: true,\n            requestTimeout: 30000,\n            maxHistoryItems: 50,\n            theme: 'light'\n        };\n        \n        // Save to storage\n        this._saveToStorage();\n    }\n    \n    /**\n     * Loads configuration from storage\n     * @private\n     */\n    private _loadFromStorage(): void {\n        try {\n            const storedConfig = localStorage.getItem('api-tester-config');\n            if (storedConfig) {\n                this.config = {\n                    ...this.config,\n                    ...JSON.parse(storedConfig)\n                };\n            }\n        } catch (error) {\n            console.error('Error loading configuration from storage:', error);\n        }\n    }\n    \n    /**\n     * Saves configuration to storage\n     * @private\n     */\n    private _saveToStorage(): void {\n        try {\n            localStorage.setItem('api-tester-config', JSON.stringify(this.config));\n        } catch (error) {\n            console.error('Error saving configuration to storage:', error);\n        }\n    }\n} ", "/**\n * LogsViewer Component\n * Displays frontend and backend logs, with special handling for AI logs\n */\n\nimport { BackendLogsManager } from '../modules/backend-logs-manager';\nimport { logger } from '../utils/logger';\n\n// Define log level type\nexport enum LogLevel {\n  DEBUG = 'DEBUG',\n  INFO = 'INFO',\n  WARNING = 'WARNING',\n  ERROR = 'ERROR'\n}\n\n// Define log entry interface\nexport interface LogEntry {\n  timestamp: string;\n  level: string;\n  message: string;\n  correlationId?: string;\n  meta?: any;\n  context?: any;\n  service?: string;\n  data?: any;\n}\n\n// Define options interface\nexport interface LogsViewerOptions {\n  logsContainerId?: string;\n  backendLogsManager?: BackendLogsManager;\n  maxFrontendLogs?: number;\n  showFrontendLogs?: boolean;\n  showBackendLogs?: boolean;\n  enableAiLogFormatting?: boolean;\n  enableDomainEventFormatting?: boolean;\n  enableCorrelationIdFiltering?: boolean;\n  enableSearchFiltering?: boolean;\n  autoRefreshBackendLogs?: boolean;\n  refreshInterval?: number;\n}\n\n/**\n * LogsViewer class\n * Displays and manages logs in the UI\n */\nexport class LogsViewer {\n  private options: Required<LogsViewerOptions>;\n  private container: HTMLElement | null;\n  private frontendLogsTab: HTMLElement | null;\n  private backendLogsTab: HTMLElement | null;\n  private frontendLogsContainer: HTMLElement | null;\n  private backendLogsContainer: HTMLElement | null;\n  private frontendLogsList: HTMLElement | null;\n  private backendLogsList: HTMLElement | null;\n  private activeTab: 'frontend' | 'backend';\n  private frontendLogs: LogEntry[];\n  private refreshIntervalId: number | null;\n  private backendLogsManager: BackendLogsManager | null;\n  private originalConsole: Record<string, Function>;\n  \n  /**\n   * Creates a new LogsViewer instance\n   * @param options Configuration options\n   */\n  constructor(options: LogsViewerOptions = {}) {\n    // Set default options\n    this.options = {\n      logsContainerId: 'logs-container',\n      backendLogsManager: null,\n      maxFrontendLogs: 1000,\n      showFrontendLogs: true,\n      showBackendLogs: true,\n      enableAiLogFormatting: true,\n      enableDomainEventFormatting: true,\n      enableCorrelationIdFiltering: true,\n      enableSearchFiltering: true,\n      autoRefreshBackendLogs: false,\n      refreshInterval: 10000, // 10 seconds\n      ...options\n    };\n    \n    // Initialize properties\n    this.container = document.getElementById(this.options.logsContainerId);\n    this.frontendLogsTab = null;\n    this.backendLogsTab = null;\n    this.frontendLogsContainer = null;\n    this.backendLogsContainer = null;\n    this.frontendLogsList = null;\n    this.backendLogsList = null;\n    this.activeTab = 'backend';\n    this.frontendLogs = [];\n    this.refreshIntervalId = null;\n    this.backendLogsManager = this.options.backendLogsManager;\n    this.originalConsole = {\n      log: console.log,\n      info: console.info,\n      warn: console.warn,\n      error: console.error,\n      debug: console.debug\n    };\n    \n    // Initialize UI\n    this.initializeUI();\n    \n    // Initialize backend logs manager\n    this.initializeBackendLogsManager();\n    \n    // Hook into console methods to capture frontend logs\n    if (this.options.showFrontendLogs) {\n      this.hookConsole();\n    }\n  }\n  \n  /**\n   * Initializes the UI elements\n   */\n  private initializeUI(): void {\n    if (!this.container) {\n      console.error('LogsViewer: Cannot find container element with ID', this.options.logsContainerId);\n      return;\n    }\n    \n    // Create frontend/backend tabs UI if both are enabled\n    if (this.options.showFrontendLogs && this.options.showBackendLogs) {\n      // Create tabs container\n      const tabsContainer = document.createElement('div');\n      tabsContainer.className = 'logs-tabs mb-4 border-b border-border';\n      \n      // Create frontend tab\n      this.frontendLogsTab = document.createElement('button');\n      this.frontendLogsTab.className = 'logs-tab px-4 py-2 mr-2';\n      this.frontendLogsTab.textContent = 'Frontend Logs';\n      this.frontendLogsTab.addEventListener('click', () => this.switchTab('frontend'));\n      \n      // Create backend tab\n      this.backendLogsTab = document.createElement('button');\n      this.backendLogsTab.className = 'logs-tab px-4 py-2';\n      this.backendLogsTab.textContent = 'Backend Logs';\n      this.backendLogsTab.addEventListener('click', () => this.switchTab('backend'));\n      \n      // Add tabs to container\n      tabsContainer.appendChild(this.frontendLogsTab);\n      tabsContainer.appendChild(this.backendLogsTab);\n      \n      // Add tabs container to main container\n      this.container.appendChild(tabsContainer);\n      \n      // Create frontend logs container\n      this.frontendLogsContainer = document.createElement('div');\n      this.frontendLogsContainer.className = 'logs-container hidden';\n      \n      // Create frontend logs filter controls\n      const frontendFiltersContainer = document.createElement('div');\n      frontendFiltersContainer.className = 'logs-filter-container mb-4 flex items-center space-x-2';\n      frontendFiltersContainer.innerHTML = `\n        <div class=\"flex space-x-2\">\n          <label class=\"flex items-center\">\n            <input type=\"checkbox\" id=\"filter-debug\" checked class=\"mr-1\"> DEBUG\n          </label>\n          <label class=\"flex items-center\">\n            <input type=\"checkbox\" id=\"filter-info\" checked class=\"mr-1\"> INFO\n          </label>\n          <label class=\"flex items-center\">\n            <input type=\"checkbox\" id=\"filter-warning\" checked class=\"mr-1\"> WARNING\n          </label>\n          <label class=\"flex items-center\">\n            <input type=\"checkbox\" id=\"filter-error\" checked class=\"mr-1\"> ERROR\n          </label>\n        </div>\n        <div class=\"flex-1\">\n          <input type=\"text\" id=\"frontend-logs-search\" placeholder=\"Search logs...\" class=\"w-full px-2 py-1 border border-border rounded bg-bg\">\n        </div>\n        <button id=\"clear-frontend-logs-btn\" class=\"px-2 py-1 bg-bg-sidebar text-text-muted hover:bg-bg-card rounded\">Clear</button>\n      `;\n      \n      // Create frontend logs list\n      this.frontendLogsList = document.createElement('div');\n      this.frontendLogsList.id = 'frontend-logs-list';\n      this.frontendLogsList.className = 'logs-list overflow-y-auto max-h-[calc(100vh-300px)]';\n      this.frontendLogsList.innerHTML = '<div class=\"text-center text-text-muted p-4\">No frontend logs to display</div>';\n      \n      // Add everything to frontend container\n      this.frontendLogsContainer.appendChild(frontendFiltersContainer);\n      this.frontendLogsContainer.appendChild(this.frontendLogsList);\n      \n      // Create backend logs container\n      this.backendLogsContainer = document.createElement('div');\n      this.backendLogsContainer.className = 'logs-container';\n      \n      // Create backend logs filter controls\n      const backendFiltersContainer = document.createElement('div');\n      backendFiltersContainer.className = 'logs-filter-container mb-4';\n      backendFiltersContainer.innerHTML = `\n        <div class=\"flex items-center justify-between mb-2\">\n          <div class=\"flex space-x-2\">\n            <label class=\"flex items-center\">\n              <input type=\"checkbox\" id=\"backend-filter-debug\" checked class=\"mr-1\"> DEBUG\n            </label>\n            <label class=\"flex items-center\">\n              <input type=\"checkbox\" id=\"backend-filter-info\" checked class=\"mr-1\"> INFO\n            </label>\n            <label class=\"flex items-center\">\n              <input type=\"checkbox\" id=\"backend-filter-warning\" checked class=\"mr-1\"> WARNING\n            </label>\n            <label class=\"flex items-center\">\n              <input type=\"checkbox\" id=\"backend-filter-error\" checked class=\"mr-1\"> ERROR\n            </label>\n          </div>\n          <button id=\"refresh-backend-logs-btn\" class=\"px-2 py-1 bg-primary-600 text-white hover:bg-primary-700 rounded\">Refresh</button>\n        </div>\n        <div class=\"flex space-x-2\">\n          <input type=\"text\" id=\"backend-logs-search\" placeholder=\"Search logs...\" class=\"flex-1 px-2 py-1 border border-border rounded bg-bg\">\n          ${this.options.enableCorrelationIdFiltering ? \n            `<input type=\"text\" id=\"backend-correlation-id\" placeholder=\"Filter by correlation ID\" class=\"w-1/3 px-2 py-1 border border-border rounded bg-bg\">` : ''}\n          <label class=\"flex items-center\">\n            <input type=\"checkbox\" id=\"backend-auto-refresh\" ${this.options.autoRefreshBackendLogs ? 'checked' : ''} class=\"mr-1\"> Auto-refresh\n          </label>\n          <button id=\"clear-backend-logs-btn\" class=\"px-2 py-1 bg-bg-sidebar text-text-muted hover:bg-bg-card rounded\">Clear</button>\n        </div>\n      `;\n      \n      // Create backend logs list\n      this.backendLogsList = document.createElement('div');\n      this.backendLogsList.id = 'backend-logs-list';\n      this.backendLogsList.className = 'logs-list overflow-y-auto max-h-[calc(100vh-350px)] mt-4';\n      this.backendLogsList.innerHTML = '<div class=\"text-center text-text-muted p-4\">No backend logs to display</div>';\n      \n      // Add everything to backend container\n      this.backendLogsContainer.appendChild(backendFiltersContainer);\n      this.backendLogsContainer.appendChild(this.backendLogsList);\n      \n      // Add both containers to main container\n      this.container.appendChild(this.frontendLogsContainer);\n      this.container.appendChild(this.backendLogsContainer);\n      \n      // Set up event listeners for filter controls\n      this.setupFilterEventListeners();\n      \n      // Set active tab\n      this.switchTab(this.activeTab);\n    } else if (this.options.showBackendLogs) {\n      // Only backend logs are enabled - simpler UI\n      this.backendLogsContainer = this.container;\n      \n      // Create backend logs filter controls\n      const filtersContainer = document.createElement('div');\n      filtersContainer.className = 'logs-filter-container mb-4';\n      filtersContainer.innerHTML = `\n        <div class=\"flex items-center justify-between mb-2\">\n          <div class=\"flex space-x-2\">\n            <label class=\"flex items-center\">\n              <input type=\"checkbox\" id=\"backend-filter-debug\" checked class=\"mr-1\"> DEBUG\n            </label>\n            <label class=\"flex items-center\">\n              <input type=\"checkbox\" id=\"backend-filter-info\" checked class=\"mr-1\"> INFO\n            </label>\n            <label class=\"flex items-center\">\n              <input type=\"checkbox\" id=\"backend-filter-warning\" checked class=\"mr-1\"> WARNING\n            </label>\n            <label class=\"flex items-center\">\n              <input type=\"checkbox\" id=\"backend-filter-error\" checked class=\"mr-1\"> ERROR\n            </label>\n          </div>\n          <button id=\"refresh-backend-logs-btn\" class=\"px-2 py-1 bg-primary-600 text-white hover:bg-primary-700 rounded\">Refresh</button>\n        </div>\n        <div class=\"flex space-x-2\">\n          <input type=\"text\" id=\"backend-logs-search\" placeholder=\"Search logs...\" class=\"flex-1 px-2 py-1 border border-border rounded bg-bg\">\n          ${this.options.enableCorrelationIdFiltering ? \n            `<input type=\"text\" id=\"backend-correlation-id\" placeholder=\"Filter by correlation ID\" class=\"w-1/3 px-2 py-1 border border-border rounded bg-bg\">` : ''}\n          <label class=\"flex items-center\">\n            <input type=\"checkbox\" id=\"backend-auto-refresh\" ${this.options.autoRefreshBackendLogs ? 'checked' : ''} class=\"mr-1\"> Auto-refresh\n          </label>\n          <button id=\"clear-backend-logs-btn\" class=\"px-2 py-1 bg-bg-sidebar text-text-muted hover:bg-bg-card rounded\">Clear</button>\n        </div>\n      `;\n      \n      // Create backend logs list\n      this.backendLogsList = document.createElement('div');\n      this.backendLogsList.id = 'backend-logs-list';\n      this.backendLogsList.className = 'logs-list overflow-y-auto max-h-[calc(100vh-250px)] mt-4';\n      this.backendLogsList.innerHTML = '<div class=\"text-center text-text-muted p-4\">No logs to display</div>';\n      \n      // Add everything to container\n      this.container.appendChild(filtersContainer);\n      this.container.appendChild(this.backendLogsList);\n      \n      // Set up event listeners\n      this.setupFilterEventListeners();\n    } else if (this.options.showFrontendLogs) {\n      // Only frontend logs are enabled - simpler UI\n      this.frontendLogsContainer = this.container;\n      \n      // Create frontend logs filter controls\n      const filtersContainer = document.createElement('div');\n      filtersContainer.className = 'logs-filter-container mb-4';\n      filtersContainer.innerHTML = `\n        <div class=\"flex items-center justify-between\">\n          <div class=\"flex space-x-2\">\n            <label class=\"flex items-center\">\n              <input type=\"checkbox\" id=\"filter-debug\" checked class=\"mr-1\"> DEBUG\n            </label>\n            <label class=\"flex items-center\">\n              <input type=\"checkbox\" id=\"filter-info\" checked class=\"mr-1\"> INFO\n            </label>\n            <label class=\"flex items-center\">\n              <input type=\"checkbox\" id=\"filter-warning\" checked class=\"mr-1\"> WARNING\n            </label>\n            <label class=\"flex items-center\">\n              <input type=\"checkbox\" id=\"filter-error\" checked class=\"mr-1\"> ERROR\n            </label>\n          </div>\n          <button id=\"clear-frontend-logs-btn\" class=\"px-2 py-1 bg-bg-sidebar text-text-muted hover:bg-bg-card rounded\">Clear</button>\n        </div>\n        <div class=\"mt-2\">\n          <input type=\"text\" id=\"frontend-logs-search\" placeholder=\"Search logs...\" class=\"w-full px-2 py-1 border border-border rounded bg-bg\">\n        </div>\n      `;\n      \n      // Create frontend logs list\n      this.frontendLogsList = document.createElement('div');\n      this.frontendLogsList.id = 'frontend-logs-list';\n      this.frontendLogsList.className = 'logs-list overflow-y-auto max-h-[calc(100vh-200px)] mt-4';\n      this.frontendLogsList.innerHTML = '<div class=\"text-center text-text-muted p-4\">No logs to display</div>';\n      \n      // Add everything to container\n      this.container.appendChild(filtersContainer);\n      this.container.appendChild(this.frontendLogsList);\n      \n      // Set up event listeners\n      this.setupFilterEventListeners();\n    }\n  }\n  \n  /**\n   * Initializes backend logs manager\n   */\n  private initializeBackendLogsManager(): void {\n    if (!this.backendLogsManager || !this.options.showBackendLogs) {\n      return;\n    }\n    \n    // Listen for logs loaded event\n    this.backendLogsManager.on('logs:loaded', (_data: any) => {\n      this.renderBackendLogs();\n    });\n    \n    // Set up auto-refresh\n    if (this.options.autoRefreshBackendLogs && this.options.refreshInterval > 0) {\n      this.startAutoRefresh();\n    }\n    \n    // Initial fetch\n    this.refreshBackendLogs();\n  }\n  \n  /**\n   * Sets up event listeners for filters\n   */\n  private setupFilterEventListeners(): void {\n    // Frontend logs filter event listeners\n    if (this.options.showFrontendLogs) {\n      // Level filters\n      ['debug', 'info', 'warning', 'error'].forEach(level => {\n        const checkbox = document.getElementById(`filter-${level}`);\n        if (checkbox) {\n          checkbox.addEventListener('change', () => this.renderFrontendLogs());\n        }\n      });\n      \n      // Search filter\n      const searchInput = document.getElementById('frontend-logs-search');\n      if (searchInput) {\n        searchInput.addEventListener('input', () => this.renderFrontendLogs());\n      }\n      \n      // Clear button\n      const clearButton = document.getElementById('clear-frontend-logs-btn');\n      if (clearButton) {\n        clearButton.addEventListener('click', () => this.clearFrontendLogs());\n      }\n    }\n    \n    // Backend logs filter event listeners\n    if (this.options.showBackendLogs) {\n      // Level filters\n      ['debug', 'info', 'warning', 'error'].forEach(level => {\n        const checkbox = document.getElementById(`backend-filter-${level}`);\n        if (checkbox) {\n          checkbox.addEventListener('change', () => this.renderBackendLogs());\n        }\n      });\n      \n      // Search filter\n      const searchInput = document.getElementById('backend-logs-search');\n      if (searchInput) {\n        searchInput.addEventListener('input', () => this.renderBackendLogs());\n      }\n      \n      // Correlation ID filter\n      const correlationIdInput = document.getElementById('backend-correlation-id');\n      if (correlationIdInput) {\n        correlationIdInput.addEventListener('input', () => this.renderBackendLogs());\n      }\n      \n      // Refresh button\n      const refreshButton = document.getElementById('refresh-backend-logs-btn');\n      if (refreshButton) {\n        refreshButton.addEventListener('click', () => this.refreshBackendLogs());\n      }\n      \n      // Auto-refresh checkbox\n      const autoRefreshCheckbox = document.getElementById('backend-auto-refresh') as HTMLInputElement;\n      if (autoRefreshCheckbox) {\n        autoRefreshCheckbox.addEventListener('change', () => {\n          if (autoRefreshCheckbox.checked) {\n            this.startAutoRefresh();\n          } else {\n            this.stopAutoRefresh();\n          }\n        });\n      }\n      \n      // Clear button\n      const clearButton = document.getElementById('clear-backend-logs-btn');\n      if (clearButton) {\n        clearButton.addEventListener('click', () => this.clearBackendLogs());\n      }\n    }\n  }\n  \n  /**\n   * Switches between frontend and backend logs tabs\n   * @param tab The tab to switch to\n   */\n  private switchTab(tab: 'frontend' | 'backend'): void {\n    if (!this.options.showFrontendLogs || !this.options.showBackendLogs) {\n      return;\n    }\n    \n    this.activeTab = tab;\n    \n    // Update tab buttons\n    if (this.frontendLogsTab && this.backendLogsTab) {\n      this.frontendLogsTab.classList.toggle('border-b-2', tab === 'frontend');\n      this.frontendLogsTab.classList.toggle('border-primary-500', tab === 'frontend');\n      this.frontendLogsTab.classList.toggle('text-primary-500', tab === 'frontend');\n      this.frontendLogsTab.classList.toggle('font-medium', tab === 'frontend');\n      \n      this.backendLogsTab.classList.toggle('border-b-2', tab === 'backend');\n      this.backendLogsTab.classList.toggle('border-primary-500', tab === 'backend');\n      this.backendLogsTab.classList.toggle('text-primary-500', tab === 'backend');\n      this.backendLogsTab.classList.toggle('font-medium', tab === 'backend');\n    }\n    \n    // Show/hide containers\n    if (this.frontendLogsContainer && this.backendLogsContainer) {\n      this.frontendLogsContainer.classList.toggle('hidden', tab !== 'frontend');\n      this.backendLogsContainer.classList.toggle('hidden', tab !== 'backend');\n    }\n    \n    // Render appropriate logs\n    if (tab === 'frontend') {\n      this.renderFrontendLogs();\n    } else {\n      this.renderBackendLogs();\n    }\n  }\n  \n  /**\n   * Renders frontend logs based on current filters\n   */\n  private renderFrontendLogs(): void {\n    if (!this.frontendLogsList || !this.options.showFrontendLogs) {\n      return;\n    }\n    \n    // Apply filters\n    const filteredLogs = this.getFilteredFrontendLogs();\n    \n    if (filteredLogs.length === 0) {\n      this.frontendLogsList.innerHTML = '<div class=\"text-center text-text-muted p-4\">No logs match your filters</div>';\n      return;\n    }\n    \n    // Clear logs list\n    this.frontendLogsList.innerHTML = '';\n    \n    // Sort logs by timestamp (newest first)\n    filteredLogs.sort((a, b) => {\n      const dateA = new Date(a.timestamp).getTime();\n      const dateB = new Date(b.timestamp).getTime();\n      return dateB - dateA;\n    });\n    \n    // Render logs\n    filteredLogs.forEach(log => {\n      const logElement = document.createElement('div');\n      logElement.className = 'log-entry border-b border-border p-2';\n      \n      const formattedTime = new Date(log.timestamp).toLocaleTimeString();\n      const formattedDate = new Date(log.timestamp).toLocaleDateString();\n      \n      logElement.innerHTML = `\n        <div class=\"log-entry-header flex items-center text-xs text-text-muted mb-1\">\n          <span class=\"log-level log-level-${log.level} px-1 py-0.5 rounded text-white mr-2\" style=\"background-color: ${this.getLevelColor(log.level)}\">\n            ${log.level}\n          </span>\n          <span class=\"log-timestamp mr-2\">${formattedDate} ${formattedTime}</span>\n          ${log.correlationId ? `<span class=\"log-correlation-id bg-bg-sidebar px-1.5 py-0.5 rounded text-xs\" title=\"${log.correlationId}\">ID: ${log.correlationId.substring(0, 8)}...</span>` : ''}\n        </div>\n        <div class=\"log-message text-sm\">${log.message}</div>\n        ${log.data ? `<div class=\"log-data mt-1 bg-bg-sidebar p-2 rounded text-xs font-mono\">${this.formatJson(log.data)}</div>` : ''}\n      `;\n      \n      this.frontendLogsList.appendChild(logElement);\n    });\n  }\n  \n  /**\n   * Renders backend logs based on current filters\n   */\n  private renderBackendLogs(): void {\n    if (!this.backendLogsList || !this.backendLogsManager || !this.options.showBackendLogs) {\n      return;\n    }\n    \n    // Get logs from backend logs manager\n    const logs = this.backendLogsManager.getLogs();\n    \n    // Apply filters\n    const filteredLogs = this.getFilteredBackendLogs(logs);\n    \n    if (filteredLogs.length === 0) {\n      this.backendLogsList.innerHTML = '<div class=\"text-center text-text-muted p-4\">No logs match your filters</div>';\n      return;\n    }\n    \n    // Count AI logs and domain events for the counter badges\n    const aiLogCount = filteredLogs.filter(log => this.isAiLog(log)).length;\n    const domainEventCount = filteredLogs.filter(log => this.isDomainEventLog(log)).length;\n    \n    // Clear logs list\n    this.backendLogsList.innerHTML = '';\n    \n    // Add counters if we have special logs\n    if (aiLogCount > 0 || domainEventCount > 0) {\n      const countersElement = document.createElement('div');\n      countersElement.className = 'flex space-x-2 mb-2 text-xs';\n      \n      if (aiLogCount > 0) {\n        countersElement.innerHTML += `\n          <div class=\"bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100 px-2 py-1 rounded flex items-center\">\n            <span class=\"font-medium mr-1\">${aiLogCount}</span> AI logs\n          </div>\n        `;\n      }\n      \n      if (domainEventCount > 0) {\n        countersElement.innerHTML += `\n          <div class=\"bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100 px-2 py-1 rounded flex items-center\">\n            <span class=\"font-medium mr-1\">${domainEventCount}</span> Domain events\n          </div>\n        `;\n      }\n      \n      this.backendLogsList.appendChild(countersElement);\n    }\n    \n    // Sort logs by timestamp (newest first)\n    filteredLogs.sort((a, b) => {\n      const dateA = new Date(a.timestamp).getTime();\n      const dateB = new Date(b.timestamp).getTime();\n      return dateB - dateA;\n    });\n    \n    // Render logs\n    filteredLogs.forEach(log => {\n      const logElement = document.createElement('div');\n      logElement.className = 'log-entry border-b border-border p-2 mb-2';\n      \n      const formattedTime = new Date(log.timestamp).toLocaleTimeString();\n      const formattedDate = new Date(log.timestamp).toLocaleDateString();\n      \n      // Check if this is an AI-related log\n      const isAiLog = this.isAiLog(log);\n      \n      // Check if this is a domain event log\n      const isDomainEvent = this.isDomainEventLog(log);\n      \n      const logType = isDomainEvent ? 'domain-event-log' : (isAiLog ? 'ai-log' : '');\n      \n      if (isAiLog) {\n        logElement.classList.add('border-l-2', 'border-l-green-500', 'bg-green-50/10');\n      } else if (isDomainEvent) {\n        logElement.classList.add('border-l-2', 'border-l-blue-500', 'bg-blue-50/10');\n      }\n      \n      // Create expandable/collapsible log entry\n      const headerHtml = `\n        <div class=\"log-entry-header flex flex-wrap items-center text-xs text-text-muted mb-1\">\n          <span class=\"log-level log-level-${log.level} px-1 py-0.5 rounded text-white mr-2\" style=\"background-color: ${this.getLevelColor(log.level)}\">\n            ${log.level}\n          </span>\n          <span class=\"log-timestamp mr-2\">${formattedDate} ${formattedTime}</span>\n          ${log.meta?.correlationId ? \n            `<span class=\"log-correlation-id bg-bg-sidebar px-1.5 py-0.5 rounded text-xs mr-2\" title=\"${log.meta.correlationId}\">ID: ${log.meta.correlationId.substring(0, 8)}...</span>` : \n            ''}\n          ${log.service ? `<span class=\"log-service-badge bg-gray-500 text-white px-1.5 py-0.5 rounded text-xs mr-2\">${log.service}</span>` : ''}\n          ${isAiLog ? '<span class=\"ai-log-badge bg-green-600 text-white px-1.5 py-0.5 rounded text-xs mr-2\">AI</span>' : ''}\n          ${isDomainEvent ? '<span class=\"domain-event-badge bg-blue-600 text-white px-1.5 py-0.5 rounded text-xs mr-2\">Event</span>' : ''}\n          <span class=\"expand-icon ml-auto bg-bg-sidebar rounded-full h-4 w-4 inline-flex items-center justify-center text-xs font-bold cursor-pointer\">+</span>\n        </div>\n      `;\n      \n      let detailsHtml = '';\n      \n      // Only add details if we have expandable content\n      if ((log.meta && Object.keys(log.meta).length > 0) || \n          (log.context && Object.keys(log.context).length > 0) || \n          isAiLog || \n          isDomainEvent) {\n        \n        detailsHtml = `\n          <div class=\"log-details hidden mt-2\">\n            <div class=\"log-details-tabs flex border-b border-border\">\n              <button class=\"log-tab active py-1 px-3 text-xs\" data-tab=\"meta\">Metadata</button>\n              ${log.context ? '<button class=\"log-tab py-1 px-3 text-xs\" data-tab=\"context\">Context</button>' : ''}\n              ${isAiLog ? '<button class=\"log-tab py-1 px-3 text-xs\" data-tab=\"ai\">AI Details</button>' : ''}\n              ${isDomainEvent ? '<button class=\"log-tab py-1 px-3 text-xs\" data-tab=\"event\">Event Details</button>' : ''}\n            </div>\n            \n            <div class=\"log-details-content mt-2\">\n              <div class=\"log-tab-content active\" data-tab=\"meta\">\n                ${log.meta ? `<div class=\"log-meta\"><pre class=\"text-xs bg-bg-sidebar p-2 rounded overflow-auto max-h-60\">${this.formatJson(log.meta)}</pre></div>` : '<p class=\"text-xs text-text-muted\">No metadata available</p>'}\n                ${log.service ? `<div class=\"log-service mt-1\"><strong class=\"text-xs\">Service:</strong> ${log.service}</div>` : ''}\n              </div>\n              \n              ${log.context ? `\n              <div class=\"log-tab-content hidden\" data-tab=\"context\">\n                <pre class=\"text-xs bg-bg-sidebar p-2 rounded overflow-auto max-h-60\">${this.formatJson(log.context)}</pre>\n              </div>\n              ` : ''}\n              \n              ${isAiLog ? `\n              <div class=\"log-tab-content hidden\" data-tab=\"ai\">\n                ${this.formatAiLogDetails(log)}\n              </div>\n              ` : ''}\n              \n              ${isDomainEvent ? `\n              <div class=\"log-tab-content hidden\" data-tab=\"event\">\n                ${this.formatDomainEventDetails(log)}\n              </div>\n              ` : ''}\n            </div>\n          </div>\n        `;\n      }\n      \n      // Add message\n      const messageHtml = `<div class=\"log-message text-sm\">${log.message}</div>`;\n      \n      // Combine all parts\n      logElement.innerHTML = headerHtml + messageHtml + detailsHtml;\n      \n      // Add click handlers for expanding/collapsing\n      const header = logElement.querySelector('.log-entry-header');\n      const details = logElement.querySelector('.log-details');\n      const expandIcon = logElement.querySelector('.expand-icon');\n      \n      if (header && details && expandIcon) {\n        header.addEventListener('click', () => {\n          details.classList.toggle('hidden');\n          expandIcon.textContent = details.classList.contains('hidden') ? '+' : '-';\n        });\n      }\n      \n      // Add tab switching functionality\n      const tabs = logElement.querySelectorAll('.log-tab');\n      tabs.forEach(tab => {\n        tab.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent header click handler from firing\n          \n          // Update active tab\n          tabs.forEach(t => t.classList.remove('active'));\n          tab.classList.add('active');\n          \n          // Show corresponding content\n          const tabContents = logElement.querySelectorAll('.log-tab-content');\n          const targetTab = tab.getAttribute('data-tab');\n          \n          tabContents.forEach(content => {\n            content.classList.toggle('hidden', content.getAttribute('data-tab') !== targetTab);\n            content.classList.toggle('active', content.getAttribute('data-tab') === targetTab);\n          });\n        });\n      });\n      \n      this.backendLogsList.appendChild(logElement);\n    });\n  }\n  \n  /**\n   * Gets filtered frontend logs based on current filter settings\n   * @returns Array of filtered log entries\n   */\n  private getFilteredFrontendLogs(): LogEntry[] {\n    let filteredLogs = [...this.frontendLogs];\n    \n    // Apply level filters\n    const levelFilters: Record<string, boolean> = {\n      debug: document.getElementById('filter-debug') instanceof HTMLInputElement ? (document.getElementById('filter-debug') as HTMLInputElement).checked : true,\n      info: document.getElementById('filter-info') instanceof HTMLInputElement ? (document.getElementById('filter-info') as HTMLInputElement).checked : true,\n      warning: document.getElementById('filter-warning') instanceof HTMLInputElement ? (document.getElementById('filter-warning') as HTMLInputElement).checked : true,\n      error: document.getElementById('filter-error') instanceof HTMLInputElement ? (document.getElementById('filter-error') as HTMLInputElement).checked : true\n    };\n    \n    filteredLogs = filteredLogs.filter(log => {\n      const level = log.level.toLowerCase();\n      return levelFilters[level] || false;\n    });\n    \n    // Apply search filter\n    const searchInput = document.getElementById('frontend-logs-search') as HTMLInputElement;\n    if (searchInput && searchInput.value.trim()) {\n      const searchTerm = searchInput.value.trim().toLowerCase();\n      filteredLogs = filteredLogs.filter(log => {\n        return log.message.toLowerCase().includes(searchTerm) || \n              (log.correlationId && log.correlationId.toLowerCase().includes(searchTerm)) ||\n              (log.data && JSON.stringify(log.data).toLowerCase().includes(searchTerm));\n      });\n    }\n    \n    return filteredLogs;\n  }\n  \n  /**\n   * Gets filtered backend logs based on current filter settings\n   * @param logs The logs to filter\n   * @returns Array of filtered log entries\n   */\n  private getFilteredBackendLogs(logs: any[]): any[] {\n    if (!logs || !Array.isArray(logs)) {\n      return [];\n    }\n    \n    let filteredLogs = [...logs];\n    \n    // Apply level filters\n    const levelFilters: Record<string, boolean> = {\n      debug: document.getElementById('backend-filter-debug') instanceof HTMLInputElement ? (document.getElementById('backend-filter-debug') as HTMLInputElement).checked : true,\n      info: document.getElementById('backend-filter-info') instanceof HTMLInputElement ? (document.getElementById('backend-filter-info') as HTMLInputElement).checked : true,\n      warning: document.getElementById('backend-filter-warning') instanceof HTMLInputElement ? (document.getElementById('backend-filter-warning') as HTMLInputElement).checked : true,\n      error: document.getElementById('backend-filter-error') instanceof HTMLInputElement ? (document.getElementById('backend-filter-error') as HTMLInputElement).checked : true\n    };\n    \n    filteredLogs = filteredLogs.filter(log => {\n      const level = log.level ? log.level.toLowerCase() : 'info';\n      return levelFilters[level] || false;\n    });\n    \n    // Apply correlation ID filter if enabled\n    if (this.options.enableCorrelationIdFiltering) {\n      const correlationIdInput = document.getElementById('backend-correlation-id') as HTMLInputElement;\n      if (correlationIdInput && correlationIdInput.value.trim()) {\n        const correlationId = correlationIdInput.value.trim();\n        filteredLogs = filteredLogs.filter(log => {\n          return (log.meta?.correlationId && log.meta.correlationId.includes(correlationId)) ||\n                  (log.correlationId && log.correlationId.includes(correlationId));\n        });\n      }\n    }\n    \n    // Apply search filter if enabled\n    if (this.options.enableSearchFiltering) {\n      const searchInput = document.getElementById('backend-logs-search') as HTMLInputElement;\n      if (searchInput && searchInput.value.trim()) {\n        const searchTerm = searchInput.value.trim().toLowerCase();\n        filteredLogs = filteredLogs.filter(log => {\n          return log.message.toLowerCase().includes(searchTerm) || \n                (log.service && log.service.toLowerCase().includes(searchTerm)) ||\n                (log.meta && JSON.stringify(log.meta).toLowerCase().includes(searchTerm)) ||\n                (log.context && JSON.stringify(log.context).toLowerCase().includes(searchTerm));\n        });\n      }\n    }\n    \n    return filteredLogs;\n  }\n  \n  /**\n   * Gets color for a log level\n   * @param level The log level\n   * @returns CSS color value for the level\n   */\n  private getLevelColor(level: string): string {\n    switch (level.toUpperCase()) {\n      case 'DEBUG':\n        return '#6b7280'; // Gray\n      case 'INFO':\n        return '#3b82f6'; // Blue\n      case 'WARNING':\n        return '#f59e0b'; // Amber\n      case 'ERROR':\n        return '#ef4444'; // Red\n      default:\n        return '#6b7280'; // Gray\n    }\n  }\n  \n  /**\n   * Formats JSON for display\n   * @param obj Object to format\n   * @returns Formatted string\n   */\n  private formatJson(obj: any): string {\n    if (!obj) return '';\n    \n    try {\n      const formattedJson = JSON.stringify(obj, null, 2)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, (match) => {\n          let cls = 'text-blue-600 dark:text-blue-400';\n          if (/^\"/.test(match)) {\n            if (/:$/.test(match)) {\n              cls = 'text-gray-800 dark:text-gray-300 font-medium';\n            } else {\n              cls = 'text-green-600 dark:text-green-400';\n            }\n          } else if (/true|false/.test(match)) {\n            cls = 'text-purple-600 dark:text-purple-400';\n          } else if (/null/.test(match)) {\n            cls = 'text-gray-500 dark:text-gray-500';\n          }\n          return `<span class=\"${cls}\">${match}</span>`;\n        });\n      \n      return formattedJson;\n    } catch (e) {\n      console.error('Error formatting JSON:', e);\n      return String(obj);\n    }\n  }\n  \n  /**\n   * Formats AI log details for display\n   * @param log The log entry\n   * @returns Formatted HTML\n   */\n  private formatAiLogDetails(log: any): string {\n    if (!log || !this.options.enableAiLogFormatting) {\n      return '<p class=\"text-xs text-text-muted\">No AI details available</p>';\n    }\n    \n    try {\n      // Check for prompt/completion specific fields in either log.data or log.meta\n      const data = log.data || log.meta || {};\n      \n      if (!data.prompt && !data.completion && !data.messages) {\n        return '<p class=\"text-xs text-text-muted\">No AI details available</p>';\n      }\n      \n      let html = '<div class=\"ai-log-details space-y-3\">';\n      \n      // Add prompt if available\n      if (data.prompt) {\n        html += `\n          <div class=\"prompt-section\">\n            <div class=\"font-medium text-xs mb-1\">Prompt:</div>\n            <div class=\"bg-bg-sidebar p-2 rounded text-xs whitespace-pre-wrap\">${data.prompt}</div>\n          </div>\n        `;\n      }\n      \n      // Add messages if available (for chat models)\n      if (data.messages && Array.isArray(data.messages)) {\n        html += `\n          <div class=\"messages-section\">\n            <div class=\"font-medium text-xs mb-1\">Messages:</div>\n            <div class=\"space-y-2\">\n        `;\n        \n        data.messages.forEach((message: any, index: number) => {\n          const role = message.role || 'unknown';\n          const content = message.content || '';\n          const roleColorClass = role === 'user' ? 'bg-blue-100 text-blue-800' : \n                                role === 'assistant' ? 'bg-green-100 text-green-800' : \n                                role === 'system' ? 'bg-purple-100 text-purple-800' : \n                                'bg-gray-100 text-gray-800';\n          \n          html += `\n            <div class=\"message-item\">\n              <div class=\"font-medium text-xs inline-block ${roleColorClass} px-2 py-0.5 rounded mb-1\">${role}</div>\n              <div class=\"bg-bg-sidebar p-2 rounded text-xs whitespace-pre-wrap\">${content}</div>\n            </div>\n          `;\n        });\n        \n        html += `\n            </div>\n          </div>\n        `;\n      }\n      \n      // Add completion if available\n      if (data.completion) {\n        html += `\n          <div class=\"completion-section\">\n            <div class=\"font-medium text-xs mb-1\">Completion:</div>\n            <div class=\"bg-bg-sidebar p-2 rounded text-xs whitespace-pre-wrap\">${data.completion}</div>\n          </div>\n        `;\n      }\n      \n      // Add model information if available\n      if (data.model) {\n        html += `\n          <div class=\"model-info\">\n            <div class=\"font-medium text-xs inline-block bg-gray-100 text-gray-800 px-2 py-0.5 rounded\">Model: ${data.model}</div>\n          </div>\n        `;\n      }\n      \n      // Add token count information if available\n      if (data.usage) {\n        html += `\n          <div class=\"token-info flex flex-wrap gap-2\">\n            ${data.usage.prompt_tokens ? `<div class=\"font-medium text-xs inline-block bg-blue-100 text-blue-800 px-2 py-0.5 rounded\">Prompt tokens: ${data.usage.prompt_tokens}</div>` : ''}\n            ${data.usage.completion_tokens ? `<div class=\"font-medium text-xs inline-block bg-green-100 text-green-800 px-2 py-0.5 rounded\">Completion tokens: ${data.usage.completion_tokens}</div>` : ''}\n            ${data.usage.total_tokens ? `<div class=\"font-medium text-xs inline-block bg-gray-100 text-gray-800 px-2 py-0.5 rounded\">Total tokens: ${data.usage.total_tokens}</div>` : ''}\n          </div>\n        `;\n      }\n      \n      html += '</div>';\n      \n      return html;\n    } catch (e) {\n      console.error('Error formatting AI log details:', e);\n      return '<p class=\"text-xs text-text-muted\">Error formatting AI log details</p>';\n    }\n  }\n  \n  /**\n   * Formats domain event log details for display\n   * @param log The log entry\n   * @returns Formatted HTML\n   */\n  private formatDomainEventDetails(log: any): string {\n    if (!log || !this.options.enableDomainEventFormatting) {\n      return '<p class=\"text-xs text-text-muted\">No event details available</p>';\n    }\n    \n    try {\n      // Check for event data in either log.data or log.meta\n      const data = log.data || log.meta || {};\n      \n      if (!data.event && !data.eventType && !data.type) {\n        return '<p class=\"text-xs text-text-muted\">No event details available</p>';\n      }\n      \n      const eventType = data.eventType || data.type || data.event || 'Unknown Event';\n      const payload = data.payload || data.data || data;\n      \n      let html = `\n        <div class=\"event-details space-y-3\">\n          <div class=\"event-type flex items-center\">\n            <div class=\"font-medium text-xs inline-block bg-blue-100 text-blue-800 px-2 py-0.5 rounded\">\n              ${eventType}\n            </div>\n            ${data.timestamp ? `<div class=\"text-xs text-text-muted ml-2\">${new Date(data.timestamp).toLocaleString()}</div>` : ''}\n          </div>\n          \n          <div class=\"event-payload\">\n            <div class=\"font-medium text-xs mb-1\">Payload:</div>\n            <pre class=\"text-xs bg-bg-sidebar p-2 rounded overflow-auto max-h-60\">${this.formatJson(payload)}</pre>\n          </div>\n          \n          ${data.source ? `\n          <div class=\"event-source\">\n            <div class=\"font-medium text-xs mb-1\">Source:</div>\n            <div class=\"text-xs\">${data.source}</div>\n          </div>\n          ` : ''}\n          \n          ${data.correlationId ? `\n          <div class=\"event-correlation\">\n            <div class=\"font-medium text-xs mb-1\">Correlation ID:</div>\n            <div class=\"text-xs font-mono\">${data.correlationId}</div>\n          </div>\n          ` : ''}\n        </div>\n      `;\n      \n      return html;\n    } catch (e) {\n      console.error('Error formatting domain event details:', e);\n      return '<p class=\"text-xs text-text-muted\">Error formatting event details</p>';\n    }\n  }\n  \n  /**\n   * Determines if a log entry is an AI-related log\n   * @param log The log entry to check\n   * @returns True if the log is AI-related\n   */\n  private isAiLog(log: any): boolean {\n    if (!log) return false;\n    \n    // Check message content for AI-related keywords\n    const messageIndicators = [\n      'openai',\n      'gpt-',\n      'ai response',\n      'ai request',\n      'ai completion',\n      'llm',\n      'model response',\n      'prompt'\n    ];\n    \n    if (log.message && typeof log.message === 'string') {\n      for (const indicator of messageIndicators) {\n        if (log.message.toLowerCase().includes(indicator)) {\n          return true;\n        }\n      }\n    }\n    \n    // Check data or meta for AI-specific fields\n    const data = log.data || log.meta || {};\n    \n    if (data.model && typeof data.model === 'string' && data.model.includes('gpt-')) {\n      return true;\n    }\n    \n    if (data.prompt || data.completion || (data.messages && Array.isArray(data.messages))) {\n      return true;\n    }\n    \n    // Check service name\n    if (log.service && typeof log.service === 'string') {\n      const serviceIndicators = ['openai', 'ai', 'llm', 'gpt'];\n      for (const indicator of serviceIndicators) {\n        if (log.service.toLowerCase().includes(indicator)) {\n          return true;\n        }\n      }\n    }\n    \n    return false;\n  }\n  \n  /**\n   * Determines if a log entry is a domain event\n   * @param log The log entry to check\n   * @returns True if the log is a domain event\n   */\n  private isDomainEventLog(log: any): boolean {\n    if (!log) return false;\n    \n    // Check message content for event-related keywords\n    const messageIndicators = [\n      'event emitted',\n      'event received',\n      'domain event',\n      'event dispatched',\n      'dispatching event',\n      'event published',\n      'event processed'\n    ];\n    \n    if (log.message && typeof log.message === 'string') {\n      for (const indicator of messageIndicators) {\n        if (log.message.toLowerCase().includes(indicator)) {\n          return true;\n        }\n      }\n    }\n    \n    // Check data or meta for event-specific fields\n    const data = log.data || log.meta || {};\n    \n    if (data.eventType || data.type || data.event) {\n      return true;\n    }\n    \n    // Check if message contains event name pattern\n    const eventPatterns = [\n      /Event\\s+[A-Z][a-zA-Z]+Event/,\n      /[A-Z][a-zA-Z]+Event/,\n      /Event\\s+[A-Z][a-zA-Z]+/\n    ];\n    \n    if (log.message && typeof log.message === 'string') {\n      for (const pattern of eventPatterns) {\n        if (pattern.test(log.message)) {\n          return true;\n        }\n      }\n    }\n    \n    return false;\n  }\n  \n  /**\n   * Hooks into console methods to capture frontend logs\n   */\n  private hookConsole(): void {\n    const addFrontendLog = (level: string, args: any[]) => {\n      // Create log entry\n      const entry: LogEntry = {\n        timestamp: new Date().toISOString(),\n        level: level.toUpperCase(),\n        message: args.map(arg => (typeof arg === 'object' ? JSON.stringify(arg) : String(arg))).join(' '),\n        correlationId: this.getCurrentCorrelationId(),\n        data: args.length === 1 && typeof args[0] === 'object' ? args[0] : null\n      };\n      \n      // Add to frontend logs\n      this.frontendLogs.push(entry);\n      \n      // Limit number of logs\n      if (this.frontendLogs.length > this.options.maxFrontendLogs) {\n        this.frontendLogs.shift();\n      }\n      \n      // Render if frontend tab is active\n      if (this.activeTab === 'frontend') {\n        this.renderFrontendLogs();\n      }\n    };\n    \n    // Override console methods\n    console.debug = (...args: any[]) => {\n      this.originalConsole.debug.apply(console, args);\n      addFrontendLog('debug', args);\n    };\n    \n    console.log = (...args: any[]) => {\n      this.originalConsole.log.apply(console, args);\n      addFrontendLog('info', args);\n    };\n    \n    console.info = (...args: any[]) => {\n      this.originalConsole.info.apply(console, args);\n      addFrontendLog('info', args);\n    };\n    \n    console.warn = (...args: any[]) => {\n      this.originalConsole.warn.apply(console, args);\n      addFrontendLog('warning', args);\n    };\n    \n    console.error = (...args: any[]) => {\n      this.originalConsole.error.apply(console, args);\n      addFrontendLog('error', args);\n    };\n  }\n  \n  /**\n   * Restores original console methods\n   */\n  private unhookConsole(): void {\n    console.log = this.originalConsole.log;\n    console.info = this.originalConsole.info;\n    console.warn = this.originalConsole.warn;\n    console.error = this.originalConsole.error;\n    console.debug = this.originalConsole.debug;\n  }\n  \n  /**\n   * Gets the current correlation ID from meta elements or localStorage\n   */\n  private getCurrentCorrelationId(): string | undefined {\n    // Try to get from meta tag\n    const metaCorrelationId = document.querySelector('meta[name=\"correlation-id\"]');\n    if (metaCorrelationId && metaCorrelationId.getAttribute('content')) {\n      return metaCorrelationId.getAttribute('content') || undefined;\n    }\n    \n    // Try to get from localStorage\n    return localStorage.getItem('correlationId') || undefined;\n  }\n  \n  /**\n   * Starts auto-refresh for backend logs\n   */\n  private startAutoRefresh(): void {\n    this.stopAutoRefresh();\n    \n    if (this.options.refreshInterval > 0) {\n      this.refreshIntervalId = window.setInterval(() => {\n        this.refreshBackendLogs();\n      }, this.options.refreshInterval);\n    }\n    \n    // Update UI\n    const autoRefreshCheckbox = document.getElementById('backend-auto-refresh') as HTMLInputElement;\n    if (autoRefreshCheckbox) {\n      autoRefreshCheckbox.checked = true;\n    }\n  }\n  \n  /**\n   * Stops auto-refresh for backend logs\n   */\n  private stopAutoRefresh(): void {\n    if (this.refreshIntervalId !== null) {\n      window.clearInterval(this.refreshIntervalId);\n      this.refreshIntervalId = null;\n    }\n    \n    // Update UI\n    const autoRefreshCheckbox = document.getElementById('backend-auto-refresh') as HTMLInputElement;\n    if (autoRefreshCheckbox) {\n      autoRefreshCheckbox.checked = false;\n    }\n  }\n  \n  /**\n   * Public method to refresh backend logs\n   */\n  public refreshBackendLogs(): void {\n    if (this.backendLogsManager) {\n      this.backendLogsManager.fetchLogs();\n    }\n  }\n  \n  /**\n   * Public method to clear frontend logs\n   */\n  public clearFrontendLogs(): void {\n    this.frontendLogs = [];\n    this.renderFrontendLogs();\n  }\n  \n  /**\n   * Public method to clear backend logs\n   */\n  public clearBackendLogs(): void {\n    if (this.backendLogsManager) {\n      this.backendLogsManager.clearLogs();\n      this.renderBackendLogs();\n    }\n  }\n  \n  /**\n   * Public method to add a log entry programmatically\n   * @param entry LogEntry to add\n   */\n  public addLog(entry: LogEntry): void {\n    this.frontendLogs.push(entry);\n    \n    // Limit number of logs\n    if (this.frontendLogs.length > this.options.maxFrontendLogs) {\n      this.frontendLogs.shift();\n    }\n    \n    // Render if frontend tab is active\n    if (this.activeTab === 'frontend') {\n      this.renderFrontendLogs();\n    }\n  }\n  \n  /**\n   * Public method to get all frontend logs\n   * @returns Array of log entries\n   */\n  public getFrontendLogs(): LogEntry[] {\n    return [...this.frontendLogs];\n  }\n  \n  /**\n   * Public method to get all backend logs\n   * @returns Array of log entries or null if not available\n   */\n  public getBackendLogs(): any[] | null {\n    if (this.backendLogsManager) {\n      return this.backendLogsManager.getLogs();\n    }\n    return null;\n  }\n  \n  /**\n   * Public method to destroy the LogsViewer\n   * Cleans up event listeners and restores console\n   */\n  public destroy(): void {\n    // Restore console\n    this.unhookConsole();\n    \n    // Stop auto-refresh\n    this.stopAutoRefresh();\n    \n    // Clear container\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n    \n    // Reset properties\n    this.frontendLogsTab = null;\n    this.backendLogsTab = null;\n    this.frontendLogsContainer = null;\n    this.backendLogsContainer = null;\n    this.frontendLogsList = null;\n    this.backendLogsList = null;\n    this.frontendLogs = [];\n    this.backendLogsManager = null;\n  }\n}\n\nexport default LogsViewer; ", "import { Component } from '../types/component-base';\n\n/**\n * Configuration option types for strong typing\n */\nexport interface ConfigOptions {\n  // Application settings\n  appName?: string;\n  debug?: boolean;\n  version?: string;\n  \n  // API settings\n  apiUrl?: string;\n  apiKey?: string;\n  useLocalEndpoints?: boolean;\n  \n  // UI settings\n  theme?: 'light' | 'dark' | 'auto';\n  language?: string;\n  toastPosition?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';\n  \n  // Feature flags\n  enableHistory?: boolean;\n  enableVariables?: boolean;\n  enableDomainState?: boolean;\n  \n  // Storage settings\n  storagePrefix?: string;\n  persistHistory?: boolean;\n  historyMaxItems?: number;\n  \n  // Advanced settings\n  logLevel?: 'error' | 'warn' | 'info' | 'debug';\n  timeout?: number;\n  \n  // Any additional configuration\n  [key: string]: any;\n}\n\n/**\n * Default configuration values\n */\nconst DEFAULT_CONFIG: ConfigOptions = {\n  appName: 'API Client',\n  debug: false,\n  version: '1.0.0',\n  apiUrl: '/api',\n  useLocalEndpoints: true,\n  theme: 'light',\n  language: 'en',\n  toastPosition: 'top-right',\n  enableHistory: true,\n  enableVariables: true,\n  enableDomainState: true,\n  storagePrefix: 'api_client_',\n  persistHistory: true,\n  historyMaxItems: 50,\n  logLevel: 'error',\n  timeout: 30000,\n};\n\n/**\n * Configuration manager for application settings\n */\nexport class ConfigManager implements Component {\n  private static instance: ConfigManager;\n  private config: ConfigOptions;\n  private initialized: boolean = false;\n  \n  /**\n   * Get the singleton instance of ConfigManager\n   */\n  public static getInstance(): ConfigManager {\n    if (!ConfigManager.instance) {\n      ConfigManager.instance = new ConfigManager();\n    }\n    return ConfigManager.instance;\n  }\n  \n  /**\n   * Private constructor to prevent direct creation\n   */\n  private constructor() {\n    this.config = { ...DEFAULT_CONFIG };\n  }\n  \n  /**\n   * Initialize with configuration\n   * @param options Configuration options\n   */\n  public initialize(options: ConfigOptions = {}): void {\n    this.config = { ...DEFAULT_CONFIG, ...options };\n    this.initialized = true;\n    \n    // Apply theme if specified\n    if (this.config.theme && this.config.theme !== 'auto') {\n      document.documentElement.setAttribute('data-theme', this.config.theme);\n    }\n    \n    if (this.config.debug) {\n      console.debug('ConfigManager initialized with:', this.config);\n    }\n  }\n  \n  /**\n   * Get all configuration\n   * @returns The complete configuration object\n   */\n  public getAll(): ConfigOptions {\n    return { ...this.config };\n  }\n  \n  /**\n   * Get a specific configuration value\n   * @param key Configuration key\n   * @param defaultValue Default value if not found\n   * @returns The configuration value or default\n   */\n  public get<T>(key: string, defaultValue?: T): T {\n    const value = this.config[key];\n    return (value !== undefined ? value : defaultValue) as T;\n  }\n  \n  /**\n   * Set a configuration value\n   * @param key Configuration key\n   * @param value New value\n   */\n  public set<T>(key: string, value: T): void {\n    this.config[key] = value;\n    \n    // Handle special case for theme changes\n    if (key === 'theme' && typeof value === 'string') {\n      document.documentElement.setAttribute('data-theme', value);\n    }\n    \n    if (this.config.debug) {\n      console.debug(`ConfigManager set ${key}:`, value);\n    }\n  }\n  \n  /**\n   * Check if a configuration value exists\n   * @param key Configuration key\n   * @returns True if the key exists\n   */\n  public has(key: string): boolean {\n    return key in this.config;\n  }\n  \n  /**\n   * Update multiple configuration values\n   * @param options Configuration options to update\n   */\n  public update(options: ConfigOptions): void {\n    Object.assign(this.config, options);\n    \n    // Handle theme change if included\n    if (options.theme) {\n      document.documentElement.setAttribute('data-theme', options.theme);\n    }\n    \n    if (this.config.debug) {\n      console.debug('ConfigManager updated with:', options);\n    }\n  }\n  \n  /**\n   * Reset configuration to default values\n   */\n  public reset(): void {\n    this.config = { ...DEFAULT_CONFIG };\n    \n    // Reset theme\n    document.documentElement.setAttribute('data-theme', DEFAULT_CONFIG.theme || 'light');\n    \n    if (this.config.debug) {\n      console.debug('ConfigManager reset to defaults');\n    }\n  }\n  \n  /**\n   * Load configuration from a JSON file path\n   * @param path Path to the configuration JSON file\n   * @returns Promise that resolves when configuration is loaded\n   */\n  public async loadConfig(path: string): Promise<void> {\n    try {\n      const response = await fetch(path);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load config from ${path}: ${response.status} ${response.statusText}`);\n      }\n      \n      const config = await response.json();\n      \n      // Merge with current config\n      this.update(config);\n      \n      if (this.config.debug) {\n        console.debug(`ConfigManager loaded config from ${path}:`, config);\n      }\n    } catch (error) {\n      console.error(`Error loading config from ${path}:`, error);\n      throw error;\n    }\n  }\n} ", "import { ConfigManager } from './ConfigManager';\n\n/**\n * Log levels with corresponding numeric values\n */\nexport enum LogLevel {\n  NONE = 0,\n  ERROR = 1,\n  WARN = 2,\n  INFO = 3,\n  DEBUG = 4\n}\n\n/**\n * Logger configuration options\n */\nexport interface LoggerOptions {\n  /**\n   * Minimum log level to display (default: LogLevel.ERROR)\n   */\n  level?: LogLevel;\n  \n  /**\n   * Enable timestamp in logs (default: true)\n   */\n  showTimestamp?: boolean;\n  \n  /**\n   * Enable component name in logs (default: true)\n   */\n  showComponent?: boolean;\n  \n  /**\n   * Enable log level in output (default: true)\n   */\n  showLevel?: boolean;\n  \n  /**\n   * Custom prefix for all logs (default: none)\n   */\n  prefix?: string;\n}\n\n/**\n * Default logger options\n */\nconst DEFAULT_OPTIONS: LoggerOptions = {\n  level: LogLevel.ERROR,\n  showTimestamp: true,\n  showComponent: true,\n  showLevel: true,\n  prefix: '',\n};\n\n/**\n * Logger class for consistent application logging\n */\nexport class Logger {\n  private static instance: Logger;\n  private options: LoggerOptions;\n  \n  /**\n   * Get the singleton instance of Logger\n   */\n  public static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n  \n  /**\n   * Get a component-specific logger\n   * @param component Component name\n   */\n  public static getLogger(component: string): ComponentLogger {\n    return new ComponentLogger(component, Logger.getInstance());\n  }\n  \n  /**\n   * Private constructor to prevent direct creation\n   */\n  private constructor() {\n    // Get default log level from config if available\n    const config = ConfigManager.getInstance();\n    const configLevel = config.get('logLevel');\n    let level = DEFAULT_OPTIONS.level;\n    \n    if (configLevel) {\n      switch (configLevel) {\n        case 'error': level = LogLevel.ERROR; break;\n        case 'warn': level = LogLevel.WARN; break;\n        case 'info': level = LogLevel.INFO; break;\n        case 'debug': level = LogLevel.DEBUG; break;\n        case 'none': level = LogLevel.NONE; break;\n      }\n    }\n    \n    this.options = {\n      ...DEFAULT_OPTIONS,\n      level,\n    };\n  }\n  \n  /**\n   * Configure the logger\n   * @param options Logger options\n   */\n  public configure(options: LoggerOptions): void {\n    this.options = { ...this.options, ...options };\n  }\n  \n  /**\n   * Get current logger options\n   */\n  public getOptions(): LoggerOptions {\n    return { ...this.options };\n  }\n  \n  /**\n   * Set the current log level\n   * @param level New log level\n   */\n  public setLevel(level: LogLevel): void {\n    this.options.level = level;\n  }\n  \n  /**\n   * Log an error message\n   * @param component Component name\n   * @param message Error message\n   * @param args Additional arguments\n   */\n  public error(component: string, message: string, ...args: any[]): void {\n    this.log(LogLevel.ERROR, component, message, args);\n  }\n  \n  /**\n   * Log a warning message\n   * @param component Component name\n   * @param message Warning message\n   * @param args Additional arguments\n   */\n  public warn(component: string, message: string, ...args: any[]): void {\n    this.log(LogLevel.WARN, component, message, args);\n  }\n  \n  /**\n   * Log an info message\n   * @param component Component name\n   * @param message Info message\n   * @param args Additional arguments\n   */\n  public info(component: string, message: string, ...args: any[]): void {\n    this.log(LogLevel.INFO, component, message, args);\n  }\n  \n  /**\n   * Log a debug message\n   * @param component Component name\n   * @param message Debug message\n   * @param args Additional arguments\n   */\n  public debug(component: string, message: string, ...args: any[]): void {\n    this.log(LogLevel.DEBUG, component, message, args);\n  }\n  \n  /**\n   * Internal log method\n   * @param level Log level\n   * @param component Component name\n   * @param message Log message\n   * @param args Additional arguments\n   */\n  private log(level: LogLevel, component: string, message: string, args: any[]): void {\n    // Check if we should log this level\n    if (!this.options.level || level > this.options.level) {\n      return;\n    }\n    \n    // Build log prefix\n    let prefix = this.options.prefix ? `${this.options.prefix} ` : '';\n    \n    // Add timestamp if enabled\n    if (this.options.showTimestamp) {\n      const now = new Date();\n      prefix += `[${now.toISOString()}] `;\n    }\n    \n    // Add log level if enabled\n    if (this.options.showLevel) {\n      const levelName = LogLevel[level];\n      prefix += `${levelName} `;\n    }\n    \n    // Add component name if enabled\n    if (this.options.showComponent && component) {\n      prefix += `[${component}] `;\n    }\n    \n    // Select console method based on level\n    let method: 'error' | 'warn' | 'info' | 'debug' | 'log';\n    switch (level) {\n      case LogLevel.ERROR: method = 'error'; break;\n      case LogLevel.WARN: method = 'warn'; break;\n      case LogLevel.INFO: method = 'info'; break;\n      case LogLevel.DEBUG: method = 'debug'; break;\n      default: method = 'log';\n    }\n    \n    // Log the message\n    if (args.length > 0) {\n      console[method](prefix + message, ...args);\n    } else {\n      console[method](prefix + message);\n    }\n  }\n}\n\n/**\n * Component-specific logger that remembers the component name\n */\nexport class ComponentLogger {\n  private component: string;\n  private logger: Logger;\n  \n  /**\n   * Create a new component logger\n   * @param component Component name\n   * @param logger Parent logger\n   */\n  constructor(component: string, logger: Logger) {\n    this.component = component;\n    this.logger = logger;\n  }\n  \n  /**\n   * Log an error message\n   * @param message Error message\n   * @param args Additional arguments\n   */\n  public error(message: string, ...args: any[]): void {\n    this.logger.error(this.component, message, ...args);\n  }\n  \n  /**\n   * Log a warning message\n   * @param message Warning message\n   * @param args Additional arguments\n   */\n  public warn(message: string, ...args: any[]): void {\n    this.logger.warn(this.component, message, ...args);\n  }\n  \n  /**\n   * Log an info message\n   * @param message Info message\n   * @param args Additional arguments\n   */\n  public info(message: string, ...args: any[]): void {\n    this.logger.info(this.component, message, ...args);\n  }\n  \n  /**\n   * Log a debug message\n   * @param message Debug message\n   * @param args Additional arguments\n   */\n  public debug(message: string, ...args: any[]): void {\n    this.logger.debug(this.component, message, ...args);\n  }\n} ", "import { Component } from '../types/component-base';\nimport { Logger } from './Logger';\n\n/**\n * Factory function type for creating service instances\n */\nexport type ServiceFactory<T = any> = (container: DependencyContainer) => T;\n\n/**\n * Service registration options\n */\nexport interface ServiceOptions {\n  /**\n   * Whether the service should be a singleton (default: true)\n   */\n  singleton?: boolean;\n  \n  /**\n   * Tags to categorize the service\n   */\n  tags?: string[];\n  \n  /**\n   * Service priority (for tagged services)\n   */\n  priority?: number;\n}\n\n/**\n * Service registration record\n */\ninterface ServiceRegistration {\n  /**\n   * Service factory function\n   */\n  factory: ServiceFactory;\n  \n  /**\n   * Service options\n   */\n  options: ServiceOptions;\n  \n  /**\n   * Cached instance (for singletons)\n   */\n  instance?: any;\n}\n\n/**\n * Dependency Container for managing application services\n */\nexport class DependencyContainer implements Component {\n  private static instance: DependencyContainer;\n  private services: Map<string, ServiceRegistration>;\n  private aliases: Map<string, string>;\n  private tags: Map<string, Set<string>>;\n  private initialized: boolean = false;\n  private logger = Logger.getLogger('DependencyContainer');\n  \n  /**\n   * Get the singleton instance of DependencyContainer\n   */\n  public static getInstance(): DependencyContainer {\n    if (!DependencyContainer.instance) {\n      DependencyContainer.instance = new DependencyContainer();\n    }\n    return DependencyContainer.instance;\n  }\n  \n  /**\n   * Private constructor to prevent direct creation\n   */\n  private constructor() {\n    this.services = new Map();\n    this.aliases = new Map();\n    this.tags = new Map();\n  }\n  \n  /**\n   * Initialize the container\n   */\n  public initialize(): void {\n    this.logger.info('Dependency container initialized');\n    this.initialized = true;\n  }\n  \n  /**\n   * Register a service with the container\n   * @param id Service ID\n   * @param factory Factory function to create the service\n   * @param options Service options\n   */\n  public register<T>(\n    id: string,\n    factory: ServiceFactory<T>,\n    options: ServiceOptions = {}\n  ): void {\n    if (this.services.has(id)) {\n      this.logger.warn(`Service '${id}' is already registered. Overwriting.`);\n    }\n    \n    const serviceOptions: ServiceOptions = {\n      singleton: true,\n      tags: [],\n      priority: 0,\n      ...options\n    };\n    \n    this.services.set(id, {\n      factory,\n      options: serviceOptions\n    });\n    \n    // Register service tags\n    if (serviceOptions.tags && serviceOptions.tags.length > 0) {\n      for (const tag of serviceOptions.tags) {\n        if (!this.tags.has(tag)) {\n          this.tags.set(tag, new Set());\n        }\n        \n        const taggedServices = this.tags.get(tag);\n        if (taggedServices) {\n          taggedServices.add(id);\n        }\n      }\n    }\n    \n    this.logger.debug(`Registered service '${id}'`);\n  }\n  \n  /**\n   * Check if a service is registered\n   * @param id Service ID\n   * @returns True if the service is registered\n   */\n  public has(id: string): boolean {\n    // Check for direct service\n    if (this.services.has(id)) {\n      return true;\n    }\n    \n    // Check for alias\n    if (this.aliases.has(id)) {\n      const aliasedId = this.aliases.get(id);\n      return aliasedId !== undefined && this.services.has(aliasedId);\n    }\n    \n    return false;\n  }\n  \n  /**\n   * Get a service instance\n   * @param id Service ID\n   * @returns Service instance\n   * @throws Error if service not found\n   */\n  public get<T = any>(id: string): T {\n    // Check for alias\n    if (this.aliases.has(id)) {\n      const aliasedId = this.aliases.get(id);\n      if (aliasedId) {\n        return this.get<T>(aliasedId);\n      }\n    }\n    \n    // Get the service\n    const registration = this.services.get(id);\n    \n    if (!registration) {\n      throw new Error(`Service '${id}' not found in container`);\n    }\n    \n    // Return cached instance for singletons\n    if (registration.options.singleton && registration.instance !== undefined) {\n      return registration.instance as T;\n    }\n    \n    // Create a new instance\n    try {\n      const instance = registration.factory(this);\n      \n      // Cache instance if singleton\n      if (registration.options.singleton) {\n        registration.instance = instance;\n      }\n      \n      return instance as T;\n    } catch (error) {\n      this.logger.error(`Error creating service '${id}':`, error);\n      throw new Error(`Error creating service '${id}': ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n  \n  /**\n   * Create a new instance of a service, ignoring singleton status\n   * @param id Service ID\n   * @returns Service instance\n   * @throws Error if service not found\n   */\n  public create<T = any>(id: string): T {\n    // Check for alias\n    if (this.aliases.has(id)) {\n      const aliasedId = this.aliases.get(id);\n      if (aliasedId) {\n        return this.create<T>(aliasedId);\n      }\n    }\n    \n    // Get the service\n    const registration = this.services.get(id);\n    \n    if (!registration) {\n      throw new Error(`Service '${id}' not found in container`);\n    }\n    \n    // Create a new instance\n    try {\n      return registration.factory(this) as T;\n    } catch (error) {\n      this.logger.error(`Error creating service '${id}':`, error);\n      throw new Error(`Error creating service '${id}': ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n  \n  /**\n   * Register a service alias\n   * @param alias Alias name\n   * @param id Target service ID\n   */\n  public alias(alias: string, id: string): void {\n    if (!this.services.has(id)) {\n      this.logger.warn(`Cannot create alias '${alias}' for unknown service '${id}'`);\n      return;\n    }\n    \n    this.aliases.set(alias, id);\n    this.logger.debug(`Registered alias '${alias}' for service '${id}'`);\n  }\n  \n  /**\n   * Get all services with a specific tag\n   * @param tag Tag to filter by\n   * @returns Array of service instances\n   */\n  public getByTag<T = any>(tag: string): T[] {\n    const serviceIds = this.tags.get(tag);\n    \n    if (!serviceIds || serviceIds.size === 0) {\n      return [];\n    }\n    \n    // Sort services by priority if provided\n    const sortedIds = Array.from(serviceIds).sort((a, b) => {\n      const serviceA = this.services.get(a);\n      const serviceB = this.services.get(b);\n      \n      if (!serviceA || !serviceB) {\n        return 0;\n      }\n      \n      const priorityA = serviceA.options.priority || 0;\n      const priorityB = serviceB.options.priority || 0;\n      \n      return priorityB - priorityA; // Higher priority first\n    });\n    \n    return sortedIds.map(id => this.get<T>(id));\n  }\n  \n  /**\n   * Remove a service from the container\n   * @param id Service ID\n   * @returns True if service was removed\n   */\n  public remove(id: string): boolean {\n    if (!this.services.has(id)) {\n      return false;\n    }\n    \n    // Get service to remove its tags\n    const service = this.services.get(id);\n    \n    if (service && service.options.tags) {\n      for (const tag of service.options.tags) {\n        const taggedServices = this.tags.get(tag);\n        if (taggedServices) {\n          taggedServices.delete(id);\n          \n          // Remove tag if empty\n          if (taggedServices.size === 0) {\n            this.tags.delete(tag);\n          }\n        }\n      }\n    }\n    \n    // Remove service\n    this.services.delete(id);\n    \n    // Remove aliases pointing to this service\n    for (const [alias, targetId] of this.aliases.entries()) {\n      if (targetId === id) {\n        this.aliases.delete(alias);\n      }\n    }\n    \n    this.logger.debug(`Removed service '${id}'`);\n    return true;\n  }\n  \n  /**\n   * Register a service factory\n   * @param id Service ID\n   * @param factory Factory function\n   * @param options Service options\n   */\n  public factory<T>(\n    id: string,\n    factory: ServiceFactory<T>,\n    options: ServiceOptions = {}\n  ): void {\n    // Ensure the service is not a singleton by default\n    const factoryOptions: ServiceOptions = {\n      ...options,\n      singleton: options.singleton === true\n    };\n    \n    this.register(id, factory, factoryOptions);\n  }\n  \n  /**\n   * Register a value directly\n   * @param id Service ID\n   * @param value Value to register\n   */\n  public value<T>(id: string, value: T): void {\n    this.register(id, () => value, { singleton: true });\n  }\n  \n  /**\n   * Get all registered service IDs\n   * @returns Array of service IDs\n   */\n  public getServiceIds(): string[] {\n    return Array.from(this.services.keys());\n  }\n  \n  /**\n   * Get all registered tags\n   * @returns Array of tags\n   */\n  public getTags(): string[] {\n    return Array.from(this.tags.keys());\n  }\n  \n  /**\n   * Reset the container, removing all services\n   */\n  public reset(): void {\n    this.services.clear();\n    this.aliases.clear();\n    this.tags.clear();\n    this.logger.info('Dependency container reset');\n  }\n} ", "import { EventBus as IEventBus, EventHandler } from '../types/component-base';\n\n/**\n * Simple event bus implementation for component communication\n */\nexport class EventBus implements IEventBus {\n  private events: Map<string, Set<EventHandler>> = new Map();\n  private static instance: EventBus;\n  \n  /**\n   * Get the singleton instance of EventBus\n   */\n  public static getInstance(): EventBus {\n    if (!EventBus.instance) {\n      EventBus.instance = new EventBus();\n    }\n    return EventBus.instance;\n  }\n  \n  /**\n   * Private constructor to prevent direct creation\n   */\n  private constructor() {\n    this.events = new Map();\n  }\n  \n  /**\n   * Subscribe to an event\n   * @param event Event name\n   * @param handler Event handler\n   */\n  public subscribe<T = any>(event: string, handler: EventHandler<T>): void {\n    if (!this.events.has(event)) {\n      this.events.set(event, new Set());\n    }\n    \n    const handlers = this.events.get(event);\n    if (handlers) {\n      handlers.add(handler as EventHandler);\n    }\n  }\n  \n  /**\n   * Unsubscribe from an event\n   * @param event Event name\n   * @param handler Event handler to remove\n   */\n  public unsubscribe<T = any>(event: string, handler: EventHandler<T>): void {\n    const handlers = this.events.get(event);\n    if (handlers) {\n      handlers.delete(handler as EventHandler);\n      if (handlers.size === 0) {\n        this.events.delete(event);\n      }\n    }\n  }\n  \n  /**\n   * Publish an event\n   * @param event Event name\n   * @param data Event data\n   */\n  public publish<T = any>(event: string, data?: T): void {\n    const handlers = this.events.get(event);\n    if (handlers) {\n      handlers.forEach(handler => {\n        try {\n          handler(data);\n        } catch (error) {\n          console.error(`Error in event handler for ${event}:`, error);\n        }\n      });\n    }\n  }\n  \n  /**\n   * Emit an event (alias for publish)\n   * @param event Event name\n   * @param data Event data\n   */\n  public emit<T = any>(event: string, data?: T): void {\n    this.publish(event, data);\n  }\n  \n  /**\n   * Check if an event has subscribers\n   * @param event Event name\n   * @returns True if the event has subscribers\n   */\n  public hasSubscribers(event: string): boolean {\n    const handlers = this.events.get(event);\n    return !!handlers && handlers.size > 0;\n  }\n  \n  /**\n   * Clear all subscriptions for an event\n   * @param event Event name\n   */\n  public clearEvent(event: string): void {\n    this.events.delete(event);\n  }\n  \n  /**\n   * Clear all events and subscriptions\n   */\n  public clearAll(): void {\n    this.events.clear();\n  }\n} ", "import { Component } from '../types/component-base';\nimport { ConfigManager } from './ConfigManager';\nimport { Logger } from './Logger';\n\n/**\n * HTTP request method types\n */\nexport type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS';\n\n/**\n * HTTP request options\n */\nexport interface HttpRequestOptions {\n  /**\n   * Request method\n   */\n  method?: HttpMethod;\n  \n  /**\n   * Request headers\n   */\n  headers?: Record<string, string>;\n  \n  /**\n   * Request body\n   */\n  body?: any;\n  \n  /**\n   * URL parameters to append to the request\n   */\n  params?: Record<string, string | number | boolean | null | undefined>;\n  \n  /**\n   * Whether to send credentials\n   */\n  withCredentials?: boolean;\n  \n  /**\n   * Request timeout in milliseconds\n   */\n  timeout?: number;\n  \n  /**\n   * Content type for the request\n   */\n  contentType?: string;\n  \n  /**\n   * Response type\n   */\n  responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n  \n  /**\n   * Whether to automatically parse JSON\n   */\n  parseJson?: boolean;\n  \n  /**\n   * Cache control\n   */\n  cache?: RequestCache;\n  \n  /**\n   * Number of retries on failure\n   */\n  retries?: number;\n  \n  /**\n   * Delay between retries in milliseconds\n   */\n  retryDelay?: number;\n  \n  /**\n   * Custom fetch function to use\n   */\n  fetchFn?: typeof fetch;\n  \n  /**\n   * Signal to abort the request\n   */\n  signal?: AbortSignal;\n}\n\n/**\n * HTTP response interface\n */\nexport interface HttpResponse<T = any> {\n  /**\n   * Response data\n   */\n  data: T;\n  \n  /**\n   * Response status code\n   */\n  status: number;\n  \n  /**\n   * Response status text\n   */\n  statusText: string;\n  \n  /**\n   * Response headers\n   */\n  headers: Headers;\n  \n  /**\n   * Original response object\n   */\n  response: Response;\n}\n\n/**\n * HTTP client error\n */\nexport class HttpError extends Error {\n  /**\n   * Response status code\n   */\n  public override status: number;\n  \n  /**\n   * Response status text\n   */\n  public statusText: string;\n  \n  /**\n   * Response data\n   */\n  public data: any;\n  \n  /**\n   * Original response\n   */\n  public response?: Response;\n  \n  constructor(message: string, status: number, statusText: string, data?: any, response?: Response) {\n    super(message);\n    this.name = 'HttpError';\n    this.status = status;\n    this.statusText = statusText;\n    this.data = data;\n    this.response = response;\n    \n    // Required for TypeScript when extending Error\n    Object.setPrototypeOf(this, HttpError.prototype);\n  }\n  \n  /**\n   * Convert the error to a string\n   * @returns String representation of the error\n   */\n  override toString(): string {\n    return `${this.name}: ${this.message} (${this.status} ${this.statusText})`;\n  }\n}\n\n/**\n * HTTP request interceptor\n */\nexport interface RequestInterceptor {\n  /**\n   * Intercept request before it's sent\n   * @param url Request URL\n   * @param options Request options\n   * @returns Modified URL and options\n   */\n  intercept(url: string, options: HttpRequestOptions): { url: string; options: HttpRequestOptions };\n}\n\n/**\n * HTTP response interceptor\n */\nexport interface ResponseInterceptor {\n  /**\n   * Intercept response\n   * @param response Response object\n   * @returns Modified response\n   */\n  intercept<T>(response: HttpResponse<T>): HttpResponse<T> | Promise<HttpResponse<T>>;\n}\n\n/**\n * HTTP error interceptor\n */\nexport interface ErrorInterceptor {\n  /**\n   * Intercept error\n   * @param error Error object\n   * @returns Modified error or response\n   */\n  intercept<T>(error: HttpError): HttpResponse<T> | Promise<HttpResponse<T>> | HttpError | Promise<HttpError>;\n}\n\n/**\n * HTTP client options\n */\nexport interface HttpClientOptions {\n  /**\n   * Base URL for all requests\n   */\n  baseUrl?: string;\n  \n  /**\n   * Default headers for all requests\n   */\n  headers?: Record<string, string>;\n  \n  /**\n   * Default timeout for all requests\n   */\n  timeout?: number;\n  \n  /**\n   * Default request interceptors\n   */\n  requestInterceptors?: RequestInterceptor[];\n  \n  /**\n   * Default response interceptors\n   */\n  responseInterceptors?: ResponseInterceptor[];\n  \n  /**\n   * Default error interceptors\n   */\n  errorInterceptors?: ErrorInterceptor[];\n  \n  /**\n   * Whether to automatically parse JSON responses\n   */\n  parseJson?: boolean;\n  \n  /**\n   * Default number of retries on failure\n   */\n  retries?: number;\n  \n  /**\n   * Default delay between retries in milliseconds\n   */\n  retryDelay?: number;\n  \n  /**\n   * Custom fetch function to use\n   */\n  fetchFn?: typeof fetch;\n  \n  /**\n   * Whether to log requests\n   */\n  logRequests?: boolean;\n  \n  /**\n   * Whether to log responses\n   */\n  logResponses?: boolean;\n  \n  /**\n   * Whether to log errors\n   */\n  logErrors?: boolean;\n}\n\n/**\n * Default HTTP client options\n */\nconst DEFAULT_OPTIONS: HttpClientOptions = {\n  baseUrl: '',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  timeout: 30000,\n  requestInterceptors: [],\n  responseInterceptors: [],\n  errorInterceptors: [],\n  parseJson: true,\n  retries: 0,\n  retryDelay: 1000,\n  fetchFn: fetch,\n  logRequests: false,\n  logResponses: false,\n  logErrors: true,\n};\n\n/**\n * HTTP client for making API requests\n */\nexport class HttpClient implements Component {\n  private static instance: HttpClient;\n  private config: HttpClientOptions;\n  private requestInterceptors: RequestInterceptor[] = [];\n  private responseInterceptors: ResponseInterceptor[] = [];\n  private errorInterceptors: ErrorInterceptor[] = [];\n  private initialized: boolean = false;\n  private logger = Logger.getLogger('HttpClient');\n  \n  /**\n   * Get the singleton instance of HttpClient\n   */\n  public static getInstance(): HttpClient {\n    if (!HttpClient.instance) {\n      HttpClient.instance = new HttpClient();\n    }\n    return HttpClient.instance;\n  }\n  \n  /**\n   * Private constructor to prevent direct creation\n   */\n  private constructor() {\n    this.config = { ...DEFAULT_OPTIONS };\n  }\n  \n  /**\n   * Initialize the HTTP client\n   * @param options HTTP client options\n   */\n  public initialize(options: HttpClientOptions = {}): void {\n    // Get config values\n    const configManager = ConfigManager.getInstance();\n    const configTimeout = configManager.get<number>('timeout');\n    const configApiUrl = configManager.get<string>('apiUrl');\n    \n    // Merge options\n    this.config = {\n      ...DEFAULT_OPTIONS,\n      ...(configTimeout ? { timeout: configTimeout } : {}),\n      ...(configApiUrl ? { baseUrl: configApiUrl } : {}),\n      ...options,\n    };\n    \n    // Set interceptors\n    this.requestInterceptors = [...(this.config.requestInterceptors || [])];\n    this.responseInterceptors = [...(this.config.responseInterceptors || [])];\n    this.errorInterceptors = [...(this.config.errorInterceptors || [])];\n    \n    this.initialized = true;\n    this.logger.info('HTTP client initialized');\n  }\n  \n  /**\n   * Build the full URL for a request\n   * @param url URL to build\n   * @param params Query parameters\n   * @returns Built URL\n   */\n  private buildUrl(url: string, params?: Record<string, any>): string {\n    // Resolve URL against base URL if it's not absolute\n    let fullUrl = url;\n    if (!url.match(/^https?:\\/\\//) && !url.startsWith('/')) {\n      fullUrl = `${this.config.baseUrl || ''}/${url}`;\n    } else if (url.startsWith('/') && this.config.baseUrl) {\n      // If starts with / and we have a base URL, join them\n      const baseUrl = this.config.baseUrl.endsWith('/')\n        ? this.config.baseUrl.slice(0, -1)\n        : this.config.baseUrl;\n      fullUrl = `${baseUrl}${url}`;\n    }\n    \n    // Add query parameters\n    if (params && Object.keys(params).length > 0) {\n      const searchParams = new URLSearchParams();\n      \n      for (const [key, value] of Object.entries(params)) {\n        if (value !== null && value !== undefined) {\n          searchParams.append(key, String(value));\n        }\n      }\n      \n      const queryString = searchParams.toString();\n      if (queryString) {\n        fullUrl += (fullUrl.includes('?') ? '&' : '?') + queryString;\n      }\n    }\n    \n    return fullUrl;\n  }\n  \n  /**\n   * Add a request interceptor\n   * @param interceptor Request interceptor\n   */\n  public addRequestInterceptor(interceptor: RequestInterceptor): void {\n    this.requestInterceptors.push(interceptor);\n  }\n  \n  /**\n   * Add a response interceptor\n   * @param interceptor Response interceptor\n   */\n  public addResponseInterceptor(interceptor: ResponseInterceptor): void {\n    this.responseInterceptors.push(interceptor);\n  }\n  \n  /**\n   * Add an error interceptor\n   * @param interceptor Error interceptor\n   */\n  public addErrorInterceptor(interceptor: ErrorInterceptor): void {\n    this.errorInterceptors.push(interceptor);\n  }\n  \n  /**\n   * Remove all interceptors\n   */\n  public clearInterceptors(): void {\n    this.requestInterceptors = [];\n    this.responseInterceptors = [];\n    this.errorInterceptors = [];\n  }\n  \n  /**\n   * Make an HTTP request\n   * @param url URL to request\n   * @param reqOptions Request options\n   * @returns Response promise\n   */\n  public async request<T = any>(url: string, reqOptions: HttpRequestOptions = {}): Promise<HttpResponse<T>> {\n    // Apply request interceptors\n    let interceptedUrl = url;\n    let interceptedOptions = { ...reqOptions };\n    \n    for (const interceptor of this.requestInterceptors) {\n      const result = interceptor.intercept(interceptedUrl, interceptedOptions);\n      interceptedUrl = result.url;\n      interceptedOptions = result.options;\n    }\n    \n    // Merge options\n    const mergedOptions: HttpRequestOptions = {\n      method: 'GET',\n      headers: { ...this.config.headers },\n      timeout: this.config.timeout,\n      parseJson: this.config.parseJson,\n      retries: this.config.retries,\n      retryDelay: this.config.retryDelay,\n      fetchFn: this.config.fetchFn || fetch,\n      ...interceptedOptions,\n    };\n    \n    // Merge headers\n    if (interceptedOptions.headers) {\n      mergedOptions.headers = {\n        ...this.config.headers,\n        ...interceptedOptions.headers,\n      };\n    }\n    \n    // Set body\n    if (mergedOptions.body !== undefined) {\n      // Auto-stringify JSON bodies\n      if (\n        typeof mergedOptions.body === 'object' &&\n        !(mergedOptions.body instanceof FormData) &&\n        !(mergedOptions.body instanceof URLSearchParams) &&\n        !(mergedOptions.body instanceof Blob) &&\n        !(mergedOptions.body instanceof ArrayBuffer)\n      ) {\n        mergedOptions.body = JSON.stringify(mergedOptions.body);\n        \n        // Ensure content-type for JSON if not overridden\n        if (mergedOptions.headers && !('Content-Type' in mergedOptions.headers)) {\n          mergedOptions.headers['Content-Type'] = 'application/json';\n        }\n      }\n    }\n    \n    // Build URL\n    const fullUrl = this.buildUrl(interceptedUrl, mergedOptions.params);\n    \n    // Log request if enabled\n    if (this.config.logRequests) {\n      this.logger.debug(`${mergedOptions.method} ${fullUrl}`, {\n        headers: mergedOptions.headers,\n        body: mergedOptions.body,\n      });\n    }\n    \n    // Create fetch options\n    const fetchOptions: RequestInit = {\n      method: mergedOptions.method,\n      headers: mergedOptions.headers as HeadersInit,\n      body: mergedOptions.body,\n      cache: mergedOptions.cache,\n      credentials: mergedOptions.withCredentials ? 'include' : 'same-origin',\n      signal: mergedOptions.signal,\n    };\n    \n    // Create timeout controller if needed\n    let timeoutId: number | undefined;\n    let timeoutController: AbortController | undefined;\n    \n    if (mergedOptions.timeout && mergedOptions.timeout > 0) {\n      timeoutController = new AbortController();\n      \n      // If there's already a signal, we need to ensure both work\n      if (mergedOptions.signal) {\n        const originalSignal = mergedOptions.signal;\n        \n        // If original signal is already aborted, use it directly\n        if (originalSignal.aborted) {\n          fetchOptions.signal = originalSignal;\n        } else {\n          // Otherwise, set up both signals\n          originalSignal.addEventListener('abort', () => {\n            timeoutController?.abort();\n          });\n          \n          fetchOptions.signal = timeoutController.signal;\n        }\n      } else {\n        fetchOptions.signal = timeoutController.signal;\n      }\n      \n      // Set up timeout\n      timeoutId = window.setTimeout(() => {\n        timeoutController?.abort();\n      }, mergedOptions.timeout);\n    }\n    \n    try {\n      // Try to fetch with retries\n      let lastError: Error | null = null;\n      let retryCount = 0;\n      \n      while (retryCount <= (mergedOptions.retries || 0)) {\n        try {\n          const fetchFn = mergedOptions.fetchFn || fetch;\n          const response = await fetchFn(fullUrl, fetchOptions);\n          \n          // Clear timeout if set\n          if (timeoutId !== undefined) {\n            clearTimeout(timeoutId);\n          }\n          \n          // Parse the response\n          let data: any;\n          \n          // Use the specified response type or parse automatically\n          if (mergedOptions.responseType) {\n            switch (mergedOptions.responseType) {\n              case 'json':\n                data = await response.json();\n                break;\n              case 'text':\n                data = await response.text();\n                break;\n              case 'blob':\n                data = await response.blob();\n                break;\n              case 'arraybuffer':\n                data = await response.arrayBuffer();\n                break;\n            }\n          } else if (mergedOptions.parseJson !== false) {\n            // Default to trying JSON\n            const contentType = response.headers.get('content-type');\n            \n            if (contentType && contentType.includes('application/json')) {\n              try {\n                data = await response.json();\n              } catch (e) {\n                // If JSON parsing fails, get as text\n                data = await response.text();\n              }\n            } else {\n              // Otherwise, get as text\n              data = await response.text();\n            }\n          } else {\n            // Get as text if parsing is disabled\n            data = await response.text();\n          }\n          \n          // Create response object\n          let httpResponse: HttpResponse<T> = {\n            data: data as T,\n            status: response.status,\n            statusText: response.statusText,\n            headers: response.headers,\n            response,\n          };\n          \n          // Apply response interceptors\n          for (const interceptor of this.responseInterceptors) {\n            httpResponse = await interceptor.intercept(httpResponse);\n          }\n          \n          // Log response if enabled\n          if (this.config.logResponses) {\n            this.logger.debug(`Response ${mergedOptions.method} ${fullUrl}`, {\n              status: response.status,\n              headers: Object.fromEntries(response.headers.entries()),\n              data: httpResponse.data,\n            });\n          }\n          \n          // Check for HTTP error status\n          if (!response.ok) {\n            const error = new HttpError(\n              `HTTP error ${response.status}: ${response.statusText}`,\n              response.status,\n              response.statusText,\n              httpResponse.data,\n              response\n            );\n            \n            // Apply error interceptors\n            let result: HttpResponse<T> | HttpError = error;\n            \n            for (const interceptor of this.errorInterceptors) {\n              result = await interceptor.intercept(error);\n              \n              // If an interceptor returns a valid response, return it\n              if ('data' in result) {\n                return result as HttpResponse<T>;\n              }\n            }\n            \n            // Otherwise throw the error\n            throw result;\n          }\n          \n          return httpResponse;\n        } catch (error) {\n          lastError = error as Error;\n          \n          // If this is a timeout or abort, don't retry\n          if (\n            error instanceof DOMException && error.name === 'AbortError' ||\n            fetchOptions.signal?.aborted\n          ) {\n            throw new Error(`Request timeout: ${mergedOptions.timeout}ms exceeded`);\n          }\n          \n          // If we've reached max retries, throw\n          if (retryCount >= (mergedOptions.retries || 0)) {\n            break;\n          }\n          \n          // Wait before retry\n          await new Promise(resolve => setTimeout(resolve, mergedOptions.retryDelay || 1000));\n          retryCount++;\n        }\n      }\n      \n      // If we get here, all retries failed\n      throw lastError;\n    } catch (error) {\n      // Clear timeout if set\n      if (timeoutId !== undefined) {\n        clearTimeout(timeoutId);\n      }\n      \n      // Handle errors\n      let httpError: HttpError;\n      \n      if (error instanceof HttpError) {\n        httpError = error;\n      } else {\n        httpError = new HttpError(\n          error instanceof Error ? error.message : String(error),\n          0,\n          'Unknown Error',\n          null\n        );\n      }\n      \n      // Log error if enabled\n      if (this.config.logErrors) {\n        this.logger.error(`Error ${mergedOptions.method} ${fullUrl}`, httpError);\n      }\n      \n      // Apply error interceptors\n      let result: HttpResponse<T> | HttpError = httpError;\n      \n      for (const interceptor of this.errorInterceptors) {\n        result = await interceptor.intercept(httpError);\n        \n        // If an interceptor returns a valid response, return it\n        if ('data' in result) {\n          return result as HttpResponse<T>;\n        }\n      }\n      \n      // Otherwise throw the error\n      throw result;\n    }\n  }\n  \n  /**\n   * Make a GET request\n   * @param url URL to request\n   * @param reqOptions Request options\n   * @returns Response promise\n   */\n  public get<T = any>(url: string, reqOptions: HttpRequestOptions = {}): Promise<HttpResponse<T>> {\n    return this.request<T>(url, { ...reqOptions, method: 'GET' });\n  }\n  \n  /**\n   * Make a POST request\n   * @param url URL to request\n   * @param data Request body\n   * @param reqOptions Request options\n   * @returns Response promise\n   */\n  public post<T = any>(url: string, data?: any, reqOptions: HttpRequestOptions = {}): Promise<HttpResponse<T>> {\n    return this.request<T>(url, { ...reqOptions, method: 'POST', body: data });\n  }\n  \n  /**\n   * Make a PUT request\n   * @param url URL to request\n   * @param data Request body\n   * @param reqOptions Request options\n   * @returns Response promise\n   */\n  public put<T = any>(url: string, data?: any, reqOptions: HttpRequestOptions = {}): Promise<HttpResponse<T>> {\n    return this.request<T>(url, { ...reqOptions, method: 'PUT', body: data });\n  }\n  \n  /**\n   * Make a DELETE request\n   * @param url URL to request\n   * @param reqOptions Request options\n   * @returns Response promise\n   */\n  public delete<T = any>(url: string, reqOptions: HttpRequestOptions = {}): Promise<HttpResponse<T>> {\n    return this.request<T>(url, { ...reqOptions, method: 'DELETE' });\n  }\n  \n  /**\n   * Make a PATCH request\n   * @param url URL to request\n   * @param data Request body\n   * @param reqOptions Request options\n   * @returns Response promise\n   */\n  public patch<T = any>(url: string, data?: any, reqOptions: HttpRequestOptions = {}): Promise<HttpResponse<T>> {\n    return this.request<T>(url, { ...reqOptions, method: 'PATCH', body: data });\n  }\n  \n  /**\n   * Make a HEAD request\n   * @param url URL to request\n   * @param reqOptions Request options\n   * @returns Response promise\n   */\n  public head<T = any>(url: string, reqOptions: HttpRequestOptions = {}): Promise<HttpResponse<T>> {\n    return this.request<T>(url, { ...reqOptions, method: 'HEAD' });\n  }\n  \n  /**\n   * Make an OPTIONS request\n   * @param url URL to request\n   * @param reqOptions Request options\n   * @returns Response promise\n   */\n  public optionsRequest<T = any>(url: string, reqOptions: HttpRequestOptions = {}): Promise<HttpResponse<T>> {\n    return this.request<T>(url, { ...reqOptions, method: 'OPTIONS' });\n  }\n} ", "import { Component } from '../types/component-base';\nimport { HttpClient, HttpError, HttpRequestOptions, HttpResponse } from './HttpClient';\nimport { ConfigManager } from './ConfigManager';\nimport { Logger } from './Logger';\nimport { DependencyContainer } from './DependencyContainer';\n\n/**\n * Options for API endpoints\n */\nexport interface ApiEndpointOptions {\n  /**\n   * URL path for the endpoint\n   */\n  path: string;\n  \n  /**\n   * HTTP method for the endpoint\n   */\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  \n  /**\n   * Whether authentication is required\n   */\n  requiresAuth?: boolean;\n  \n  /**\n   * Default headers for this endpoint\n   */\n  headers?: Record<string, string>;\n  \n  /**\n   * Default timeout for this endpoint\n   */\n  timeout?: number;\n}\n\n/**\n * API client configuration\n */\nexport interface ApiClientOptions {\n  /**\n   * Base URL for API\n   */\n  baseUrl?: string;\n  \n  /**\n   * API version\n   */\n  apiVersion?: string;\n  \n  /**\n   * Default headers for all requests\n   */\n  headers?: Record<string, string>;\n  \n  /**\n   * Auth token header name\n   */\n  authTokenHeader?: string;\n  \n  /**\n   * Current auth token\n   */\n  authToken?: string;\n  \n  /**\n   * Whether to automatically retry on auth failure\n   */\n  autoRetryAuth?: boolean;\n  \n  /**\n   * Default timeout\n   */\n  timeout?: number;\n}\n\n/**\n * Default API client configuration\n */\nconst DEFAULT_OPTIONS: ApiClientOptions = {\n  baseUrl: '/api',\n  apiVersion: 'v1',\n  headers: {},\n  authTokenHeader: 'Authorization',\n  autoRetryAuth: true,\n  timeout: 30000,\n};\n\n/**\n * API client for making API requests\n */\nexport class ApiClient implements Component {\n  private static instance: ApiClient;\n  private httpClient: HttpClient;\n  private config: ApiClientOptions;\n  private logger = Logger.getLogger('ApiClient');\n  private endpoints: Map<string, ApiEndpointOptions> = new Map();\n  private initialized = false;\n  \n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): ApiClient {\n    if (!ApiClient.instance) {\n      ApiClient.instance = new ApiClient();\n    }\n    return ApiClient.instance;\n  }\n  \n  /**\n   * Private constructor\n   */\n  private constructor() {\n    this.httpClient = HttpClient.getInstance();\n    this.config = { ...DEFAULT_OPTIONS };\n  }\n  \n  /**\n   * Initialize the API client\n   * @param options Options for the API client\n   */\n  public initialize(options: ApiClientOptions = {}): void {\n    if (this.initialized) {\n      this.logger.warn('ApiClient already initialized');\n      return;\n    }\n    \n    // Get config values\n    const configManager = ConfigManager.getInstance();\n    const configBaseUrl = configManager.get<string>('apiUrl');\n    const configTimeout = configManager.get<number>('apiTimeout');\n    const configApiVersion = configManager.get<string>('apiVersion');\n    \n    // Merge options\n    this.config = {\n      ...DEFAULT_OPTIONS,\n      ...(configBaseUrl ? { baseUrl: configBaseUrl } : {}),\n      ...(configTimeout ? { timeout: configTimeout } : {}),\n      ...(configApiVersion ? { apiVersion: configApiVersion } : {}),\n      ...options,\n    };\n    \n    // Initialize HTTP client\n    this.httpClient.initialize({\n      baseUrl: this.getBaseUrlWithVersion(),\n      timeout: this.config.timeout,\n      headers: this.config.headers,\n    });\n    \n    // Add auth interceptor if needed\n    if (this.config.authToken) {\n      this.setAuthToken(this.config.authToken);\n    }\n    \n    this.initialized = true;\n    this.logger.info('API client initialized');\n  }\n  \n  /**\n   * Get the base URL with version\n   */\n  private getBaseUrlWithVersion(): string {\n    const baseUrl = this.config.baseUrl || '';\n    const apiVersion = this.config.apiVersion;\n    \n    if (!apiVersion) {\n      return baseUrl;\n    }\n    \n    // Format: baseUrl/apiVersion\n    return `${baseUrl.replace(/\\/$/, '')}/${apiVersion}`;\n  }\n  \n  /**\n   * Register an endpoint\n   * @param name Endpoint name\n   * @param options Endpoint options\n   */\n  public registerEndpoint(name: string, options: ApiEndpointOptions): void {\n    if (this.endpoints.has(name)) {\n      this.logger.warn(`Endpoint ${name} already registered. Overwriting.`);\n    }\n    \n    this.endpoints.set(name, {\n      method: 'GET',\n      requiresAuth: true,\n      ...options,\n    });\n    \n    this.logger.debug(`Registered endpoint ${name}: ${options.method || 'GET'} ${options.path}`);\n  }\n  \n  /**\n   * Register multiple endpoints\n   * @param endpoints Map of endpoint names to options\n   */\n  public registerEndpoints(endpoints: Record<string, ApiEndpointOptions>): void {\n    for (const [name, options] of Object.entries(endpoints)) {\n      this.registerEndpoint(name, options);\n    }\n  }\n  \n  /**\n   * Get endpoint details\n   * @param name Endpoint name\n   * @returns Endpoint options\n   */\n  public getEndpoint(name: string): ApiEndpointOptions | undefined {\n    return this.endpoints.get(name);\n  }\n  \n  /**\n   * Set authentication token\n   * @param token Authentication token\n   */\n  public setAuthToken(token: string): void {\n    this.config.authToken = token;\n    \n    // Add auth interceptor\n    this.httpClient.addRequestInterceptor({\n      intercept: (url, options) => {\n        // Only add auth header if not already present\n        if (options.headers && this.config.authTokenHeader && !options.headers[this.config.authTokenHeader]) {\n          return {\n            url,\n            options: {\n              ...options,\n              headers: {\n                ...options.headers,\n                [this.config.authTokenHeader]: `Bearer ${this.config.authToken}`,\n              },\n            },\n          };\n        }\n        return { url, options };\n      },\n    });\n    \n    this.logger.debug('Set authentication token');\n  }\n  \n  /**\n   * Clear authentication token\n   */\n  public clearAuthToken(): void {\n    this.config.authToken = undefined;\n    // We can't remove individual interceptors, so we clear all and re-add any others if needed\n    this.httpClient.clearInterceptors();\n    this.logger.debug('Cleared authentication token');\n  }\n  \n  /**\n   * Call an API endpoint by name\n   * @param name Endpoint name\n   * @param params URL path parameters\n   * @param data Request body\n   * @param options Additional request options\n   * @returns Response promise\n   */\n  public async callEndpoint<T = any>(\n    name: string,\n    params: Record<string, string> = {},\n    data?: any,\n    options: HttpRequestOptions = {}\n  ): Promise<HttpResponse<T>> {\n    const endpoint = this.endpoints.get(name);\n    \n    if (!endpoint) {\n      throw new Error(`Endpoint ${name} is not registered`);\n    }\n    \n    if (endpoint.requiresAuth && !this.config.authToken) {\n      throw new Error(`Endpoint ${name} requires authentication`);\n    }\n    \n    // Replace path parameters\n    let path = endpoint.path;\n    for (const [key, value] of Object.entries(params)) {\n      path = path.replace(`:${key}`, encodeURIComponent(value));\n    }\n    \n    // Merge options\n    const requestOptions: HttpRequestOptions = {\n      method: endpoint.method,\n      headers: endpoint.headers,\n      timeout: endpoint.timeout,\n      ...options,\n    };\n    \n    try {\n      // Make the request\n      return await this.request<T>(path, data, requestOptions);\n    } catch (error) {\n      // Handle auth errors if auto retry is enabled\n      if (\n        error instanceof HttpError &&\n        error.status === 401 &&\n        this.config.autoRetryAuth &&\n        endpoint.requiresAuth\n      ) {\n        // Try to refresh auth token\n        await this.refreshAuth();\n        \n        // Retry the request\n        return await this.request<T>(path, data, requestOptions);\n      }\n      \n      throw error;\n    }\n  }\n  \n  /**\n   * Refresh authentication token\n   * This should be implemented by the application\n   */\n  private async refreshAuth(): Promise<void> {\n    this.logger.debug('Attempting to refresh authentication');\n    \n    // This is a placeholder - implement your auth refresh logic\n    const authManager = DependencyContainer.getInstance().get('authManager');\n    \n    if (authManager && typeof authManager.refreshToken === 'function') {\n      const newToken = await authManager.refreshToken();\n      if (newToken) {\n        this.setAuthToken(newToken);\n      }\n    } else {\n      throw new Error('Auth refresh not implemented');\n    }\n  }\n  \n  /**\n   * Make a direct API request\n   * @param path URL path\n   * @param data Request body\n   * @param options Request options\n   * @returns Response promise\n   */\n  public async request<T = any>(\n    path: string,\n    data?: any,\n    options: HttpRequestOptions = {}\n  ): Promise<HttpResponse<T>> {\n    const method = options.method || 'GET';\n    \n    this.logger.debug(`${method} ${path}`);\n    \n    try {\n      let response: HttpResponse<T>;\n      \n      // Call appropriate method based on HTTP method\n      switch (method) {\n        case 'GET':\n          response = await this.httpClient.get<T>(path, {\n            ...options,\n            params: data, // For GET, data is passed as query params\n          });\n          break;\n          \n        case 'POST':\n          response = await this.httpClient.post<T>(path, data, options);\n          break;\n          \n        case 'PUT':\n          response = await this.httpClient.put<T>(path, data, options);\n          break;\n          \n        case 'DELETE':\n          response = await this.httpClient.delete<T>(path, {\n            ...options,\n            params: data, // For DELETE, typically pass data as query params\n          });\n          break;\n          \n        case 'PATCH':\n          response = await this.httpClient.patch<T>(path, data, options);\n          break;\n          \n        case 'HEAD':\n          response = await this.httpClient.head<T>(path, options);\n          break;\n          \n        case 'OPTIONS':\n          response = await this.httpClient.optionsRequest<T>(path, options);\n          break;\n          \n        default:\n          throw new Error(`Unsupported HTTP method: ${method}`);\n      }\n      \n      return response;\n    } catch (error) {\n      this.logger.error(`API request failed: ${method} ${path}`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Make a GET request\n   * @param path URL path\n   * @param params Query parameters\n   * @param options Request options\n   * @returns Response promise\n   */\n  public get<T = any>(\n    path: string,\n    params?: Record<string, any>,\n    options: HttpRequestOptions = {}\n  ): Promise<HttpResponse<T>> {\n    return this.request<T>(path, params, { ...options, method: 'GET' });\n  }\n  \n  /**\n   * Make a POST request\n   * @param path URL path\n   * @param data Request body\n   * @param options Request options\n   * @returns Response promise\n   */\n  public post<T = any>(\n    path: string,\n    data?: any,\n    options: HttpRequestOptions = {}\n  ): Promise<HttpResponse<T>> {\n    return this.request<T>(path, data, { ...options, method: 'POST' });\n  }\n  \n  /**\n   * Make a PUT request\n   * @param path URL path\n   * @param data Request body\n   * @param options Request options\n   * @returns Response promise\n   */\n  public put<T = any>(\n    path: string,\n    data?: any,\n    options: HttpRequestOptions = {}\n  ): Promise<HttpResponse<T>> {\n    return this.request<T>(path, data, { ...options, method: 'PUT' });\n  }\n  \n  /**\n   * Make a DELETE request\n   * @param path URL path\n   * @param params Query parameters\n   * @param options Request options\n   * @returns Response promise\n   */\n  public delete<T = any>(\n    path: string,\n    params?: Record<string, any>,\n    options: HttpRequestOptions = {}\n  ): Promise<HttpResponse<T>> {\n    return this.request<T>(path, params, { ...options, method: 'DELETE' });\n  }\n  \n  /**\n   * Make a PATCH request\n   * @param path URL path\n   * @param data Request body\n   * @param options Request options\n   * @returns Response promise\n   */\n  public patch<T = any>(\n    path: string,\n    data?: any,\n    options: HttpRequestOptions = {}\n  ): Promise<HttpResponse<T>> {\n    return this.request<T>(path, data, { ...options, method: 'PATCH' });\n  }\n} ", "import { Component } from '../types/component-base';\nimport { ConfigManager } from './ConfigManager';\nimport { DependencyContainer } from './DependencyContainer';\nimport { EventBus } from './EventBus';\nimport { HttpClient } from './HttpClient';\nimport { ApiClient } from './ApiClient';\nimport { Logger, LogLevel, ComponentLogger } from './Logger';\n\n/**\n * Bootstrap options for the application\n */\nexport interface AppBootstrapOptions {\n  /**\n   * Config file path\n   */\n  configPath?: string;\n  \n  /**\n   * Minimum log level\n   */\n  logLevel?: LogLevel;\n  \n  /**\n   * Whether to initialize components automatically\n   */\n  autoInitialize?: boolean;\n  \n  /**\n   * Whether to register default services\n   */\n  registerDefaultServices?: boolean;\n  \n  /**\n   * Default API URL\n   */\n  apiUrl?: string;\n}\n\n/**\n * Default bootstrap options\n */\nconst DEFAULT_OPTIONS: AppBootstrapOptions = {\n  configPath: '/config/app-config.json',\n  logLevel: LogLevel.INFO,\n  autoInitialize: true,\n  registerDefaultServices: true,\n  apiUrl: '/api',\n};\n\n/**\n * Component initialization status\n */\nexport enum InitStatus {\n  NOT_STARTED = 'not_started',\n  IN_PROGRESS = 'in_progress',\n  COMPLETED = 'completed',\n  FAILED = 'failed',\n}\n\n/**\n * Application bootstrapper for initializing all components\n */\nexport class AppBootstrapper implements Component {\n  private static instance: AppBootstrapper;\n  private options: AppBootstrapOptions;\n  private dependencyContainer: DependencyContainer;\n  private logger: ComponentLogger;\n  private initStatus: Map<string, InitStatus> = new Map();\n  private eventBus: EventBus;\n  private isBootstrapped: boolean = false;\n  \n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): AppBootstrapper {\n    if (!AppBootstrapper.instance) {\n      AppBootstrapper.instance = new AppBootstrapper();\n    }\n    return AppBootstrapper.instance;\n  }\n  \n  /**\n   * Private constructor\n   */\n  private constructor() {\n    this.options = { ...DEFAULT_OPTIONS };\n    this.logger = Logger.getLogger('AppBootstrapper');\n    this.dependencyContainer = DependencyContainer.getInstance();\n    this.eventBus = EventBus.getInstance();\n    \n    // Set initial status for core components\n    this.initStatus.set('logger', InitStatus.NOT_STARTED);\n    this.initStatus.set('config', InitStatus.NOT_STARTED);\n    this.initStatus.set('eventBus', InitStatus.NOT_STARTED);\n    this.initStatus.set('dependencyContainer', InitStatus.NOT_STARTED);\n    this.initStatus.set('httpClient', InitStatus.NOT_STARTED);\n    this.initStatus.set('apiClient', InitStatus.NOT_STARTED);\n  }\n  \n  /**\n   * Implementation of Component interface\n   * Initializes the application by bootstrapping it\n   */\n  public initialize(): void {\n    if (!this.isBootstrapped) {\n      this.bootstrap(this.options).catch(error => {\n        console.error('Failed to initialize application:', error);\n      });\n    }\n  }\n  \n  /**\n   * Bootstrap the application\n   * @param options Bootstrap options\n   */\n  public async bootstrap(options: AppBootstrapOptions = {}): Promise<void> {\n    if (this.isBootstrapped) {\n      this.logger.warn('Application already bootstrapped', 'Bootstrap operation skipped');\n      return;\n    }\n    \n    // Merge options\n    this.options = {\n      ...DEFAULT_OPTIONS,\n      ...options,\n    };\n    \n    try {\n      // Initialize logger first\n      await this.initializeLogger();\n      \n      // Initialize config\n      await this.initializeConfig();\n      \n      // Initialize event bus\n      await this.initializeEventBus();\n      \n      // Initialize dependency container\n      await this.initializeDependencyContainer();\n      \n      // Initialize HTTP client\n      await this.initializeHttpClient();\n      \n      // Initialize API client\n      await this.initializeApiClient();\n      \n      // Register default services if enabled\n      if (this.options.registerDefaultServices) {\n        this.registerDefaultServices();\n      }\n      \n      this.isBootstrapped = true;\n      this.logger.info('Application bootstrapped successfully', 'All components initialized');\n      \n      // Emit bootstrap complete event\n      this.eventBus.publish('app:bootstrapped', {\n        timestamp: new Date(),\n        status: 'success',\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger.error('Failed to bootstrap application', errorMessage);\n      \n      // Emit bootstrap failed event\n      this.eventBus.publish('app:bootstrap:failed', {\n        timestamp: new Date(),\n        error,\n      });\n      \n      throw error;\n    }\n  }\n  \n  /**\n   * Initialize the logger\n   */\n  private async initializeLogger(): Promise<void> {\n    this.updateStatus('logger', InitStatus.IN_PROGRESS);\n    \n    try {\n      // Configure logger with minimum log level\n      const loggerInstance = Logger.getInstance();\n      \n      // Set the log level if provided\n      if (this.options.logLevel !== undefined) {\n        loggerInstance.setLevel(this.options.logLevel);\n      }\n      \n      this.updateStatus('logger', InitStatus.COMPLETED);\n      this.logger.info('Logger initialized', 'Logging system ready');\n    } catch (error) {\n      this.updateStatus('logger', InitStatus.FAILED);\n      console.error('Failed to initialize logger', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Initialize the config manager\n   */\n  private async initializeConfig(): Promise<void> {\n    this.updateStatus('config', InitStatus.IN_PROGRESS);\n    \n    try {\n      const configManager = ConfigManager.getInstance();\n      \n      // Load config from path\n      if (this.options.configPath) {\n        try {\n          await configManager.loadConfig(this.options.configPath);\n          this.logger.info('Config loaded', `Configuration loaded from ${this.options.configPath}`);\n        } catch (error) {\n          // Log error but continue - don't fail bootstrap due to config loading failure\n          const errorMessage = error instanceof Error ? error.message : String(error);\n          this.logger.warn(\n            `Failed to load config from ${this.options.configPath}`, \n            errorMessage\n          );\n        }\n      }\n      \n      // Set API URL if provided\n      if (this.options.apiUrl) {\n        configManager.set('apiUrl', this.options.apiUrl);\n      }\n      \n      this.updateStatus('config', InitStatus.COMPLETED);\n      this.logger.info('Config initialized', `Configuration ready`);\n    } catch (error) {\n      this.updateStatus('config', InitStatus.FAILED);\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger.error('Failed to initialize config', errorMessage);\n      throw error;\n    }\n  }\n  \n  /**\n   * Initialize the event bus\n   */\n  private async initializeEventBus(): Promise<void> {\n    this.updateStatus('eventBus', InitStatus.IN_PROGRESS);\n    \n    try {\n      // Nothing special to do here, just mark as completed\n      this.updateStatus('eventBus', InitStatus.COMPLETED);\n      this.logger.info('EventBus initialized', 'Event system ready');\n    } catch (error) {\n      this.updateStatus('eventBus', InitStatus.FAILED);\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger.error('Failed to initialize event bus', errorMessage);\n      throw error;\n    }\n  }\n  \n  /**\n   * Initialize the dependency container\n   */\n  private async initializeDependencyContainer(): Promise<void> {\n    this.updateStatus('dependencyContainer', InitStatus.IN_PROGRESS);\n    \n    try {\n      // Register core components in the container\n      this.dependencyContainer.register('logger', () => Logger.getInstance());\n      this.dependencyContainer.register('configManager', () => ConfigManager.getInstance());\n      this.dependencyContainer.register('eventBus', () => this.eventBus);\n      \n      this.updateStatus('dependencyContainer', InitStatus.COMPLETED);\n      this.logger.info('DependencyContainer initialized', 'Dependency injection system ready');\n    } catch (error) {\n      this.updateStatus('dependencyContainer', InitStatus.FAILED);\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger.error('Failed to initialize dependency container', errorMessage);\n      throw error;\n    }\n  }\n  \n  /**\n   * Initialize the HTTP client\n   */\n  private async initializeHttpClient(): Promise<void> {\n    this.updateStatus('httpClient', InitStatus.IN_PROGRESS);\n    \n    try {\n      const httpClient = HttpClient.getInstance();\n      httpClient.initialize();\n      this.dependencyContainer.register('httpClient', () => httpClient);\n      \n      this.updateStatus('httpClient', InitStatus.COMPLETED);\n      this.logger.info('HttpClient initialized', 'HTTP client ready');\n    } catch (error) {\n      this.updateStatus('httpClient', InitStatus.FAILED);\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger.error('Failed to initialize HTTP client', errorMessage);\n      throw error;\n    }\n  }\n  \n  /**\n   * Initialize the API client\n   */\n  private async initializeApiClient(): Promise<void> {\n    this.updateStatus('apiClient', InitStatus.IN_PROGRESS);\n    \n    try {\n      const configManager = ConfigManager.getInstance();\n      const apiUrl = configManager.get('apiUrl') as string || this.options.apiUrl;\n      \n      if (!apiUrl) {\n        throw new Error('API URL not configured');\n      }\n      \n      const apiClient = ApiClient.getInstance();\n      apiClient.initialize({\n        baseUrl: apiUrl\n      });\n      \n      this.dependencyContainer.register('apiClient', () => apiClient);\n      \n      this.updateStatus('apiClient', InitStatus.COMPLETED);\n      this.logger.info('ApiClient initialized', `API client ready with base URL: ${apiUrl}`);\n    } catch (error) {\n      this.updateStatus('apiClient', InitStatus.FAILED);\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger.error('Failed to initialize API client', errorMessage);\n      throw error;\n    }\n  }\n  \n  /**\n   * Register default services\n   */\n  private registerDefaultServices(): void {\n    // Register core services\n    this.dependencyContainer.register('appBootstrapper', () => this);\n    \n    this.logger.info('Default services registered', 'Core services available in dependency container');\n  }\n  \n  /**\n   * Update component initialization status\n   * @param component Component name\n   * @param status New status\n   */\n  private updateStatus(component: string, status: InitStatus): void {\n    this.initStatus.set(component, status);\n    \n    // Emit status change event\n    this.eventBus.publish('app:component:status', {\n      component,\n      status,\n      timestamp: new Date(),\n    });\n  }\n  \n  /**\n   * Get initialization status\n   * @param component Component name\n   */\n  public getStatus(component: string): InitStatus {\n    return this.initStatus.get(component) || InitStatus.NOT_STARTED;\n  }\n  \n  /**\n   * Check if application is bootstrapped\n   */\n  public isBootstrapComplete(): boolean {\n    return this.isBootstrapped;\n  }\n} ", "/**\n * API Admin UI\n * Main entry point for the application\n */\n\nimport { AppController } from './controllers/AppController';\nimport { FlowController } from './controllers/FlowController';\nimport { Config } from './config/config';\nimport { ResponseViewer } from './components/ResponseViewer';\nimport { DomainStateViewer } from './components/DomainStateViewer';\nimport { UIManager } from './components/UIManagerNew';\nimport LogsViewer from './components/LogsViewer';\nimport { EndpointManager } from './modules/endpoint-manager';\nimport { DomainStateManager } from './modules/domain-state-manager';\nimport { VariableManager } from './modules/variable-manager';\nimport { BackendLogsManager } from './modules/backend-logs-manager';\nimport { StatusManager } from './modules/status-manager';\nimport { HistoryManager } from './modules/history-manager';\nimport { logger } from './utils/logger';\nimport { AppBootstrapper } from './core/AppBootstrapper';\nimport { LogLevel } from './core/Logger';\n\n// Import types\nimport { \n  ResponseViewerOptions, \n  DomainStateViewerOptions,\n  UIManagerOptions,\n  EndpointManagerOptions,\n  VariableManagerOptions,\n  DomainStateManagerOptions,\n  StatusManagerOptions,\n  HistoryManagerOptions,\n  FlowControllerOptions\n} from './types/app-types';\n\n/**\n * Main application entry point\n */\nasync function main(): Promise<void> {\n  try {\n    // Get the bootstrapper\n    const bootstrapper = AppBootstrapper.getInstance();\n    \n    // Bootstrap the application with default settings\n    await bootstrapper.bootstrap({\n      logLevel: LogLevel.DEBUG,\n      configPath: '/config/app-config.json',\n      apiUrl: '/api/v1',\n      registerDefaultServices: true\n    });\n    \n    // Log bootstrap status\n    console.log('Application bootstrap complete');\n    \n    // Application is now initialized and ready to use\n    console.log('Application ready');\n    \n  } catch (error) {\n    // Log any bootstrap errors\n    console.error('Failed to start application:', error);\n  }\n}\n\n// Initialize the application when the DOM is ready\ndocument.addEventListener('DOMContentLoaded', main);\n\n// Export main function for testing or direct invocation\nexport { main };\n\n// Wait for DOM content to be loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  try {\n    logger.info('Initializing API Admin Interface...');\n    \n    // Initialize configuration\n    const config = new Config();\n    \n    // Initialize UI components\n    const responseViewerOptions: ResponseViewerOptions = {\n      containerId: 'response-container',\n      responseHeadersId: 'response-headers',\n      responseBodyId: 'response-body',\n      responseStatusId: 'response-status'\n    };\n    const responseViewer = new ResponseViewer(responseViewerOptions);\n    \n    const domainStateViewerOptions: DomainStateViewerOptions = {\n      containerId: 'domain-state-container'\n    };\n    const domainStateViewer = new DomainStateViewer(domainStateViewerOptions as any);\n    \n    const uiManagerOptions: UIManagerOptions = {\n      containerId: 'app',\n      responseViewer,\n      toastContainerId: 'toast-container',\n      loadingOverlayId: 'loading-overlay',\n      modalContainerId: 'modal-container'\n    };\n    const uiManager = new UIManager(uiManagerOptions);\n    \n    // Initialize modules\n    const endpointManagerOptions: EndpointManagerOptions = {\n      useLocalEndpoints: true,\n      supportMultipleFormats: true\n    };\n    const endpointManager = new EndpointManager(endpointManagerOptions);\n    \n    const variableManagerOptions: VariableManagerOptions = {\n      storageKey: 'api_variables',\n      variablePrefix: '$',\n      persistVariables: true,\n      storageType: 'localStorage',\n      maxVariables: 100\n    };\n    const variableManager = new VariableManager(variableManagerOptions);\n    \n    const domainStateManagerOptions: DomainStateManagerOptions = {\n      apiClient: null,\n      localStorageKey: 'domain_state',\n      autoSave: true,\n      diffingEnabled: true\n    };\n    const domainStateManager = new DomainStateManager(domainStateManagerOptions);\n    \n    const backendLogsManager = new BackendLogsManager({\n      logsEndpoint: config.get('endpoints.logsEndpoint', '/api/v1/logs')\n    });\n    \n    // Initialize the new LogsViewer component\n    const logsViewer = new LogsViewer({\n      logsContainerId: 'logs-container',\n      backendLogsManager: backendLogsManager,\n      maxFrontendLogs: 500,\n      showFrontendLogs: true,\n      showBackendLogs: true,\n      enableAiLogFormatting: true,\n      enableDomainEventFormatting: true,\n      enableCorrelationIdFiltering: true,\n      enableSearchFiltering: true,\n      autoRefreshBackendLogs: true,\n      refreshInterval: 30000 // 30 seconds\n    });\n    \n    const statusManagerOptions: StatusManagerOptions = {\n      updateInterval: 30000,\n      statusEndpoint: config.get('endpoints.statusEndpoint', '/api/v1/status'),\n      containerId: 'status-container',\n      apiClient: null\n    };\n    const statusManager = new StatusManager(statusManagerOptions);\n    \n    const historyManagerOptions: HistoryManagerOptions = {\n      maxEntries: config.get('maxHistoryItems', 50),\n      persistHistory: true,\n      storageKey: 'api_history',\n      storageType: 'localStorage',\n      maxItems: config.get('maxHistoryItems', 50)\n    };\n    const historyManager = new HistoryManager(historyManagerOptions);\n    \n    // Initialize controllers (AppController doesn't accept options in constructor anymore)\n    const appController = new AppController();\n    \n    const flowControllerOptions: FlowControllerOptions = {\n      endpointManager,\n      uiManager,\n      variableManager,\n      historyManager,\n      appController\n    };\n    const flowController = new FlowController(flowControllerOptions);\n    \n    // Initialize the application\n    appController.initialize(config);\n    flowController.initialize();\n    \n    // Set up tab switching\n    const flowsTabBtn = document.getElementById('flows-tab-btn');\n    const stateTabBtn = document.getElementById('state-tab-btn');\n    const logsTabBtn = document.getElementById('logs-tab-btn');\n    \n    const flowsTab = document.getElementById('flows-tab');\n    const stateTab = document.getElementById('state-tab');\n    const logsTab = document.getElementById('logs-tab');\n    \n    const switchTab = (tabId: string) => {\n      // Hide all tabs\n      if (flowsTab) flowsTab.classList.add('hidden');\n      if (stateTab) stateTab.classList.add('hidden');\n      if (logsTab) logsTab.classList.add('hidden');\n      \n      // Reset all tab buttons\n      if (flowsTabBtn) flowsTabBtn.classList.remove('bg-primary-600');\n      if (stateTabBtn) stateTabBtn.classList.remove('bg-primary-600');\n      if (logsTabBtn) logsTabBtn.classList.remove('bg-primary-600');\n      \n      // Show selected tab\n      const selectedTab = document.getElementById(tabId);\n      if (selectedTab) selectedTab.classList.remove('hidden');\n      \n      // Highlight selected tab button\n      switch (tabId) {\n        case 'flows-tab':\n          if (flowsTabBtn) flowsTabBtn.classList.add('bg-primary-600');\n          break;\n        case 'state-tab':\n          if (stateTabBtn) stateTabBtn.classList.add('bg-primary-600');\n          break;\n        case 'logs-tab':\n          if (logsTabBtn) logsTabBtn.classList.add('bg-primary-600');\n          // Refresh logs when tab is activated\n          if (backendLogsManager) {\n            backendLogsManager.fetchLogs();\n          }\n          break;\n      }\n    };\n    \n    // Add tab click handlers\n    if (flowsTabBtn) {\n      flowsTabBtn.addEventListener('click', () => switchTab('flows-tab'));\n    }\n    \n    if (stateTabBtn) {\n      stateTabBtn.addEventListener('click', () => switchTab('state-tab'));\n    }\n    \n    if (logsTabBtn) {\n      logsTabBtn.addEventListener('click', () => switchTab('logs-tab'));\n    }\n    \n    // Add refresh logs button handler\n    const refreshLogsBtn = document.getElementById('refresh-logs-btn');\n    if (refreshLogsBtn) {\n      refreshLogsBtn.addEventListener('click', () => {\n        if (backendLogsManager) {\n          backendLogsManager.fetchLogs();\n        }\n      });\n    }\n    \n    // Set up error handling\n    window.onerror = (message, source, lineno, colno, error) => {\n      logger.error('Global error:', error || message);\n      uiManager.showError('Application Error', `${message}\\nLine: ${lineno}, Column: ${colno}`);\n      return true;\n    };\n    \n    // Handle unhandled promise rejections\n    window.addEventListener('unhandledrejection', (event) => {\n      logger.error('Unhandled promise rejection:', event.reason);\n      uiManager.showError('Application Error', String(event.reason));\n    });\n    \n    logger.info('API Admin Interface initialized successfully');\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    \n    // Handle initialization errors\n    console.error('Error initializing application:', error);\n    \n    // Display error in UI\n    const appContainer = document.getElementById('app');\n    if (appContainer) {\n      appContainer.innerHTML = `\n        <div class=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 m-4\">\n          <h2 class=\"font-bold\">Application Initialization Error</h2>\n          <p class=\"whitespace-pre-wrap\">${errorMessage}</p>\n        </div>\n      `;\n    }\n  }\n}); "],
  "mappings": "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",
  "names": ["DEFAULT_OPTIONS", "escapeHtml", "DEFAULT_OPTIONS", "DEFAULT_OPTIONS", "jsonBody", "fileInput", "DEFAULT_CONFIG", "LogLevel", "DEFAULT_OPTIONS", "Logger", "logger", "Logger", "DEFAULT_OPTIONS", "Logger", "DEFAULT_OPTIONS", "Logger", "DEFAULT_OPTIONS", "DEFAULT_OPTIONS", "Logger"]
}

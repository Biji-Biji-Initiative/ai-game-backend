Okay, let's outline a clear plan to address the architectural issues and enforce TypeScript purity in your admin repo. This plan focuses on what to change and delete, rather than providing the code itself.

Goal: A clean, exclusively TypeScript codebase using Dependency Injection (DI) and abstractions, aligning with your MIGRATION.md and ARCHITECTURE.md.

Core Principles:

Single Responsibility: Each module/class does one thing well.
Dependency Injection: Dependencies are passed in (usually via constructor), not created internally.
Abstraction: Use service interfaces (DomService, StorageService, etc.) instead of direct browser APIs.
TypeScript Purity: Eliminate any, @ts-ignore, ensure strong typing.
Centralized Bootstrapping: AppBootstrapper handles initialization and registration.
Single Source of Truth: Eliminate duplicate core components.
The Plan:

Phase 1: Establish the Core & Fix Bootstrapping

Define Core Implementations (Golden Source):
Logger: Standardize on core/Logger.ts.
Config: Standardize on core/ConfigManager.ts.
API Client: Standardize on api/api-client.ts (APIClient class). The instance registered in DI should be named 'mainApiClient'.
UI Manager: Standardize on components/UIManagerNew.ts. (Plan to rename later).
Services (Interfaces): services/DomService.ts, services/StorageService.ts, services/NetworkService.ts, services/LoggingService.ts.
Services (Implementations): BrowserDomService, LocalStorageService, FetchNetworkService, ConsoleLoggingService (or chosen implementations).
Event Bus: core/EventBus.ts.
DI Container: core/DependencyContainer.ts.
Clean Up index.ts:
DELETE: Remove all manual instantiation (new ...) of managers, controllers, services, viewers, etc.
DELETE: Remove all manual event listener setup between components within index.ts.
EDIT: Keep only the code that:
Imports AppBootstrapper.
Imports LogLevel if needed for bootstrap options.
Gets the AppBootstrapper instance (getInstance()).
Calls bootstrapper.bootstrap({...}) with necessary options.
Includes the top-level try...catch block to handle fatal bootstrap errors and potentially render a message to the DOM.
Keeps the DOMContentLoaded listener wrapper.
Refactor core/AppBootstrapper.ts:
EDIT: Make this the single place where core services, managers, and controllers are instantiated and registered into the DependencyContainer.
ADD: Registration for DomService, StorageService (defaulting to LocalStorageService), NetworkService, LoggingService. Register the implementation against the interface name (e.g., container.register<StorageService>('storageService', () => new LocalStorageService())).
ADD: Registration for the chosen UIManager (UIManagerNew.ts instance) as 'uiManager'.
ADD: Registration for all manager classes (EndpointManager, VariableManager, HistoryManager, DomainStateManager, StatusManager, AuthManager, BackendLogsManager). Ensure their factories in the register call correctly retrieve dependencies from the container (e.g., c => new EndpointManager({ apiClient: c.get('mainApiClient'), ... })).
ADD: Registration for ResponseController and UserInterfaceController. Ensure their factories inject required services. Alias userInterfaceController as uiController if needed for compatibility.
ADD: Registration for UI components like ResponseViewer, DomainStateViewer, VariableExtractor, LogsViewer, RequestBuilder. Ensure their factories inject required dependencies (like managers or services).
EDIT: Ensure mainApiClient registration correctly instantiates APIClient from api/api-client.ts and injects its dependencies (like an error handler, which might itself be registered).
EDIT (Optional but Recommended): Register the legacy core/ApiClient.ts wrapper only if absolutely necessary for transition, aliasing the old 'apiClient' name to it. Mark its registration as deprecated. Plan to remove this.
DELETE: Registration for core/HttpClient.ts.
DELETE: Registration for duplicate/old Loggers and ConfigManagers if they exist.
Deprecate/Remove Duplicates:
DELETE: core/HttpClient.ts. Search for any remaining imports and remove them.
DELETE: utils/logger.ts (unless core/Logger.ts depends on it, which it shouldn't). Update all imports to use core/Logger.ts.
DELETE: config/config.ts. Update all imports to use core/ConfigManager.ts.
EDIT: core/ApiClient.ts: Mark the class with @deprecated JSDoc. Ensure its internal implementation now uses the injected 'mainApiClient' (the new APIClient) instead of HttpClient. Update its methods (get, post, etc.) to delegate calls to the injected mainApiClient. Remove any internal instantiation of HttpClient.
EDIT: api/README.md: Update to state that api/api-client.ts is the only client and remove references to the others.
Phase 2: Enforce DI and Abstractions

Inject Dependencies:
EDIT: Go through every .ts file (Managers, Controllers, Services, UI Components):
Identify dependencies (Logger, APIClient, ConfigManager, other Managers/Services).
Modify constructors to accept these dependencies as parameters. Store them in private readonly properties.
DELETE: Any code inside these classes that directly calls SomeService.getInstance(), new SomeDependency(), or imports singletons directly for use.
EDIT: core/AppBootstrapper.ts: Update the factory functions within the dependencyContainer.register calls for each component modified above. Ensure the factory retrieves the necessary dependencies from the container (c.get('dependencyName')) and passes them into the constructor.
Use Service Abstractions:
EDIT: Search all .ts files for document.getElementById, document.querySelector, document.createElement, element.addEventListener, element.innerHTML =, element.textContent =, element.classList, element.appendChild, element.removeChild, etc.
Replace these calls with the equivalent methods on the injected DomService instance (e.g., this.domService.getElementById(...), this.domService.setTextContent(...), this.domService.addClass(...)).
EDIT: Search all .ts files for localStorage. and sessionStorage..
Replace these calls with the equivalent methods on the injected StorageService instance (e.g., this.storageService.get(...), this.storageService.set(...)).
Phase 3: TypeScript Purity and Cleanup

Refine Types:
EDIT: Systematically review all .ts files.
Replace any with specific types, interfaces, unknown, or generics.
Fix type errors revealed by removing @ts-ignore.
Ensure consistency between declared interfaces (types/ directory) and their usage. Define missing interfaces.
Remove redundant or unused types/interfaces.
Strengthen function signatures and return types.
Clean Up Structure:
RENAME: components/UIManagerNew.ts -> components/UIManager.ts (or maybe services/UIService.ts if it's more of a service). Update imports.
DELETE: bundle.js, bundle.js.map (these should be generated by your build process).
DELETE: legacy-code-checklist.md.
REVIEW: Directory structure (core, services, modules, components, ui, types). Consolidate or clarify if needed. Ensure consistency.
EDIT: Update ARCHITECTURE.md and MIGRATION.md to reflect the final architecture accurately.
Final Verification:
Run tsc --noEmit from the js/ directory (or project root depending on your setup) to catch TypeScript errors.
Run your build process (Webpack, Rollup, etc.) to confirm the bundle generation works.
Run automated tests. Update tests as needed to handle DI (use mocking frameworks like Jest mocks).
Perform thorough manual testing of the admin UI.
This plan moves from foundational issues (bootstrapping, core components) to component-level refactoring (DI, abstractions) and finally to cleanup and verification. Remember to commit frequently after each significant step. Good luck!
